<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2017-02-26T06:35:14.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优秀作者</title>
    <link href="http://riusksk.github.io/2017/02/26/0/"/>
    <id>http://riusksk.github.io/2017/02/26/0/</id>
    <published>2017-02-26T06:27:31.000Z</published>
    <updated>2017-02-26T06:35:14.000Z</updated>
    
    <content type="html">&lt;p&gt;之前因为《漏洞战争：软件漏洞分析精要》一书的出版，获得电子工业出版社的“优秀作者”称号，感谢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/优秀作者.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为《漏洞战争：软件漏洞分析精要》一书的出版，获得电子工业出版社的“优秀作者”称号，感谢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/优秀作者.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2016-7595 Apple macOS/iOS CoreText OTL::GPOS::ApplyPairPos 越界访问漏洞分析</title>
    <link href="http://riusksk.github.io/2016/12/21/CVE-2016-7595/"/>
    <id>http://riusksk.github.io/2016/12/21/CVE-2016-7595/</id>
    <published>2016-12-21T04:35:49.000Z</published>
    <updated>2016-12-21T04:44:13.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;2016年12月的Apple安全公告中（&lt;a href=&quot;https://support.apple.com/zh-cn/HT207423&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;macOS公告&lt;/a&gt;与&lt;a href=&quot;https://support.apple.com/zh-cn/HT207422&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS公告&lt;/a&gt;），修复4个由腾讯安全平台部终端安全团队报告的漏洞，其中有2个是字体解析造成的越界访问漏洞，影响 macOS/iOS/watchOS/tvOS等多个平台系统，本文主要分析其中的 CVE-2016-7595 字体漏洞【图1】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14819500329936/14819504640098.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1&lt;/center&gt;

&lt;p&gt;这个漏洞在报给Apple 17天后发布 macOS 10.2.2 测试版补丁，一个半月后发布安全公告和补丁（包括iOS、watchOS和tvOS），难得看见苹果这么积极一次。&lt;/p&gt;
&lt;p&gt;###漏洞分析&lt;br&gt;此次漏洞是通过Fuzzing发现的，直接对比poc与原始文件的数据，可以发现其实就1个字节的差异（0x00 =&amp;gt; 0x6C）【图2】：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14819500329936/14819521265634.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图2&lt;/center&gt;

&lt;p&gt;用ttx命令分析字体格式：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;╭─riusksk@MacBook  ~/Downloads ‹›&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;╰─➤$ ttx poc.ttf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &quot;poc.ttf&quot; to &quot;poc#1.ttx&quot;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;GlyphOrder&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;head&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;hhea&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;maxp&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;OS/2&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;hmtx&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;cmap&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;fpgm&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;prep&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;cvt &#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;loca&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;glyf&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;name&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;post&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;gasp&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/lib/python2.7/site-packages/FontTools/fontTools/ttLib/tables/otTables.py:60: UserWarning: Coverage table has start glyph ID out of range: glyph27713.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warnings.warn(&quot;Coverage table has start glyph ID out of range: %s.&quot; % start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;An exception occurred during the decompilation of the &#39;GPOS&#39; table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;GPOS&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;GSUB&#39; table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dumping &#39;DSIG&#39; table...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的提示可以看出，是在解析&lt;code&gt;GPOS&lt;/code&gt;表时，通过&lt;code&gt;glyphID&lt;/code&gt;去&lt;code&gt;Coverage&lt;/code&gt;表索引时导致越界了，其中&lt;code&gt;glyph27713&lt;/code&gt;的数值正是&lt;code&gt;0x6C41（27713）&lt;/code&gt;,也就是上面图1中文件对比的差异值。虽然这是FontTools工具的错误，不代表Apple系统本身，但它跟Apple系统导致崩溃的是同一字节，从这可以直接得到导致崩溃的关键字节是glyphID值。&lt;/p&gt;
&lt;h4 id=&quot;GPOS表&quot;&gt;&lt;a href=&quot;#GPOS表&quot; class=&quot;headerlink&quot; title=&quot;GPOS表&quot;&gt;&lt;/a&gt;GPOS表&lt;/h4&gt;&lt;p&gt;TrueType/OpenType字体格式中的GPOS表是用于为字体中文本布局及渲染提供glyph位置信息的表，表中各个字体结构如图3所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14819500329936/14819570625241.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图3&lt;/center&gt;

&lt;p&gt;GPOS表主要包含3个子表：ScriptList、FeatureList和LookupList，本次漏洞主要问题在LookupList子表中的PairAdjustmentPositioning中，PairAdjustmentPositioning子表(PairPos)被用于调整两个glyphs彼此之间的位置。&lt;/p&gt;
&lt;p&gt;PairPos表下又包含多个PairSet数组，PairSet数组包含Coverage表中每个glyph对应的偏移量，并按Coverage Index来排序。&lt;/p&gt;
&lt;p&gt;PairSet下包含PairValueRecord指定每一glyph配对(pair)中的第二个glyph（SecondGlyph）的glyph名和索引值GlyphID（对应【图3】中glyphRefID），同时包含两个ValueRecord值去指定第一个glyph和第二个glyph的位置信息。&lt;/p&gt;
&lt;p&gt;导致越界的漏洞正是用于索引的GlyphID（glyphRefID），用ttx解析原有正常字体文件生成的xml文件，如图4所示，index=”65”就是正常GlyphID值 00 41，如果随便给第1字节设置个值都会导致崩溃。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14819500329936/14819586010961.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图4&lt;/center&gt;

&lt;h4 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;调试&quot;&gt;&lt;/a&gt;调试&lt;/h4&gt;&lt;p&gt;用lldb调试下，崩溃后的地址及栈回溯如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(lisa)run poc.ttf &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 96714 launched&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 96714 stopped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* thread #1: tid = 0x3f119d, 0x00007fffa7c01491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411, queue = &amp;apos;com.apple.main-thread&amp;apos;, stop reason = EXC_BAD_ACCESS (code=1, address=0x3007ddfae)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #0: 0x00007fffa7c01491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreText`OTL::GPOS::ApplyPairPos:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;  0x7fffa7c01491 &amp;lt;+411&amp;gt;: mov    ax, word ptr [r14 + 2*rax + 0xa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0x7fffa7c01497 &amp;lt;+417&amp;gt;: rol    ax, 0x8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0x7fffa7c0149b &amp;lt;+421&amp;gt;: movzx  eax, ax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0x7fffa7c0149e &amp;lt;+424&amp;gt;: lea    rsi, [r14 + rax]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa)register read rax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   rax = 0x00000000ffffffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa)x $r14+2*$rax+0xa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: memory read failed for 0x3007c5600&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa)bt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* thread #1: tid = 0x3f119d, 0x00007fffa7c01491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411, queue = &amp;apos;com.apple.main-thread&amp;apos;, stop reason = EXC_BAD_ACCESS (code=1, address=0x3007ddfae)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* frame #0: 0x00007fffa7c01491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #1: 0x00007fffa7c05907 CoreText`OTL::GPOS::ApplyLookupSubtable(OTL::Lookup const&amp;amp;, unsigned int, OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #2: 0x00007fffa7c02c7b CoreText`OTL::GPOS::ApplyLookupAt(OTL::Lookup const&amp;amp;, TGlyphIterator&amp;amp;) const + 339&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #3: 0x00007fffa7b68ff4 CoreText`OTL::GPOS::ApplyLookups(TRunGlue&amp;amp;, int, OTL::GlyphLookups&amp;amp;) const + 448&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #4: 0x00007fffa7b68897 CoreText`TOpenTypePositioningEngine::PositionRuns(SyncState&amp;amp;, KerningStatus&amp;amp;) + 839&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #5: 0x00007fffa7b66d05 CoreText`TKerningEngine::PositionGlyphs(TLine&amp;amp;, TCharStream const*) + 347&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #6: 0x00007fffa7bbe59d CoreText`TTypesetter::FinishLayout(std::__1::tuple&amp;lt;TLine const*, TCharStream const*, void const* (*)(__CTRun const*, __CFString const*, void*), void*, std::__1::shared_ptr&amp;lt;TBidiLevelsProvider&amp;gt;*, unsigned int, unsigned char&amp;gt; const&amp;amp;, TLine&amp;amp;, SyncState) + 35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #7: 0x00007fffa7b5586d CoreText`TTypesetterAttrString::Initialize(__CFAttributedString const*) + 865&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #8: 0x00007fffa7b552ea CoreText`CTLineCreateWithAttributedString + 59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #9: 0x00007fffb8be086e UIFoundation`__NSStringDrawingEngine + 10669&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #10: 0x00007fffb8be69ca UIFoundation`-[NSAttributedString(NSExtendedStringDrawing) boundingRectWithSize:options:context:] + 605&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #11: 0x00007fffb8bdcc43 UIFoundation`-[NSAttributedString(NSStringDrawing) size] + 59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #12: 0x0000000100047d70 Font Book`___lldb_unnamed_symbol1053$$Font Book + 368&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #13: 0x00000001000476e9 Font Book`___lldb_unnamed_symbol1052$$Font Book + 89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #14: 0x00000001000475b0 Font Book`___lldb_unnamed_symbol1049$$Font Book + 774&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #15: 0x000000010006a2d2 Font Book`___lldb_unnamed_symbol1860$$Font Book + 110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #16: 0x000000010005d4ee Font Book`___lldb_unnamed_symbol1545$$Font Book + 2651&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #17: 0x00007fffa46b2451 AppKit`-[NSApplication _doOpenFile:ok:tryTemp:] + 253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #18: 0x00007fffa427f789 AppKit`-[NSApplication finishLaunching] + 1624&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #19: 0x00007fffa427ed2a AppKit`-[NSApplication run] + 267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #20: 0x00007fffa4249a8a AppKit`NSApplicationMain + 1237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #21: 0x0000000100001527 Font Book`___lldb_unnamed_symbol1$$Font Book + 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #22: 0x00007fffbb632255 libdyld.dylib`start + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame #23: 0x00007fffbb632255 libdyld.dylib`start + 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;[r14 + 2*rax + 0xa]&lt;/code&gt;索引错误，很典型的数组越界指令。&lt;/p&gt;
&lt;p&gt;通过设置条件断点去记录获取的GlyphID以及后面的将其传参给OTL::Coverage::SearchFmt2Binary函数后返回值，可以发现最后当GlyphID=0x55(85)时返回值0，最后触发崩溃，所以样本中的GlyphID只要&amp;gt;=0x55都会导致崩溃。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(lisa) p &quot;GlyphID&quot; $eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(unsigned int) $95 = 85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa) c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 25648 resuming&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command #2 &#39;c&#39; continued the target.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa) p &quot;SearchFmt2Binary参数2&quot; $esi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(unsigned int) $96 = 85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa) c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 25648 resuming&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command #2 &#39;c&#39; continued the target.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa) p &quot;返回值&quot; $eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(unsigned int) $97 = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lisa) c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 25648 resuming&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command #2 &#39;c&#39; continued the target.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 25648 stopped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* thread #1: tid = 0x43fc6, 0x00007fffcb443491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x3007bc6fe)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frame #0: 0x00007fffcb443491 CoreText`OTL::GPOS::ApplyPairPos(OTL::LookupSubtable const*, TGlyphIterator&amp;amp;, OTL::Coverage const&amp;amp;) const + 411&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreText`OTL::GPOS::ApplyPairPos:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;  0x7fffcb443491 &amp;lt;+411&amp;gt;: mov    ax, word ptr [r14 + 2*rax + 0xa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x7fffcb443497 &amp;lt;+417&amp;gt;: rol    ax, 0x8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x7fffcb44349b &amp;lt;+421&amp;gt;: movzx  eax, ax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x7fffcb44349e &amp;lt;+424&amp;gt;: lea    rsi, [r14 + rax]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回值为0时，经dec减1后为0xFFFFFFFF，以此为索引值，最后导致越界访问。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dec     eax     ; eax=0xFFFFFFFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     ax, [r14+rax*2+0Ah] ; 越界访问，导致崩溃&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞修复&quot;&gt;&lt;a href=&quot;#漏洞修复&quot; class=&quot;headerlink&quot; title=&quot;漏洞修复&quot;&gt;&lt;/a&gt;漏洞修复&lt;/h3&gt;&lt;p&gt;苹果已经发布安全补丁，macOS用户可升级到10.12.2，iOS用户可升级到10.2。&lt;/p&gt;
&lt;p&gt;对补丁进行比对，可以发现在漏洞函数OTL::GPOS::ApplyPairPos 中添加了判断【图5】，获取到的GlyphID值传递给OTL::Coverage::SearchFmt2Binary函数，当查找失败时会返回0，因此只要添加判断返回值是否为0，为0则直接跳走返回。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14819500329936/14820615589596.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图5&lt;/center&gt;

&lt;h3 id=&quot;处理流程&quot;&gt;&lt;a href=&quot;#处理流程&quot; class=&quot;headerlink&quot; title=&quot;处理流程&quot;&gt;&lt;/a&gt;处理流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;2016-10-23 通过邮件提交给Apple&lt;/li&gt;
&lt;li&gt;2016-11-09 Apple确认漏洞，并在 macOS Sierra 10.12.2 beta 测试版中修复&lt;/li&gt;
&lt;li&gt;2016-12-09 分配CVE号：CVE-2016-7595&lt;/li&gt;
&lt;li&gt;2016-12-14 Apple发布安全公告，并推送补丁&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;2016年12月的Apple安全公告中（&lt;a href=&quot;https://support.apple.com/zh-cn/HT207423&quot;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="macOS" scheme="http://riusksk.github.io/tags/macOS/"/>
    
      <category term="iOS" scheme="http://riusksk.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://riusksk.github.io/tags/Apple/"/>
    
      <category term="漏洞" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>2016年刷过的CVE</title>
    <link href="http://riusksk.github.io/2016/12/17/2016%E5%B9%B4%E5%88%B7%E8%BF%87%E7%9A%84CVE/"/>
    <id>http://riusksk.github.io/2016/12/17/2016年刷过的CVE/</id>
    <published>2016-12-17T08:32:03.000Z</published>
    <updated>2017-01-01T02:53:00.000Z</updated>
    
    <content type="html">&lt;p&gt;今年也开始尝试跟风刷CVE，主要是下半年才开始搞，开始聚集Google和Apple，Google Android 因为撞洞，最终连个CVE也没有，也是惨，只能寄希望于2017年了。革命尚未成功，同志仍需努力！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;产品&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;CVE号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;libarchive&lt;/td&gt;
&lt;td&gt;2016/12/29&lt;/td&gt;
&lt;td&gt;Use After Free&lt;/td&gt;
&lt;td&gt;CVE-2016-10080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;macOS/iOS&lt;/td&gt;
&lt;td&gt;2016/12/14&lt;/td&gt;
&lt;td&gt;Out-of-Bounds&lt;/td&gt;
&lt;td&gt;CVE-2016-7595&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;macOS/iOS&lt;/td&gt;
&lt;td&gt;2016/12/14&lt;/td&gt;
&lt;td&gt;Out-of-Bounds&lt;/td&gt;
&lt;td&gt;CVE-2016-4691&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;2016/12/14&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-7618&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;2016/12/14&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-7622&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;giflib&lt;/td&gt;
&lt;td&gt;2016/12/13&lt;/td&gt;
&lt;td&gt;Out-of-Bounds&lt;/td&gt;
&lt;td&gt;CVE-2016-9944&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;OpenJPEG&lt;/td&gt;
&lt;td&gt;2016/12/07&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-9890&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;libxml2&lt;/td&gt;
&lt;td&gt;2016/12/05&lt;/td&gt;
&lt;td&gt;Out-of-Bounds&lt;/td&gt;
&lt;td&gt;CVE-2016-9833&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;OpenJPEG&lt;/td&gt;
&lt;td&gt;2016/12/01&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-9753&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;Mac OS X&lt;/td&gt;
&lt;td&gt;2016/09/21&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-4779&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple&lt;/td&gt;
&lt;td&gt;Xcode&lt;/td&gt;
&lt;td&gt;2016/09/14&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-4705&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;libgd&lt;/td&gt;
&lt;td&gt;2016/05/01&lt;/td&gt;
&lt;td&gt;Double Free&lt;/td&gt;
&lt;td&gt;CVE-2016-4413&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;libav&lt;/td&gt;
&lt;td&gt;2016/03/18&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-3184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;libav&lt;/td&gt;
&lt;td&gt;2016/03/11&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-3062&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adobe&lt;/td&gt;
&lt;td&gt;Flash Player&lt;/td&gt;
&lt;td&gt;2016/03/11&lt;/td&gt;
&lt;td&gt;Memory Corruption&lt;/td&gt;
&lt;td&gt;CVE-2016-0992&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今年也开始尝试跟风刷CVE，主要是下半年才开始搞，开始聚集Google和Apple，Google Android 因为撞洞，最终连个CVE也没有，也是惨，只能寄希望于2017年了。革命尚未成功，同志仍需努力！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公司&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>BlackHat USA 2016 议题分析</title>
    <link href="http://riusksk.github.io/2016/09/25/BlackHat-USA-2016-%E8%AE%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://riusksk.github.io/2016/09/25/BlackHat-USA-2016-议题分析/</id>
    <published>2016-09-25T06:42:47.000Z</published>
    <updated>2016-09-25T07:02:29.000Z</updated>
    
    <content type="html">&lt;p&gt;作者：riusksk（泉哥）&lt;br&gt;主页：&lt;a href=&quot;http://riusksk.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me&lt;/a&gt;&lt;br&gt;本文已发表于2016年9月CSDN的《程序员》杂志，转载请注明出处。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14713134215430.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;&lt;/center&gt;

&lt;h2 id=&quot;大会概述&quot;&gt;&lt;a href=&quot;#大会概述&quot; class=&quot;headerlink&quot; title=&quot;大会概述&quot;&gt;&lt;/a&gt;大会概述&lt;/h2&gt;&lt;p&gt;BlackHat USA 是世界上最著名的黑客大会BlackHat的主场，规模远超亚洲、欧洲等分会，今年大约有15000人参会，依然在美国拉斯维加斯举办。&lt;/p&gt;
&lt;p&gt;大会全程共6天，包括 Training 培训、Keynote 议题分享、Arsenal 工具展示以及素有”黑客奥斯卡“之称的 Pwnie Awards 颁奖。&lt;/p&gt;
&lt;p&gt;今年有上百个议题入选，涉及的安全领域也是相当广泛全面，包括移动安全、物联网、软件安全、加密、工控、企业安全、Web安全、逆向工程、恶意软件等等，整体上跟往年的议题类型差不多。&lt;/p&gt;
&lt;p&gt;每年的BlackHat USA都代表着一个安全技术发展的”风向标“，在这可以看到全球顶端安全研究人员的研究成果，以及业界安全发展趋势。不少政府人员，比如FBI经常会出现在会场，以前也有FBI在现场带走一些有犯罪记录的人员，或者禁止涉及过于敏感内容的演讲，但一般是在BlackHat的兄弟会议Defcon上下手，比如曾经某黑客在Defcon演讲完后，在回旅馆的路上被抓了，还有之前MIT学生破解波士顿地铁免费乘坐地铁的演讲也被禁止掉。&lt;/p&gt;
&lt;h2 id=&quot;精彩议题分析&quot;&gt;&lt;a href=&quot;#精彩议题分析&quot; class=&quot;headerlink&quot; title=&quot;精彩议题分析&quot;&gt;&lt;/a&gt;精彩议题分析&lt;/h2&gt;&lt;p&gt;笔者针对BlackHat官网上公布的各个议题pdf筛选了一遍，挑选出一些大家可能感兴趣，或者技术新颖有兴趣的议题作简要介绍和点评。&lt;/p&gt;
&lt;h3 id=&quot;1、《Using-EMET-to-Disable-EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot;&gt;&lt;a href=&quot;#1、《Using-EMET-to-Disable-EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot; class=&quot;headerlink&quot; title=&quot;1、《Using EMET to Disable EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot;&gt;&lt;/a&gt;1、《Using EMET to Disable EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711374846572.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图1：禁用EMET前后LoadLibraryA函数入口代码的对比情况&lt;br&gt;&lt;/center&gt;

&lt;p&gt;该议题来自国外著名安全公司FireEye的分享，是一家专门为企业提供安全防护产品的公司，该公司曾发现许多0Day漏洞以及APT攻击事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft’s Enhanced Mitigation Experience Toolkit (EMET)是一款针对用户程序的内存防护工具，可以提高软件的漏洞利用难度。&lt;br&gt;FireEye安全研究人员介绍了一种新型的禁用EMET技术，同时举例了一些以前针对EMET的攻击方式。他们介绍的新型绕过技术主要是利用ROP技术找到DLLMain函数入口，然后实现以下代码的调用：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOL WINAPI DllMain (GetModuleHandleA(&quot;EMET.dll&quot;) , DLL_PROCESS_DETACH , NULL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;EMET主要通过向保护的用户进程注入emet.dll或者emet64.dll，同时因为&lt;code&gt;GetModuleHandleA&lt;/code&gt; 未被Hook，所以使用以上方法去卸载EMET.dll中的各种API Hook，虽然这不会将EMET从内存中移除，但已经足够禁用它的所有防护功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在著名的黑客赛事Pwn2Own中，微软要求必须绕过EMET和沙盒保护攻下64位IE浏览器才算成功，因此绕过EMET成了攻破IE的必经之路。&lt;/p&gt;
&lt;p&gt;不过，由于EMET并非默认在系统上开启的，需要用户自行安装，因此实际上使用EMET来保护系统软件的用户并不会太多，甚至包括一些安全人员也很少使用它，在诸多实际攻击案例中，大多不用绕过EMET就可以攻下系统。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Exploiting-Curiosity-and-Context》——针对陌生链接点击情况的安全调查报告&quot;&gt;&lt;a href=&quot;#2、《Exploiting-Curiosity-and-Context》——针对陌生链接点击情况的安全调查报告&quot; class=&quot;headerlink&quot; title=&quot;2、《Exploiting Curiosity and Context》——针对陌生链接点击情况的安全调查报告&quot;&gt;&lt;/a&gt;2、《Exploiting Curiosity and Context》——针对陌生链接点击情况的安全调查报告&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711403836865.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图2：在Facebook和邮件上普通民众对陌生链接的点击比率&lt;br&gt;&lt;/center&gt;

&lt;p&gt;该议题来自德国萨尔州大学和埃尔朗根-纽伦堡大学安全研究人员的分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一份安全调查报告，关于点击陌生链接的调查情况，作者通过邮件与Facebook两种途径进行调查分析，专门构造特定的消息内容，或者链接中包含对方id等各种方式来引起点击者的好奇，最后统计出点击占比，以及引导用户点击的各种主要影响因素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多漏洞或者病毒都是通过链接、邮件等方式进行恶意传播，通过邮件利用漏洞进行攻击是当前APT攻击事件中最常用的手段，因此提高安全意识，不要随意打开陌生链接、邮件附件是相当有必要的。当然反之，这份报告对于黑产人士也是有一种借鉴作用，如何构造出能够引起目标用户的兴趣和好奇，增加点击成功率也是一个参考方向。&lt;/p&gt;
&lt;p&gt;从报告中可以看出，一些社交平台如Facebook，这种比邮件交互性更大的网络平台，更容易引起用户的点击，而且一些点名道性的链接内容，或者一些能引起用户兴趣的内容，也更容易诱使用户点击。&lt;/p&gt;
&lt;h3 id=&quot;3、《DOES-DROPPING-USB-DRIVES-REALLY-WORK-》——U盘社工调查报告&quot;&gt;&lt;a href=&quot;#3、《DOES-DROPPING-USB-DRIVES-REALLY-WORK-》——U盘社工调查报告&quot; class=&quot;headerlink&quot; title=&quot;3、《DOES DROPPING USB DRIVES REALLY WORK?》——U盘社工调查报告&quot;&gt;&lt;/a&gt;3、《DOES DROPPING USB DRIVES REALLY WORK?》——U盘社工调查报告&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711422054269.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图3：U盘社工调查的统计结论&lt;br&gt;&lt;/center&gt;

&lt;p&gt;该议题来自Google的Elie Bursztein研究员，主要从事反欺诈工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该议题主要是基于社工技术的一份安全调查，使用类似以前”BadUSB“技术，基于Teensy（俗称”橡皮鸭“）编写模拟输入功能的U盘，能够回连后门的恶意功能，支持Windows、Linux和OSX等多系统平台。&lt;/p&gt;
&lt;p&gt;每个U盘成本大约\$40美元，假装丢在各个不同的地方，共放了297个，成本\$11880美元（￥78792人民币），投入成本也是很大。&lt;/p&gt;
&lt;p&gt;最后的调查结果是：至少48%的人打开U盘执行了恶意程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一份挺有趣的安全调查报告，安全技术要求不高，主要注重于动手实践能力，自己动手制作297个U盘也是需要一定耐心和时间的，同时花近8万块的成本，也是颇舍得投入的。&lt;/p&gt;
&lt;h3 id=&quot;4、《Subverting-Apple-Graphics-Practical-Approaches-To-Remotely-Gaining-Root》——Pwn2Own-2016-OSX项目所用漏洞的利用分析&quot;&gt;&lt;a href=&quot;#4、《Subverting-Apple-Graphics-Practical-Approaches-To-Remotely-Gaining-Root》——Pwn2Own-2016-OSX项目所用漏洞的利用分析&quot; class=&quot;headerlink&quot; title=&quot;4、《Subverting Apple Graphics Practical Approaches To Remotely Gaining Root》——Pwn2Own 2016 OSX项目所用漏洞的利用分析&quot;&gt;&lt;/a&gt;4、《Subverting Apple Graphics Practical Approaches To Remotely Gaining Root》——Pwn2Own 2016 OSX项目所用漏洞的利用分析&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711451665465.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图4：Apple Graphics 架构图&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自腾讯科恩实验室的分享，之前通过挖掘到的OSX漏洞赢得Pwn2Own 2016的OSX项目，并在该议题里面作了详细的技术分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从用户层和内核层的角度分析Apple Graphics图像处理系统的攻击面并结合漏洞实例进行分析。&lt;/p&gt;
&lt;p&gt;用户层攻击面分析中，以Windows Server为例介绍了一些漏洞实例，比如CVE-2014-1314的API _XCreateSession 涉及敏感动作setuid，而没有对用户传递的路径参数进行严格校验，导致setuid可以越权逃逸沙盒，最后苹果以拒绝所有沙盒进程调用_XCreateSession 来修复此漏洞。同时也列举了一些其它API接口存在漏洞，比如_XSetMessageFile、_XSetGlobalForceConfig等等，后面又详细介绍了CVE-2016-1804 UAF漏洞的利用。&lt;/p&gt;
&lt;p&gt;内核层攻击面分析中，主要介绍苹果图表驱动接口IOAccelSurface的漏洞，也就是此前他们在Pwn2Own上用于攻破OSX内核的漏洞，分享了漏洞利用技巧，包括ROP绕过SMEP/SMAP/SIP、利用信息泄露绕过kASLR等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一份颇有干货的议题，此前他们在CanSecWest黑客大会上分享过关于Apple Graphics 内核驱动漏洞挖掘的议题《Don’t Trust Your Eye- Apple Graphics Is Compromised》，而此次的议题主要是分享Pwn2Own上的漏洞分析与利用，侧重点不同，推荐一阅。&lt;/p&gt;
&lt;h3 id=&quot;5、《CANSPY：A-Platform-for-Auditing-CAN-Device》——汽车CAN设备安全审计工具&quot;&gt;&lt;a href=&quot;#5、《CANSPY：A-Platform-for-Auditing-CAN-Device》——汽车CAN设备安全审计工具&quot; class=&quot;headerlink&quot; title=&quot;5、《CANSPY：A Platform for Auditing CAN Device》——汽车CAN设备安全审计工具&quot;&gt;&lt;/a&gt;5、《CANSPY：A Platform for Auditing CAN Device》——汽车CAN设备安全审计工具&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711499419536.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图5：CANSPY硬件&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自Airbus空中客车公司（欧洲一家民航飞机制造公司）的安全研究员作的分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于汽车CAN（Controller Area Network,控制器局域网络）安全的议题，作者发布的CANSPY是一款硬件设备，支持CAN数据伪造攻击、中间人攻击等手段，固件相关代码已在github上开源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这几年的汽车安全议题开始逐渐火起来了，关注CAN/ODB安全的人越来越多，一些工具也逐渐有安全研究人员开源出来，这都是一些不错的学习资料。笔者在些推荐一本关于汽车安全的电子书《Car Hacker’s Manual》，有兴趣的读者可以阅读下。&lt;/p&gt;
&lt;p&gt;这个议题涉及的技术细节较少，这是不足的一点，但关于工具CANSPY可以关注下。&lt;/p&gt;
&lt;h3 id=&quot;6、《Viral-Video-exploiting-SSRF-in-video-converters》——-视频转换工具的SSRF漏洞分析与利用&quot;&gt;&lt;a href=&quot;#6、《Viral-Video-exploiting-SSRF-in-video-converters》——-视频转换工具的SSRF漏洞分析与利用&quot; class=&quot;headerlink&quot; title=&quot;6、《Viral Video : exploiting SSRF in video converters》—— 视频转换工具的SSRF漏洞分析与利用&quot;&gt;&lt;/a&gt;6、《Viral Video : exploiting SSRF in video converters》—— 视频转换工具的SSRF漏洞分析与利用&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711507668619.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图6：ffmpeg SSRF漏洞利用示例&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自俄罗斯 Mail.RU 公司的两名安全研究员分享的议题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结了之前出现的FFmpeg视频转换时出现的SSRF漏洞，可读取服务器上的任意文件，比如&lt;code&gt;/etc/passwd&lt;/code&gt;被用于攻破很多大公司的服务器，在很多漏洞平台上被刷爆了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只是对过去出现的历史漏洞的总结，但这个漏洞也是相当经典，影响甚广，所以这里列出来提下，并没有其它新内容。&lt;/p&gt;
&lt;h3 id=&quot;7、《Advanced-Cross-Site-Search-Attacks》——跨站搜索攻击技术&quot;&gt;&lt;a href=&quot;#7、《Advanced-Cross-Site-Search-Attacks》——跨站搜索攻击技术&quot; class=&quot;headerlink&quot; title=&quot;7、《Advanced Cross-Site Search Attacks》——跨站搜索攻击技术&quot;&gt;&lt;/a&gt;7、《Advanced Cross-Site Search Attacks》——跨站搜索攻击技术&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711525967284.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图7：XS-Search技术示例&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自Cyberpion公司，以色列巴伊兰大学博士的安全研究员分享的议题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cross-Site Search (XS-search) Attack，跨站搜索攻击，通过向目标站点发送搜索请求，从而探测到用户的敏感信息，因为受害者的浏览器通常包含一些涉及隐私信息的服务授权（比如Gmail）。&lt;/p&gt;
&lt;p&gt;虽然攻击者因为”同源策略“无法直接获取到响应数据，但可以测量响应时间，根据响应时间的差异来判断隐私信息的准确性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一种新型的Web攻击方式，基于时间差异和服务搜索功能来获取用户隐私信息，更像是一种边信道攻击。虽然思路很好，但在实战应用过程中，可能就比较受限，而且只有捕获或可搜索信息量够大时，才比较有实际价值的信息获取，同时也基于搜索关键词的健全性，有它的局限性所在。&lt;/p&gt;
&lt;h3 id=&quot;8、《Web-Application-Firewalls-Attacking-detection-logic-mechanisms》——基于正则缺陷绕过WAF&quot;&gt;&lt;a href=&quot;#8、《Web-Application-Firewalls-Attacking-detection-logic-mechanisms》——基于正则缺陷绕过WAF&quot; class=&quot;headerlink&quot; title=&quot;8、《Web Application Firewalls: Attacking detection logic mechanisms》——基于正则缺陷绕过WAF&quot;&gt;&lt;/a&gt;8、《Web Application Firewalls: Attacking detection logic mechanisms》——基于正则缺陷绕过WAF&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711547098778.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图8：绕过Edge浏览器的XSS过滤器&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自Positive安全公司的技术分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对主流的开源WAF（比如OWASP CRS、ModSecurity、Comodo WAF、PHPIDS、QuickDefense、Libinjection)中的正则表达式进行逻辑测试，主要偏重于正则上的缺陷进行WAF绕过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WAF不是万能的，被绕过也是正常的，市面上的各处WAF也都基本被绕过，但通过它可以大大地提高攻击成本，还是可以阻断一部分黑客的。&lt;/p&gt;
&lt;p&gt;该议题偏重于WAF正则问题，更系统化的WAF绕过技术总结，推荐PHDays黑客大会上的《Web Application Firewall Bypassing》议题。&lt;/p&gt;
&lt;h3 id=&quot;9、《Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities》——JMS反序列化漏洞分析与利用&quot;&gt;&lt;a href=&quot;#9、《Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities》——JMS反序列化漏洞分析与利用&quot; class=&quot;headerlink&quot; title=&quot;9、《Pwning Your Java Messaging With Deserialization Vulnerabilities》——JMS反序列化漏洞分析与利用&quot;&gt;&lt;/a&gt;9、《Pwning Your Java Messaging With Deserialization Vulnerabilities》——JMS反序列化漏洞分析与利用&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711579996412.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图9：挖掘到的Java反序列化漏洞修复情况&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自Code White安全公司的分享议题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于Java反序列化漏洞的相关技术分享，介绍Java Message Service（JMS）存在的攻击面，利用ObjectMessage消息类型中包含的序列化对象，经getObject函数处理时，如不正当使用，可能会反序列化用户传递的任意对象，就可能造成反序列化漏洞。然后作者通过分析很多主流的Java应用服务发现了不少漏洞。最后，作者分享一款Java消息反序列化漏洞的利用工具JMET（Java Message Exploitation Tool），并且已在GitHub上开源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在BlackHat上关于Web的议题已经越来越少，有干货的Web安全议题更是少之又少，该议题还是不错的Web议题，而且有实际的漏洞产出，思路值得借鉴和延伸。&lt;/p&gt;
&lt;h3 id=&quot;10、《The-Art-of-Defense：How-vulnerabilities-help-shape-security-features-and-mitigations-in-Android》——Google通过Android漏洞制定的通用防御策略介绍&quot;&gt;&lt;a href=&quot;#10、《The-Art-of-Defense：How-vulnerabilities-help-shape-security-features-and-mitigations-in-Android》——Google通过Android漏洞制定的通用防御策略介绍&quot; class=&quot;headerlink&quot; title=&quot;10、《The Art of Defense：How vulnerabilities help shape security features and mitigations in Android》——Google通过Android漏洞制定的通用防御策略介绍&quot;&gt;&lt;/a&gt;10、《The Art of Defense：How vulnerabilities help shape security features and mitigations in Android》——Google通过Android漏洞制定的通用防御策略介绍&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711593522037.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图10：Android主要的安全防御机制&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自 Google Android 平台安全团队的负责人 Nick Kralevich 针对 Android 的防御机制所做的技术分享&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列举了当前Android平台主要的安全机制，并以多个经典的Android漏洞（PingPong、Stagefright等等）为例，分析其中的一些攻防思路，如何根据报告的漏洞举一反三，以解决同一类问题是防御的关键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;企业内部在做业务安全时，单纯修复外部报告的漏洞本身，是远远不够的。Google做了很好的示范，应该举一反三，思考如何去解决各个业务中同类问题。这种思路无论在软件系统，还是Web上，都是通用的。外部报告一个漏洞，如何提高自身安全系统的检测能力去批量发现同类漏洞？如何提高自身系统的防御能力去增加攻击成本？&lt;/p&gt;
&lt;h3 id=&quot;11、《-hell-on-Earth-From-Browser-to-System-Compromise》——Pwn2Own-2016-各项目漏洞原理与利用&quot;&gt;&lt;a href=&quot;#11、《-hell-on-Earth-From-Browser-to-System-Compromise》——Pwn2Own-2016-各项目漏洞原理与利用&quot; class=&quot;headerlink&quot; title=&quot;11、《$hell on Earth: From Browser to System Compromise》——Pwn2Own 2016 各项目漏洞原理与利用&quot;&gt;&lt;/a&gt;11、《$hell on Earth: From Browser to System Compromise》——Pwn2Own 2016 各项目漏洞原理与利用&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711621506431.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图11：腾讯科恩实验室的OSX项目（从safari到内核提权）的演示demo&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自趋势科技 Zero Day Initiative 的安全研究员针对Pwn2Own 2016 黑客大赛上各种被攻破的项目做的技术分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对Pwn2Own 2016黑客大赛上的每个攻破项目所涉及的漏洞原理、利用技巧进行简要地分析，并提供demo演示。&lt;/p&gt;
&lt;p&gt;漏洞包括腾讯科恩发现的Safari漏洞到内核提权漏洞、Flash到系统提权漏洞、Edge到系统提权的漏洞，韩国神童Lokihardt发现的Safari漏洞到内核提权漏洞、Edge到系统提权漏洞，360发现的Chrome到内核提权的漏洞、Flash到系统提权漏洞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标题已经足够牛逼，但每个漏洞也就简短的几页精要地介绍下，其实涉及的内容还是蛮多的，要是扩展出来细说，可以说的技术内容就太多了。&lt;/p&gt;
&lt;p&gt;其实每个攻破的项目都可以作为一个BlackHat议题拿来讲的，现在被ZDI的人一次性讲完，各个团队可能也不太方便再拿出来讲了。&lt;/p&gt;
&lt;h3 id=&quot;12、《The-Art-of-Reverse-Engineering-Flash-Exploits》——Flash-Exploit样本的逆向分析方法&quot;&gt;&lt;a href=&quot;#12、《The-Art-of-Reverse-Engineering-Flash-Exploits》——Flash-Exploit样本的逆向分析方法&quot; class=&quot;headerlink&quot; title=&quot;12、《The Art of Reverse Engineering Flash Exploits》——Flash Exploit样本的逆向分析方法&quot;&gt;&lt;/a&gt;12、《The Art of Reverse Engineering Flash Exploits》——Flash Exploit样本的逆向分析方法&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711637873500.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图12：议题中分析的flash样本列表&lt;br&gt;&lt;/center&gt;&lt;br&gt;来自微软安全研究人员Jeong Wook Oh的技术分享。&lt;br&gt;&lt;br&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;br&gt;&lt;br&gt;介绍了多个不错的Flash分析工具，并挑选几个经典的Flash漏洞案例以及利用技术（比如Vector长度和ByteArray长度篡改、JIT攻击、绕过CFG的技术）进行分析。&lt;br&gt;&lt;br&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;br&gt;&lt;br&gt;一个不错的议题，对过去近一年的经典Flash漏洞利用样本进行逆向分析，介绍了当前流行的主流Flash漏洞利用技术，上面的截图已经详细地列出各个漏洞所使用的利用技术，是对过去Flash漏洞利用技术很好的总结，推荐阅读。&lt;br&gt;&lt;br&gt;### 13、《The Year In Flash》—— Google Project Zero对过去一年多的Flash漏洞成因和发展趋势的分析&lt;br&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711649291416.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图13：近一年多的Flash漏洞时间轴&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自 Google Project Zero 的一位女安全研究员Natalie Silvanovich所做的分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要也是对过去一年多的Flash漏洞以及Adobe针对Flash增加的内存安全保护机制进行分析，相对上一个Flash议题的不同，它更多地分析漏洞成因，以及一些安全事件，并对未来Flash漏洞的发展进行预测。&lt;/p&gt;
&lt;p&gt;每个阶段经常出现同一类型的Flash漏洞，比如Flash解析其它多媒体文件（比如MP4）、或者图片文件，也对每个Flash漏洞挖掘方式进行推测，绝大部分是Fuzzing出来的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对过去一年多Flash漏洞进行总结，其中可以看到一些Flash漏洞挖掘的趋势，单纯Fuzzing SWF文件基本已经很难发现漏洞，复合文件的Fuzzing是趋势，比如SWF+MP4、SWF+JPG等等，还有AS3漏洞等。&lt;/p&gt;
&lt;p&gt;上述趋势以及最后作者的总结，都可以作为漏洞挖掘者尝试的Fuzzing方向，不过现在各大浏览器已经开始禁用Flash，相信未来会逐步被Html5所代替，但饿死的骆驼比马大，其短期内还是会继续受漏洞影响的。&lt;/p&gt;
&lt;h3 id=&quot;14、《Pangu-9-Internals》——盘古越狱团队针对iOS9越狱技术原理的剖析&quot;&gt;&lt;a href=&quot;#14、《Pangu-9-Internals》——盘古越狱团队针对iOS9越狱技术原理的剖析&quot; class=&quot;headerlink&quot; title=&quot;14、《Pangu 9 Internals》——盘古越狱团队针对iOS9越狱技术原理的剖析&quot;&gt;&lt;/a&gt;14、《Pangu 9 Internals》——盘古越狱团队针对iOS9越狱技术原理的剖析&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711670070390.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图14：iOS内核攻击面&lt;br&gt;&lt;/center&gt;

&lt;p&gt;来自盘古越狱团队针对iOS 9越狱技术的分享议题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;讲解通过XPC调用服务com.apple.PersistentURLTranslator.Gatekeeper实现跨目录读写任意文件，最后再从任意文件读写转换成代码执行，然后再介绍在iOS9越狱中使用到的内核漏洞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者对iOS越狱技术研究相对较少，技术内容就不点评了，但只需要知道一点，会写iOS越狱程序的都很牛逼。&lt;/p&gt;
&lt;h2 id=&quot;安全发展趋势&quot;&gt;&lt;a href=&quot;#安全发展趋势&quot; class=&quot;headerlink&quot; title=&quot;安全发展趋势&quot;&gt;&lt;/a&gt;安全发展趋势&lt;/h2&gt;&lt;p&gt;从所有BlackHat议题中可以发现当前业界的安全关注点，以及未来安全发展趋势的风向。笔者对所有议题内容过了一遍，对于安全发展趋势，总结出以下3点供大家参考：&lt;/p&gt;
&lt;h3 id=&quot;1、机器学习在安全领域的运用会逐渐增加&quot;&gt;&lt;a href=&quot;#1、机器学习在安全领域的运用会逐渐增加&quot; class=&quot;headerlink&quot; title=&quot;1、机器学习在安全领域的运用会逐渐增加&quot;&gt;&lt;/a&gt;1、机器学习在安全领域的运用会逐渐增加&lt;/h3&gt;&lt;p&gt;目前在一些漏洞检测、入侵检测系统，恶意软件分类和僵尸网络流量识别领域已经使用到机器学习。Defcon CTF大赛现场也有一支机器人队伍，全自动化挖洞补洞，并战胜两个人类队伍（能进入Defcon决赛也不会太差），从这些都可以看到机器学习在未来运用到安全领域将来越来越多。&lt;/p&gt;
&lt;h3 id=&quot;2、Flash漏洞的利用难度再不断上升，但仍可能被攻破，同时未来Flash可能退出历史舞台&quot;&gt;&lt;a href=&quot;#2、Flash漏洞的利用难度再不断上升，但仍可能被攻破，同时未来Flash可能退出历史舞台&quot; class=&quot;headerlink&quot; title=&quot;2、Flash漏洞的利用难度再不断上升，但仍可能被攻破，同时未来Flash可能退出历史舞台&quot;&gt;&lt;/a&gt;2、Flash漏洞的利用难度再不断上升，但仍可能被攻破，同时未来Flash可能退出历史舞台&lt;/h3&gt;&lt;p&gt;目前一些主流浏览器，比如Chrome、Firefox已经开始禁用Flash，开始用Html5代替。再加上Adobe针对Flash增加的一些安全防御机制，大大增加了漏洞攻击成本，提高了漏洞利用难度，但还是有可能被攻破的。&lt;/p&gt;
&lt;h3 id=&quot;3、物联网安全与云安全依然倍受关注&quot;&gt;&lt;a href=&quot;#3、物联网安全与云安全依然倍受关注&quot; class=&quot;headerlink&quot; title=&quot;3、物联网安全与云安全依然倍受关注&quot;&gt;&lt;/a&gt;3、物联网安全与云安全依然倍受关注&lt;/h3&gt;&lt;p&gt;最近两年各大安全大会上，一般都会有关于物联网安全与云虚拟化安全的相关议题，本次BlackHat也不例外。各种智能设备目前仍处于起步阶段，很多还不够成熟，但随着未来发展，在普通民众普及开来后，安全的影响面就更大了。云安全更多是一些互联网厂商当前需要解决的，攻防之战已经展开了，在云上被经常使用的虚拟化软件VM、QEMU、XEN的漏洞也会被经常曝光，主要用于逃逸虚拟机。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作者：riusksk（泉哥）&lt;br&gt;主页：&lt;a href=&quot;http://riusksk.me&quot;&gt;http://riusksk.me&lt;/a&gt;&lt;br&gt;本文已发表于2016年9月CSDN的《程序员》杂志，转载请注明出处。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14713134215430.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;&lt;/center&gt;

&lt;h2 id=&quot;大会概述&quot;&gt;&lt;a href=&quot;#大会概述&quot; class=&quot;headerlink&quot; title=&quot;大会概述&quot;&gt;&lt;/a&gt;大会概述&lt;/h2&gt;&lt;p&gt;BlackHat USA 是世界上最著名的黑客大会BlackHat的主场，规模远超亚洲、欧洲等分会，今年大约有15000人参会，依然在美国拉斯维加斯举办。&lt;/p&gt;
&lt;p&gt;大会全程共6天，包括 Training 培训、Keynote 议题分享、Arsenal 工具展示以及素有”黑客奥斯卡“之称的 Pwnie Awards 颁奖。&lt;/p&gt;
&lt;p&gt;今年有上百个议题入选，涉及的安全领域也是相当广泛全面，包括移动安全、物联网、软件安全、加密、工控、企业安全、Web安全、逆向工程、恶意软件等等，整体上跟往年的议题类型差不多。&lt;/p&gt;
&lt;p&gt;每年的BlackHat USA都代表着一个安全技术发展的”风向标“，在这可以看到全球顶端安全研究人员的研究成果，以及业界安全发展趋势。不少政府人员，比如FBI经常会出现在会场，以前也有FBI在现场带走一些有犯罪记录的人员，或者禁止涉及过于敏感内容的演讲，但一般是在BlackHat的兄弟会议Defcon上下手，比如曾经某黑客在Defcon演讲完后，在回旅馆的路上被抓了，还有之前MIT学生破解波士顿地铁免费乘坐地铁的演讲也被禁止掉。&lt;/p&gt;
&lt;h2 id=&quot;精彩议题分析&quot;&gt;&lt;a href=&quot;#精彩议题分析&quot; class=&quot;headerlink&quot; title=&quot;精彩议题分析&quot;&gt;&lt;/a&gt;精彩议题分析&lt;/h2&gt;&lt;p&gt;笔者针对BlackHat官网上公布的各个议题pdf筛选了一遍，挑选出一些大家可能感兴趣，或者技术新颖有兴趣的议题作简要介绍和点评。&lt;/p&gt;
&lt;h3 id=&quot;1、《Using-EMET-to-Disable-EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot;&gt;&lt;a href=&quot;#1、《Using-EMET-to-Disable-EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot; class=&quot;headerlink&quot; title=&quot;1、《Using EMET to Disable EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&quot;&gt;&lt;/a&gt;1、《Using EMET to Disable EMET》——绕过微软EMET防护工具实现软件漏洞利用的方法&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/14710526596463/14711374846572.jpg&quot; alt=&quot;&quot;&gt;￼&lt;br&gt;图1：禁用EMET前后LoadLibraryA函数入口代码的对比情况&lt;br&gt;&lt;/center&gt;

&lt;p&gt;该议题来自国外著名安全公司FireEye的分享，是一家专门为企业提供安全防护产品的公司，该公司曾发现许多0Day漏洞以及APT攻击事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【内容简介】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft’s Enhanced Mitigation Experience Toolkit (EMET)是一款针对用户程序的内存防护工具，可以提高软件的漏洞利用难度。&lt;br&gt;FireEye安全研究人员介绍了一种新型的禁用EMET技术，同时举例了一些以前针对EMET的攻击方式。他们介绍的新型绕过技术主要是利用ROP技术找到DLLMain函数入口，然后实现以下代码的调用：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOL WINAPI DllMain (GetModuleHandleA(&quot;EMET.dll&quot;) , DLL_PROCESS_DETACH , NULL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;EMET主要通过向保护的用户进程注入emet.dll或者emet64.dll，同时因为&lt;code&gt;GetModuleHandleA&lt;/code&gt; 未被Hook，所以使用以上方法去卸载EMET.dll中的各种API Hook，虽然这不会将EMET从内存中移除，但已经足够禁用它的所有防护功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【点评】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在著名的黑客赛事Pwn2Own中，微软要求必须绕过EMET和沙盒保护攻下64位IE浏览器才算成功，因此绕过EMET成了攻破IE的必经之路。&lt;/p&gt;
&lt;p&gt;不过，由于EMET并非默认在系统上开启的，需要用户自行安装，因此实际上使用EMET来保护系统软件的用户并不会太多，甚至包括一些安全人员也很少使用它，在诸多实际攻击案例中，大多不用绕过EMET就可以攻下系统。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>fsmon:多平台文件监控工具</title>
    <link href="http://riusksk.github.io/2016/09/16/fsmon-%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    <id>http://riusksk.github.io/2016/09/16/fsmon-多平台文件监控工具/</id>
    <published>2016-09-16T05:54:53.000Z</published>
    <updated>2016-09-16T06:03:40.000Z</updated>
    
    <content type="html">&lt;p&gt;近日在Mac上跑测试，时间一长就硬盘空间就被占用完了，几小时就生成10多G文件，导致系统卡死，程序也没法继续运行，但一直没找到生成的文件路径。&lt;br&gt;于是在Github上找到fsmon (&lt;a href=&quot;https://github.com/nowsecure/fsmon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nowsecure/fsmon&lt;/a&gt; )这个工具，一款多平台下文件监控工具，最后终于找到生成垃圾文件的路径：&lt;code&gt;/private/var/folders/&lt;/code&gt;，原来是&lt;code&gt;QuickLook&lt;/code&gt;缓存文件，后面写个定时脚本清除即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/fsmon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近日在Mac上跑测试，时间一长就硬盘空间就被占用完了，几小时就生成10多G文件，导致系统卡死，程序也没法继续运行，但一直没找到生成的文件路径。&lt;br&gt;于是在Github上找到fsmon (&lt;a href=&quot;https://github.com/nowsecure/fsmon
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Vulnerability War: The Essence of Software Vulnerabilities Analysis</title>
    <link href="http://riusksk.github.io/2016/09/13/Vulnerability-War-The-Essence-of-Software-Vulnerabilities-Analysis/"/>
    <id>http://riusksk.github.io/2016/09/13/Vulnerability-War-The-Essence-of-Software-Vulnerabilities-Analysis/</id>
    <published>2016-09-13T07:18:21.000Z</published>
    <updated>2016-09-13T09:43:27.000Z</updated>
    
    <content type="html">&lt;p&gt;By riusksk(@riusksk)&lt;/p&gt;
&lt;p&gt;想出英文版的，但苦于目前出版社找不到译者，所以把内容简介和目录的英文版发出来给老外看，国内朋友如有有合适且有意愿的也欢迎留言！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/vul_war_eng.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Content-Abstract&quot;&gt;&lt;a href=&quot;#Content-Abstract&quot; class=&quot;headerlink&quot; title=&quot;Content Abstract&quot;&gt;&lt;/a&gt;Content Abstract&lt;/h2&gt;&lt;p&gt;Vulnerability War: The Essence of Software Vulnerabilities Analysis systematically explain all kinds of tools, techniques and practical methods in software vulnerability analysis and exploit, mainly related to Windows and Android platform. The book is classfied according to the different vulnerabilities, such as stack overflow, sandbox escape, types confusion, UAF , kernel vulnerability etc., at the same time, in view of the current popular mobile security, add Android platform vulnerability analysis and exploit into it. The author carefully chosen classic Vulnerabilities to share analysis techniques and tools about the cause of these vulnerabilities analysis, exploit and fix methods in detail. The biggest characteristic of this book is the actual combat based on the various types of classical vulnerabilities and discard useless theory, it’s almost “a book written out by debugger”.&lt;/p&gt;
&lt;p&gt;This book is suitable for students of computer science related, somebody worked in information security, software security and mobile security related areas, software developer and hackers to read.&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h3 id=&quot;Chapter-1-Basic-Knowledge&quot;&gt;&lt;a href=&quot;#Chapter-1-Basic-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1: Basic Knowledge&quot;&gt;&lt;/a&gt;Chapter 1: Basic Knowledge&lt;/h3&gt;&lt;p&gt;1.1 The Concepts of Vulnerability&lt;br&gt;1.1.1 What is The Vulnerability&lt;br&gt;1.1.2 The Value of Vulnerabilities&lt;br&gt;1.1.3 0day Vulnerability&lt;br&gt;1.1.4 PoC and Exploit&lt;br&gt;1.2 Why to analysis vunerabilities&lt;br&gt;1.3 The commonly analysis tools&lt;br&gt;1.3.1 IDA: the disassembly tool&lt;br&gt;1.3.2 OllyDbg: the crack and reverse analysis tool&lt;br&gt;1.3.3 Immunity Debugger: vulnerability analysis debugger&lt;br&gt;1.3.4 Windbg: Microsoft Windows Debugger&lt;br&gt;1.3.5 GDB: Linux Debugger&lt;br&gt;1.3.6 JEB: Android Decompilater&lt;br&gt;1.3.7 Other&lt;br&gt;1.4 The common vulnerability analysis method&lt;br&gt;1.4.1 Static analysis&lt;br&gt;1.4.2 Dynamic debugging&lt;br&gt;1.4.3 Source code analysis&lt;br&gt;1.4.4 Patch compare&lt;br&gt;1.4.5 Taint track&lt;br&gt;1.5 Learning resources&lt;br&gt;1.5.1 Some security sites&lt;br&gt;1.5.2 Recommended books&lt;br&gt;1.6 Summary&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Chapter-2-Stack-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-2-Stack-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2: Stack Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 2: Stack Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;2.1 A brief history of stack overflow&lt;br&gt;2.2 The principle of stack overflow&lt;br&gt;2.3 CVE-2010-2883 Adobe Reader TTF Font SING Table Stack Overflow&lt;br&gt;2.3.1 LuckyCat APT Attacks&lt;br&gt;2.3.2 Vulnerability Description&lt;br&gt;2.3.3 Analysis environment&lt;br&gt;2.3.4 The Vulnerability Analysis Method Based On String Search&lt;br&gt;2.3.5 Exploit Technical Analysis of Sample&lt;br&gt;2.3.6 Shellcode Malicious Behavior Analysis of Sample&lt;br&gt;2.3.7 Vulnerability Fixes&lt;br&gt;2.4 CVE-2010-3333 Microsoft RTF File Stack Overflow&lt;br&gt;2.4.1 Linsanity Attack Event&lt;br&gt;2.4.2 Vulnerability Description&lt;br&gt;2.4.3 Analysis Environment&lt;br&gt;2.4.4 RTF File Format&lt;br&gt;2.4.5 The Vulnerability Analysis Method Based On Stack Backtrace&lt;br&gt;2.4.6 Vulnerability Exploit&lt;br&gt;2.4.7 Office 2003 and Office 2007 Commonality Exploit Technical Research&lt;br&gt;2.4.8 Vulnerability Fixes&lt;br&gt;2.5 CVE-2011-0104 Microsoft Excel TOOLBARDEF Record Stack Overflow&lt;br&gt;2.5.1 Vulnerability Description&lt;br&gt;2.5.2 Analysis Environment&lt;br&gt;2.5.3 The Vulnerability Analysis Method Based On Taint Track&lt;br&gt;2.5.4 Vulnerability Fixes&lt;br&gt;2.6 AliWangWang ActiveX Control imageMan.dll Stack Overflow&lt;br&gt;2.6.1 Vulnerability Description&lt;br&gt;2.6.2 Analysis Environment&lt;br&gt;2.6.3 ActiveX Control Vulnerability Analysis Method&lt;br&gt;2.6.4 Vulnerability Exploit&lt;br&gt;2.7 CVE-2012-0158 Microsoft Office MSCOMCTL.ocx Stack Overflow&lt;br&gt;2.7.1 Lotus Blossom Operation&lt;br&gt;2.7.2 Vulnerability Description&lt;br&gt;2.7.3 Analysis Environment&lt;br&gt;2.7.4 Office Vulnerability Analysis With OffVis&lt;br&gt;2.7.4 Vulnerability Fixes&lt;br&gt;2.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-3-Heap-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-3-Heap-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3: Heap Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 3: Heap Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;3.1 A Brief History of Heap Overflow&lt;br&gt;3.2 The Principle of Heap Overflow&lt;br&gt;3.3 Heap Debugging Skills&lt;br&gt;3.3.1 Heap Tail Check&lt;br&gt;3.3.2 Page Heap&lt;br&gt;3.4 CVE-2010-2553 Microsoft Cinepak Codec CVDecompress Heap Overflow&lt;br&gt;3.4.1 Vulnerability Description&lt;br&gt;3.4.2 Analysis Environment&lt;br&gt;3.4.3 Heap Vulnerability Analysis Method Based On HeapPage&lt;br&gt;3.4.4 Vulnerability Fixes&lt;br&gt;3.5 CVE-2012-0003 Microsoft Windows Media Player winmmdll MIDI File Heap Overflow&lt;br&gt;3.5.1 About Zhi-Zhu Exploit Pack&lt;br&gt;3.5.2 Vulnerability Description&lt;br&gt;3.5.3 Analysis Environment&lt;br&gt;3.5.4 MIDI File Format&lt;br&gt;3.5.5 Vulnerability Analysis Method Based On Mapping Calculated&lt;br&gt;3.5.6 Vulnerability Exploit&lt;br&gt;3.5.7 Patch Different&lt;br&gt;3.6 CVE-2013-0077 Microsoft DirectShow quartz.dll M2P File Heap Overflow&lt;br&gt;3.6.1 Vulnerability Description&lt;br&gt;3.6.2 Vulnerability Analysis With HTC&lt;br&gt;3.6.3 Vulnerability Fixes&lt;br&gt;3.7 CVE-2012-1876 Internet Exporter MSHTMLdll CalculateMinMax Heap Overflow&lt;br&gt;3.7.1 The Vulnerability Used to Break IE9 Browser in Pwn2Own Hacking Contest&lt;br&gt;3.7.2 Analysis Environment&lt;br&gt;3.7.3 Vulnerability Analysis With HPA&lt;br&gt;3.7.4 Vulnerability Exploit Based On Infomation Leakage&lt;br&gt;3.7.5 Vulnerability Fixes&lt;br&gt;3.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-4-Integer-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-4-Integer-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 4: Integer Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 4: Integer Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;4.1 A Brief History of Integer Overflow&lt;br&gt;4.2 The Principle of Integer Overflow&lt;br&gt;4.2.1 Integer Overflow In Stack&lt;br&gt;4.2.2 Integer Overflow In Heap&lt;br&gt;4.3 CVE-2011-0027 Microsoft Data Access Components Integer Overflow&lt;br&gt;4.3.1 The Vulnerability Used to Break IE8 Browser in Pwn2Own Hacking Contest&lt;br&gt;4.3.2 Vulnerability Analysis Method Based On Heap Allocation Record&lt;br&gt;4.3.3 Patch Different&lt;br&gt;4.4 CVE-2012-0774 Adobe Reader TrueType Font Integer Overflow&lt;br&gt;4.4.1 Vulnerability Description&lt;br&gt;4.4.2 PDF File Format and Commonly Analysis Tools&lt;br&gt;4.4.3 Vulnerability Analysis Method Based On Condition Records Breakpoint&lt;br&gt;4.4.4 Patch Analysis&lt;br&gt;4.5 CVE-2013-0750 Firefox String Replace Integer Overflow&lt;br&gt;4.5.1 Vulnerability Description&lt;br&gt;4.5.2 Vulnerability Analysis Method Based On Source Code Debugging&lt;br&gt;4.5.3 Source Code Diff&lt;br&gt;4.6 CVE-2013-2551 Internet Explorer VML COALineDashStyleArray Integer Overflow&lt;br&gt;4.6.1 The Vulnerability Used to Break IE10 Browser in Pwn2Own Hacking Contest&lt;br&gt;4.6.2 Vulnerability Analysis Method Based On Class Function Search&lt;br&gt;4.6.3 Used Info Leak to Exploit&lt;br&gt;4.7 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-5-Format-String-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-5-Format-String-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 5: Format String Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 5: Format String Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;5.1 A Brief History of Format String Vulnerability&lt;br&gt;5.2 The Principle of Format String Vulnerability&lt;br&gt;5.3 CVE-2012-0809 Sudo sudo_debug Format String Vulnerability&lt;br&gt;5.3.1 Vulnerability Description&lt;br&gt;5.3.2 Analysis Vulnerability By Source Code Diff&lt;br&gt;5.4 CVE-2012-3569 VMware OVF Tool Format String Vulnerability&lt;br&gt;5.4.1 Vulnerability Description&lt;br&gt;5.4.2 Vulnerability Analysis Method Based On Output Message&lt;br&gt;5.4.3 Vulnerability Exploit&lt;br&gt;5.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-6-Double-Free-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-6-Double-Free-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6: Double Free Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 6: Double Free Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;6.1 A Brief History of Double Free Vulnerability&lt;br&gt;6.2 The Principle of Double Free Vulnerability&lt;br&gt;6.3 CVE-2010-3974 Windows Fax Cover Editor fxscover.exe Double Free&lt;br&gt;6.3.1 Vulnerability Description&lt;br&gt;6.3.2 Used Stack Backtrack and Heap State to Detect Vulnerability Type&lt;br&gt;6.3.3 Used Patch Diff to Analysis Vulnerability Causes and Fix Method&lt;br&gt;6.4 CVE-2014-0502 Adobe Flash Player Double Free&lt;br&gt;6.4.1 GreedyWonk Operation&lt;br&gt;6.4.2 Static Analysis Attack Sample&lt;br&gt;6.4.3 Automation Simulation Shellcode Execution&lt;br&gt;6.4.4 Trace Back Analysis Based on ROP Instruction Address&lt;br&gt;6.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-7-Use-After-Free-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-7-Use-After-Free-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 7: Use After Free Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 7: Use After Free Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;7.1 A Brief History of Use After Free(UAF)&lt;br&gt;7.2 The Principle of UAF&lt;br&gt;7.3 CVE-2011-0065 Firefox mChannel UAF Vulnerability&lt;br&gt;7.3.1 Vulnerability Description&lt;br&gt;7.3.2 Through Dynamic debugging to Rapid Positioning Source Code Which Lead to Bug&lt;br&gt;7.3.3 Vulnerability Exploit&lt;br&gt;7.3.4 Source Code Compare&lt;br&gt;7.4 CVE-2013-1347 Microsoft IE CGenericElement Use After Free&lt;br&gt;7.4.1 Watering Hole Attack Event&lt;br&gt;7.4.2 Rapid Positioning Vulnerability Object With HPA&lt;br&gt;7.4.3 Reverse Analysis IE JavaScript Engine&lt;br&gt;7.4.4 Analysis The Cause of Vulnerability&lt;br&gt;7.4.5 Vulnerability Exploit&lt;br&gt;7.5 CVE-2013-3346 Adobe Reader ToolButton UAF Vulnerability&lt;br&gt;7.5.1 “Epic Turla” Cyber Espionage Attacks&lt;br&gt;7.5.2 Analysis Malicious PDF Sample With peepdf&lt;br&gt;7.5.3 Vulnerability Exploit&lt;br&gt;7.6 CVE-2015-0313 Adobe Flash Player Workers ByteArray UAF Vulnerability&lt;br&gt;7.6.1 Vulnerability Description&lt;br&gt;7.6.2 Analysis ActiveScript VM Source Code to Help Vulnerability Debugging&lt;br&gt;7.6.3 Flash JIT Debugging Plugin and Symbol File&lt;br&gt;7.6.4 Vulnerability Exploit&lt;br&gt;7.6.5 Vulnerability Fixes&lt;br&gt;7.7 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-8-Array-Out-of-Bound-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-8-Array-Out-of-Bound-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 8: Array Out-of-Bound Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 8: Array Out-of-Bound Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;8.1 The Relationship Between Array Out-of-Bound and Overflow&lt;br&gt;8.2 The Principle of Array Out-of-Bound Vulnerability&lt;br&gt;8.3 CVE-2011-2110 Adobe Flash Player Array Out-of-Bound Access Vulnerability&lt;br&gt;8.3.1 Vulnerability Description&lt;br&gt;8.3.2 Solve The Problem of Restriction to Install The Old Version Flash Player&lt;br&gt;8.3.3 Use Perl Script to Analysis Sample&lt;br&gt;8.3.4 Setup The Server to Reproduce Bug&lt;br&gt;8.3.5 Modify Sample Code to Analysis Vulnerability&lt;br&gt;8.3.6 Constructing Info Leak to Exploit&lt;br&gt;8.3.7 Search Instruction Sequence to Analysis Patch&lt;br&gt;8.4 CVE-2014-0160 OpenSSL TLS Array Out-of-Bound Vulnerability(“Heart Bleeding”)&lt;br&gt;8.4.1 Vulnerability Description&lt;br&gt;8.4.2 Vulnerability Analysis Method Based On Source Code Contrast and Tracking&lt;br&gt;8.4.3 Exploit Vulnerability to Steal Site Account&lt;br&gt;8.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-9-Kernel-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-9-Kernel-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 9: Kernel Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 9: Kernel Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;9.1 Talk About Windows Kernel Vulnerability&lt;br&gt;9.2 Build Windows Kernel Debugging Environment&lt;br&gt;9.3 Common Kernel Vulnerability Principle And Exploit&lt;br&gt;9.3.1 Vulnerability Cause Analysis&lt;br&gt;9.3.2 vulnerability Exploit&lt;br&gt;9.4 360 Security Guards bregdrv.sys Local Privilege Escalation Analysis&lt;br&gt;9.4.1 Vulnerability Description&lt;br&gt;9.4.2 Tracking Analysis With Export Function and IO Control Code&lt;br&gt;9.5 CVE-2011-2005 Windows Afd.sys Local Privilege Escalation&lt;br&gt;9.5.1 Vulnerability Description&lt;br&gt;9.5.2 From Exploit Code to Vulnerability Function Positioning Analysis&lt;br&gt;9.5.3 Patch Different&lt;br&gt;9.6 CVE-2013-3660 Windows win32ksys EPATHOB Pointer Uninitialized Vulnerability&lt;br&gt;9.6.1 Vulnerability Description&lt;br&gt;9.6.2 Auxiliary Analysis With IDA Defined Structure&lt;br&gt;9.6.3 Vulnerability Exploit&lt;br&gt;9.7 CVE-2014-1767 Windows AFD.sys Double Free Vulnerability(Pwn2Own 2014)&lt;br&gt;9.7.1 The Best Privilege Escalation Bug in Pwnie Awards 2014&lt;br&gt;9.7.2 Vulnerability Analysis Method Based on IOCTL Handler Automatically Track Record&lt;br&gt;9.7.3 Vulnerability Exploit&lt;br&gt;9.7.4 Patch Analysis&lt;br&gt;9.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-10-Android-Platform-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-10-Android-Platform-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 10: Android Platform Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 10: Android Platform Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;10.1 A Brief History of Android Platform Vulnerability&lt;br&gt;10.2 Android Platform Vulnerability Type&lt;br&gt;10.3 The Common Vulnerability Analysis Methods&lt;br&gt;10.3.1 APK Static Analysis&lt;br&gt;10.3.2 Smali Dynamic Debugging&lt;br&gt;10.3.3 so Library Dynamic Debugging&lt;br&gt;10.3.4 Patch Source Code Different&lt;br&gt;10.3.5 System Java Source Code Debugging&lt;br&gt;10.3.6 System C/C++ Source Code Debugging&lt;br&gt;10.3.7 Android Kernel Source Code Debugging&lt;br&gt;10.4  Smart Outlet Vulnerability Analysis&lt;br&gt;10.4.1 Vulnerability Description&lt;br&gt;10.4.2 Static Reverse Analysis&lt;br&gt;10.4.3 Exploit Vulnerability to Control Arbitrary Outlet in Network&lt;br&gt;10.4.4 Summary&lt;br&gt;10.5 CVE-2013-4787 Android Signature Vulnerability&lt;br&gt;10.5.1 Vulnerability Description&lt;br&gt;10.5.2 Android Signature Mechanism&lt;br&gt;10.5.3 Reproduce Bug&lt;br&gt;10.5.4 Vulnerability Analysis&lt;br&gt;10.5.5 Vulnerability Fixes&lt;br&gt;10.6 CVE-2010-1119 Android WebKit UAF Vulnerability&lt;br&gt;10.6.1 Vulnerability Description&lt;br&gt;10.6.2 Vulnerability Exploit&lt;br&gt;10.6.3 Analysis Patch Source Code to Positioning Cause&lt;br&gt;10.7 CVE-2014-3153 Android Kernel Futex Privilege Escalation (Towelroot)&lt;br&gt;10.7.1 Android Devices Root Tool —— Towelroot&lt;br&gt;10.7.2 Analysis Vulnerability With Kernel Source Code Debugging&lt;br&gt;10.7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execution Vulnerability&lt;br&gt;11.2.1 Vulnerability Description&lt;br&gt;11.2.2 Type Confusion Vulnerability&lt;br&gt;11.2.3 Java Security Mechanism&lt;br&gt;11.2.4 Vulnerability Analysis and Exploit&lt;br&gt;11.2.5 Vulnerability Fixes&lt;br&gt;11.2.6 The King of Vulnerability in 2013 —— Java&lt;br&gt;11.3 CVE-2014-0257 Microsoft Internet Explorer 11 dfsvc Component Sandbox Escape&lt;br&gt;11.3.1 Vulnerability Description&lt;br&gt;11.3.2 IE Sandbox Protect Principle&lt;br&gt;11.3.3 IE Sandbox Attack Surface Analysis&lt;br&gt;11.3.4 CVE-2014-0257 Vulnerability Analysis and Exploit&lt;br&gt;11.4 CVE-2014-9150 Adobe Acrobat Reader MoveFileEx IPC Hook Race Condition Vulnerability&lt;br&gt;11.4.1 Therac-25 Medical Accident&lt;br&gt;11.4.2 Race Condition Principle&lt;br&gt;11.4.3 CVE-2014-9150 Vulnerability Description&lt;br&gt;11.4.4 Adobe Sandbox Introduction&lt;br&gt;11.4.5 Exploit Vulnerability to Escape Sandbox&lt;br&gt;11.5 Summary  &lt;/p&gt;
&lt;h3 id=&quot;Chapter-12-The-Development-Trend-of-Software-Vulnerabilities&quot;&gt;&lt;a href=&quot;#Chapter-12-The-Development-Trend-of-Software-Vulnerabilities&quot; class=&quot;headerlink&quot; title=&quot;Chapter 12: The Development Trend of Software Vulnerabilities&quot;&gt;&lt;/a&gt;Chapter 12: The Development Trend of Software Vulnerabilities&lt;/h3&gt;&lt;p&gt;12.1 New Challenges in The Field of Software Vulnerability&lt;br&gt;12.2 The Development Trend of Mobile Terminal Vulnerability&lt;br&gt;12.3 The Development Trend of Cloud Computing Platform Vulnerability&lt;br&gt;12.4 The Development Trend of IoT Vulnerability&lt;br&gt;12.5 Summary  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;By riusksk(@riusksk)&lt;/p&gt;
&lt;p&gt;想出英文版的，但苦于目前出版社找不到译者，所以把内容简介和目录的英文版发出来给老外看，国内朋友如有有合适且有意愿的也欢迎留言！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/vul_war_eng.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Content-Abstract&quot;&gt;&lt;a href=&quot;#Content-Abstract&quot; class=&quot;headerlink&quot; title=&quot;Content Abstract&quot;&gt;&lt;/a&gt;Content Abstract&lt;/h2&gt;&lt;p&gt;Vulnerability War: The Essence of Software Vulnerabilities Analysis systematically explain all kinds of tools, techniques and practical methods in software vulnerability analysis and exploit, mainly related to Windows and Android platform. The book is classfied according to the different vulnerabilities, such as stack overflow, sandbox escape, types confusion, UAF , kernel vulnerability etc., at the same time, in view of the current popular mobile security, add Android platform vulnerability analysis and exploit into it. The author carefully chosen classic Vulnerabilities to share analysis techniques and tools about the cause of these vulnerabilities analysis, exploit and fix methods in detail. The biggest characteristic of this book is the actual combat based on the various types of classical vulnerabilities and discard useless theory, it’s almost “a book written out by debugger”.&lt;/p&gt;
&lt;p&gt;This book is suitable for students of computer science related, somebody worked in information security, software security and mobile security related areas, software developer and hackers to read.&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h3 id=&quot;Chapter-1-Basic-Knowledge&quot;&gt;&lt;a href=&quot;#Chapter-1-Basic-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1: Basic Knowledge&quot;&gt;&lt;/a&gt;Chapter 1: Basic Knowledge&lt;/h3&gt;&lt;p&gt;1.1 The Concepts of Vulnerability&lt;br&gt;1.1.1 What is The Vulnerability&lt;br&gt;1.1.2 The Value of Vulnerabilities&lt;br&gt;1.1.3 0day Vulnerability&lt;br&gt;1.1.4 PoC and Exploit&lt;br&gt;1.2 Why to analysis vunerabilities&lt;br&gt;1.3 The commonly analysis tools&lt;br&gt;1.3.1 IDA: the disassembly tool&lt;br&gt;1.3.2 OllyDbg: the crack and reverse analysis tool&lt;br&gt;1.3.3 Immunity Debugger: vulnerability analysis debugger&lt;br&gt;1.3.4 Windbg: Microsoft Windows Debugger&lt;br&gt;1.3.5 GDB: Linux Debugger&lt;br&gt;1.3.6 JEB: Android Decompilater&lt;br&gt;1.3.7 Other&lt;br&gt;1.4 The common vulnerability analysis method&lt;br&gt;1.4.1 Static analysis&lt;br&gt;1.4.2 Dynamic debugging&lt;br&gt;1.4.3 Source code analysis&lt;br&gt;1.4.4 Patch compare&lt;br&gt;1.4.5 Taint track&lt;br&gt;1.5 Learning resources&lt;br&gt;1.5.1 Some security sites&lt;br&gt;1.5.2 Recommended books&lt;br&gt;1.6 Summary&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Perl Bug 一枚</title>
    <link href="http://riusksk.github.io/2016/09/09/Perl-Bug-%E4%B8%80%E6%9E%9A/"/>
    <id>http://riusksk.github.io/2016/09/09/Perl-Bug-一枚/</id>
    <published>2016-09-09T01:55:19.000Z</published>
    <updated>2016-09-11T02:01:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_oob.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;官方回复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_reply.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_oob.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;官方回复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_reply.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Perl" scheme="http://riusksk.github.io/tags/Perl/"/>
    
  </entry>
  
  <entry>
    <title>China-Pub计算机类图书畅销榜第一</title>
    <link href="http://riusksk.github.io/2016/07/23/China-Pub%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB%E5%9B%BE%E4%B9%A6%E7%95%85%E9%94%80%E6%A6%9C%E7%AC%AC%E4%B8%80/"/>
    <id>http://riusksk.github.io/2016/07/23/China-Pub计算机类图书畅销榜第一/</id>
    <published>2016-07-23T05:06:02.000Z</published>
    <updated>2016-07-23T08:58:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/book_chinapub.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当初编辑联系我出书时，我就曾提前对其说过这类书籍可能受众有限，而且非入门书籍，可能销量不会太理想。&lt;/p&gt;
&lt;p&gt;同时自己觉得，现在安全入门书籍，无论是web还是二进制，其实都已经足够了，没必要再写。&lt;/p&gt;
&lt;p&gt;若是纯粹地追求销量，而忽略书籍的本质内容，还是太对不起自己，也对不起读者，虽然排行磅前列的几名经常被《XXX从入门到精通》给霸占着。&lt;/p&gt;
&lt;p&gt;所以，出书的初衷就是记录自己学习历程中点点滴滴，也是为了备忘，算是一本写给自己的书籍。&lt;/p&gt;
&lt;p&gt;出版后，内心的梗算是放下了，但还是挺忐忑的，后来一位编辑说，基本每一本书的出版都会被骂，然后我就释怀了。&lt;/p&gt;
&lt;p&gt;目前，新书的销售情况还算可观，已经准备再印了，比我想像中的要好，特别感谢各位业界同行的支持！&lt;/p&gt;
&lt;p&gt;当然也有一些非技术的同学也买了，只因前言中的”情怀“，也感谢这些同学的支持。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/book_chinapub.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当初编辑联系我出书时，我就曾提前对其说过这类书籍可能受众有限，而且非入门书籍，可能销量不会太理想。&lt;/p&gt;
&lt;p&gt;同时自己觉得，现在安全入
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》勘误表</title>
    <link href="http://riusksk.github.io/2016/07/17/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E5%8B%98%E8%AF%AF%E8%A1%A8/"/>
    <id>http://riusksk.github.io/2016/07/17/《漏洞战争：软件漏洞分析精要》勘误表/</id>
    <published>2016-07-17T12:21:48.000Z</published>
    <updated>2016-07-17T12:29:56.000Z</updated>
    
    <content type="html">&lt;p&gt;后面会在github上维护一款《漏洞战争》的勘误表：&lt;a href=&quot;https://github.com/riusksk/vul_wars_error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/vul_wars_error&lt;/a&gt; ，会不定期更新，也欢迎各位读者通过微博&lt;a href=&quot;http://weibo.com/riusksk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@riusksk&lt;/a&gt;反馈书中的错误，等后面重印时更正，并在前言添加感谢。&lt;/p&gt;
&lt;h3 id=&quot;当前错误列表&quot;&gt;&lt;a href=&quot;#当前错误列表&quot; class=&quot;headerlink&quot; title=&quot;当前错误列表&quot;&gt;&lt;/a&gt;当前错误列表&lt;/h3&gt;&lt;p&gt;1、前言VIII 第4段落最后一句：&lt;code&gt;专研&lt;/code&gt; =&amp;gt; &lt;code&gt;钻研&lt;/code&gt;&lt;br&gt;2、P7页中多处的 &lt;code&gt;smail&lt;/code&gt; =&amp;gt; &lt;code&gt;smali&lt;/code&gt;，&lt;code&gt;baksmail&lt;/code&gt; ＝&amp;gt; &lt;code&gt;baksmali&lt;/code&gt; （感谢 陈良@科恩实验室）&lt;br&gt;3、P529页第2段中，“按照&lt;code&gt;图10-12所示&lt;/code&gt;的方法重新编译内核源码” =&amp;gt; “按照&lt;code&gt;第10.3.7章节&lt;/code&gt;的方法重新编译内核源码”（感谢 江小照）&lt;br&gt;4、P16页最后一行中&lt;code&gt;Thread&lt;/code&gt; =&amp;gt; &lt;code&gt;Threat&lt;/code&gt;（感谢 “不高兴撒”）&lt;br&gt;5、P164页第3段第3行&lt;code&gt;unsigned int（2字节）&lt;/code&gt; =&amp;gt; &lt;code&gt;unsigned int（4字符）&lt;/code&gt;（感谢 “55-AA”）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;后面会在github上维护一款《漏洞战争》的勘误表：&lt;a href=&quot;https://github.com/riusksk/vul_wars_error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/v
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争》配套资料下载</title>
    <link href="http://riusksk.github.io/2016/07/12/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%E3%80%8B%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/"/>
    <id>http://riusksk.github.io/2016/07/12/《漏洞战争》配套资料下载/</id>
    <published>2016-07-12T09:20:48.000Z</published>
    <updated>2016-07-14T12:15:28.000Z</updated>
    
    <content type="html">&lt;p&gt;《漏洞战争》一书的配套资料，包括漏洞软件、样本、补丁对比的相关文件、学习资料等等。&lt;br&gt;由于多次上传目录失败，因此只好上传压缩包。&lt;/p&gt;
&lt;h3 id=&quot;下载地址：&quot;&gt;&lt;a href=&quot;#下载地址：&quot; class=&quot;headerlink&quot; title=&quot;下载地址：&quot;&gt;&lt;/a&gt;下载地址：&lt;/h3&gt;&lt;h4 id=&quot;1、GitHub下载&quot;&gt;&lt;a href=&quot;#1、GitHub下载&quot; class=&quot;headerlink&quot; title=&quot;1、GitHub下载&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://github.com/riusksk/vul_wars/raw/master/%E4%B9%A6%E7%B1%8D%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub下载&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;2、百度云下载&quot;&gt;&lt;a href=&quot;#2、百度云下载&quot; class=&quot;headerlink&quot; title=&quot;2、百度云下载&quot;&gt;&lt;/a&gt;2、&lt;a href=&quot;http://pan.baidu.com/s/1pKBjEiB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度云下载&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/media/vul_wars.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;《漏洞战争》一书的配套资料，包括漏洞软件、样本、补丁对比的相关文件、学习资料等等。&lt;br&gt;由于多次上传目录失败，因此只好上传压缩包。&lt;/p&gt;
&lt;h3 id=&quot;下载地址：&quot;&gt;&lt;a href=&quot;#下载地址：&quot; class=&quot;headerlink&quot; title=&quot;下载地址：&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》已开售</title>
    <link href="http://riusksk.github.io/2016/07/02/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E5%B7%B2%E5%BC%80%E5%94%AE/"/>
    <id>http://riusksk.github.io/2016/07/02/《漏洞战争：软件漏洞分析精要》已开售/</id>
    <published>2016-07-02T03:08:34.000Z</published>
    <updated>2016-07-09T09:46:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;购买地址&quot;&gt;&lt;a href=&quot;#购买地址&quot; class=&quot;headerlink&quot; title=&quot;购买地址　&quot;&gt;&lt;/a&gt;购买地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://product.dangdang.com/1027799065.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当当&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.amazon.cn/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81-%E6%9E%97%E6%A1%A0%E6%B3%89/dp/B01I2ZVN5U/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;亚马逊&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;p&gt;第1 章 基础知识 1&lt;br&gt;11 漏洞的相关概念 1&lt;br&gt;111 什么是漏洞 1&lt;br&gt;112 漏洞的价值 1&lt;br&gt;113 0Day 漏洞 2&lt;br&gt;114 PoC 与Exploit 2&lt;br&gt;12 为什么要分析漏洞 2&lt;br&gt;13 常用分析工具 3&lt;br&gt;131 IDA-反汇编利器 3&lt;br&gt;132 OllyDbg-破解与逆向常用调试器 4&lt;br&gt;133 Immunity Debugger-漏洞分析专用调试器 4&lt;br&gt;134 WinDbg-微软正宗调试器 5&lt;br&gt;135 GDB-Linux 调试器 6&lt;br&gt;136 JEB-Android 反编译器 7&lt;br&gt;137 其他 8&lt;br&gt;14 常见的漏洞分析方法 8&lt;br&gt;141 静态分析 8&lt;br&gt;142 动态调试 9&lt;br&gt;143 源码分析 9&lt;br&gt;144 补丁比较 9&lt;br&gt;145 污点追踪 10&lt;br&gt;15 学习资源 11&lt;br&gt;151 站点分享 11&lt;br&gt;152 书籍推荐 12&lt;br&gt;16 本章总结 13&lt;br&gt;第2 章 栈溢出漏洞分析 14&lt;br&gt;21 栈溢出简史 14&lt;br&gt;22 栈溢出原理 15&lt;br&gt;23 CVE-2010-2883 Adobe Reader TTF 字体SING 表栈溢出漏洞 16&lt;br&gt;231 LuckyCat 攻击事件 16&lt;br&gt;232 漏洞描述 18&lt;br&gt;233 分析环境 18&lt;br&gt;234 基于字符串定位的漏洞分析方法 19&lt;br&gt;235 样本Exploit 技术分析 20&lt;br&gt;236 样本Shellcode 恶意行为分析 26&lt;br&gt;237 漏洞修复 29&lt;br&gt;24 CVE-2010-3333 Microsoft RTF 栈溢出漏洞 30&lt;br&gt;241 林来疯攻击事件 30&lt;br&gt;242 漏洞描述 31&lt;br&gt;243 分析环境 31&lt;br&gt;244 RTF 文件格式 32&lt;br&gt;245 基于栈回溯的漏洞分析方法 33&lt;br&gt;246 漏洞利用 41&lt;br&gt;247 Office 2003 与Office 2007 Exploit 通用性研究 42&lt;br&gt;248 漏洞修复 45&lt;br&gt;25 CVE-2011-0104 Microsoft Excel TOOLBARDEF Record 栈溢出漏洞 51&lt;br&gt;251 漏洞描述 51&lt;br&gt;252 分析环境 52&lt;br&gt;253 基于污点追踪思路的漏洞分析方法 52&lt;br&gt;254 漏洞修复 59&lt;br&gt;26 阿里旺旺ActiveX 控件imageMandll 栈溢出漏洞 60&lt;br&gt;261 漏洞描述 60&lt;br&gt;262 分析环境 60&lt;br&gt;263 针对ActiveX 控件的漏洞分析方法 60&lt;br&gt;264 漏洞利用 63&lt;br&gt;27 CVE-2012-0158 Microsoft Office MSCOMCTLocx 栈溢出漏洞 65&lt;br&gt;271 Lotus Blossom 行动 65&lt;br&gt;272 漏洞描述 65&lt;br&gt;273 分析环境 65&lt;br&gt;274 基于OffVis 工具的Office 漏洞分析方法 66&lt;br&gt;275 漏洞修复 71&lt;br&gt;28 总结 72&lt;br&gt;第3 章 堆溢出漏洞分析 73&lt;br&gt;31 堆溢出简史 73&lt;br&gt;32 堆溢出原理 74&lt;br&gt;33 堆调试技巧 79&lt;br&gt;331 堆尾检查 80&lt;br&gt;332 页堆 81&lt;br&gt;34 CVE-2010-2553 Microsoft Cinepak Codec CVDecompress 函数堆溢出漏洞 85&lt;br&gt;341 漏洞描述 85&lt;br&gt;342 分析环境 85&lt;br&gt;343 基于HeapPage 的堆漏洞分析方法 85&lt;br&gt;344 漏洞修复 101&lt;br&gt;35 CVE-2012-0003 Microsoft Windows Media Player winmmdll MIDI 文件堆溢出漏洞 104&lt;br&gt;351 关于”蜘蛛”漏洞攻击包（Zhi-Zhu Exploit Pack） 104&lt;br&gt;352 漏洞描述 105&lt;br&gt;353 分析环境 105&lt;br&gt;354 MIDI 文件格式 105&lt;br&gt;355 基于导图推算的漏洞分析方法 107&lt;br&gt;356 漏洞利用 122&lt;br&gt;357 补丁比较 130&lt;br&gt;36 CVE-2013-0077 Microsoft DirectShow quartzdll m2p 文件堆溢出漏洞 130&lt;br&gt;361 漏洞描述 130&lt;br&gt;362 基于HTC 的漏洞分析方法 131&lt;br&gt;363 漏洞修复 134&lt;br&gt;37 CVE-2012-1876 Internet Exporter MSHTMLdll CalculateMinMax 堆溢出漏洞 135&lt;br&gt;371 在Pwn2Own 黑客大赛上用于攻破IE9 的漏洞 135&lt;br&gt;372 分析环境 135&lt;br&gt;373 基于HPA 的漏洞分析方法 135&lt;br&gt;374 通过信息泄露实现漏洞利用 149&lt;br&gt;375 漏洞修复 161&lt;br&gt;38 小结 163&lt;br&gt;第4 章 整数溢出漏洞分析 164&lt;br&gt;41 整数溢出简史 164&lt;br&gt;42 整数溢出原理 164&lt;br&gt;421 基于栈的整数溢出 165&lt;br&gt;422 基于堆的整数溢出 166&lt;br&gt;43 CVE-2011-0027 Microsoft Data Access Components 整数溢出漏洞 167&lt;br&gt;431 在Pwn2Own 黑客大赛上用于攻破IE8 的漏洞 167&lt;br&gt;432 基于堆分配记录的漏洞分析方法 168&lt;br&gt;433 补丁比较 176&lt;br&gt;44 CVE-2012-0774 Adobe Reader TrueType 字体整数溢出漏洞 178&lt;br&gt;441 漏洞描述 178&lt;br&gt;442 PDF 文件格式与常用分析工具 178&lt;br&gt;443 基于条件记录断点的漏洞分析方法 182&lt;br&gt;444 补丁分析 196&lt;br&gt;45 CVE-2013-0750 Firefox 字符串替换整数溢出漏洞 197&lt;br&gt;451 漏洞描述 197&lt;br&gt;452 基于源码调试的漏洞分析方法 197&lt;br&gt;453 源码比对 207&lt;br&gt;46 CVE-2013-2551 Internet Explorer VML COALineDashStyleArray 整数溢出漏洞 208&lt;br&gt;461 在Pwn2Own 黑客大赛上攻破IE10 的漏洞 208&lt;br&gt;462 基于类函数定位的漏洞分析方法 208&lt;br&gt;463 利用信息泄露实现漏洞利用 223&lt;br&gt;47 总结 226&lt;br&gt;第5 章 格式化字符串漏洞分析 227&lt;br&gt;51 格式化字符串漏洞简史 227&lt;br&gt;52 格式化字符串漏洞的原理 227&lt;br&gt;53 CVE-2012-0809 Sudo sudo_debug 函数格式化字符串漏洞 234&lt;br&gt;531 漏洞描述 234&lt;br&gt;532 通过源码比对分析漏洞 234&lt;br&gt;54 CVE-2012-3569 VMware OVF Tool 格式化字符串漏洞 235&lt;br&gt;541 漏洞描述 235&lt;br&gt;542 基于输出消息的漏洞定位方法 235&lt;br&gt;543 漏洞利用 239&lt;br&gt;55 总结 242&lt;br&gt;第6 章 双重释放漏洞分析 243&lt;br&gt;61 双重释放漏洞简史 243&lt;br&gt;62 双重释放漏洞的原理 243&lt;br&gt;63 CVE-2010-3974 Windows 传真封面编辑器fxscoverexe 双重释放漏洞 246&lt;br&gt;631 漏洞描述 246&lt;br&gt;632 通过栈回溯和堆状态判定漏洞类型 246&lt;br&gt;633 通过补丁比较确定漏洞成因及修复方法 249&lt;br&gt;64 CVE-2014-0502 Adobe Flash Player 双重释放漏洞 251&lt;br&gt;641 GreedyWonk 行动 251&lt;br&gt;642 静态分析攻击样本 251&lt;br&gt;643 Shellcode 自动化模拟执行 263&lt;br&gt;644 基于ROP 指令地址的反向追踪 265&lt;br&gt;65 总结 273&lt;br&gt;第7 章 释放重引用漏洞分析 274&lt;br&gt;71 释放重引用（Use After Free，UAF）漏洞简史 274&lt;br&gt;72 UAF 漏洞的原理 274&lt;br&gt;73 CVE-2011-0065 Firefox mChannel UAF 漏洞 277&lt;br&gt;731 漏洞描述 277&lt;br&gt;732 通过动态调试快速定位漏洞源码 277&lt;br&gt;733 漏洞利用 285&lt;br&gt;734 源码比对 286&lt;br&gt;74 CVE-2013-1347 Microsoft IE CGenericElement UAF 漏洞 287&lt;br&gt;741 “水坑”攻击事件 287&lt;br&gt;742 通过HPA 快速定位漏洞对象 287&lt;br&gt;743 逆向分析IE 引擎对JavaScript 代码的解析 290&lt;br&gt;744 追本溯源：探寻漏洞的本质 321&lt;br&gt;745 漏洞利用 324&lt;br&gt;75 CVE-2013-3346 Adobe Reader ToolButton UAF 漏洞 326&lt;br&gt;751 “Epic Turla”网络间谍攻击行动 326&lt;br&gt;752 使用peepdf 分析PDF 恶意样本 326&lt;br&gt;753 漏洞利用 338&lt;br&gt;76 CVE-2015-0313 Adobe Flash Player Workers ByteArray UAF 漏洞 340&lt;br&gt;761 漏洞描述 340&lt;br&gt;762 分析ActiveScript 虚拟机源码辅助漏洞调试 340&lt;br&gt;763 Flash JIT 调试插件与符号文件 353&lt;br&gt;764 漏洞利用 354&lt;br&gt;765 漏洞修复 360&lt;br&gt;77 本章总结 360&lt;br&gt;第8 章 数组越界访问漏洞分析 361&lt;br&gt;81 数组越界与溢出的关系 361&lt;br&gt;82 数组越界访问漏洞原理 361&lt;br&gt;83 CVE-2011-2110 Adobe Flash Player 数组越界访问漏洞 363&lt;br&gt;831 漏洞描述 363&lt;br&gt;832 解决安装旧版Flash Player 的限制问题 364&lt;br&gt;833 通过Perl 脚本辅助分析样本 365&lt;br&gt;834 搭建服务器重现漏洞场景 371&lt;br&gt;835 通过修改样本代码定位漏洞 373&lt;br&gt;836 通过构造信息泄露利用漏洞 376&lt;br&gt;837 通过搜索指令序列分析补丁 380&lt;br&gt;84 CVE-2014-0160 OpenSSL TLS 数组越界访问漏洞（”心脏出血”） 382&lt;br&gt;841 漏洞描述 382&lt;br&gt;842 基于源码对比与跟踪的漏洞分析方法 383&lt;br&gt;843 利用漏洞盗取网站账号 389&lt;br&gt;85 本章总结 394&lt;br&gt;第9 章 内核漏洞分析 395&lt;br&gt;91 Windows 内核漏洞漫谈 395&lt;br&gt;92 Windows 内核调试环境搭建 396&lt;br&gt;93 常见内核漏洞原理与利用 398&lt;br&gt;931 漏洞成因分析 398&lt;br&gt;932 漏洞利用 405&lt;br&gt;94 360 安全卫士bregdrvsys 本地提权漏洞分析 414&lt;br&gt;941 漏洞描述 414&lt;br&gt;942 基于导出函数和IO 控制码的追踪分析 414&lt;br&gt;95 CVE-2011-2005 Windows Afdsys 本地提权漏洞 423&lt;br&gt;951 漏洞描述 423&lt;br&gt;952 从利用代码到漏洞函数的定位分析 423&lt;br&gt;953 补丁比较 426&lt;br&gt;96 CVE-2013-3660 Windows win32ksys EPATHOB 指针未初始化漏洞 426&lt;br&gt;961 漏洞描述 426&lt;br&gt;962 通过IDA 定义结构体辅助分析 427&lt;br&gt;963 漏洞利用 431&lt;br&gt;97 CVE-2014-1767 Windows AFDsys 双重释放漏洞（Pwn2Own 2014） 437&lt;br&gt;971 Pwnie Awards 2014”最佳提权漏洞奖”得主 437&lt;br&gt;972 基于IOCTL 处理函数自动追踪记录的分析方法 437&lt;br&gt;973 漏洞利用 454&lt;br&gt;974 补丁分析 460&lt;br&gt;98 本章总结 462&lt;br&gt;第10 章 Android 平台漏洞分析 463&lt;br&gt;101 Android 平台漏洞简史 463&lt;br&gt;102 Android 平台漏洞分类 466&lt;br&gt;103 常见的漏洞分析方法 467&lt;br&gt;1031 APK 静态分析 467&lt;br&gt;1032 smali 动态调试 468&lt;br&gt;1033 so 库动态调试 474&lt;br&gt;1034 补丁源码比对 475&lt;br&gt;1035 系统Java 源码调试 477&lt;br&gt;1036 系统C/C++源码调试 486&lt;br&gt;1037 Android 内核源码调试 488&lt;br&gt;104 智能插座漏洞分析 492&lt;br&gt;1041 漏洞描述 492&lt;br&gt;1042 静态逆向分析 492&lt;br&gt;1043 利用漏洞控制网络上的任意插座 497&lt;br&gt;1044 总结 502&lt;br&gt;105 CVE-2013-4787 Android 系统签名漏洞 502&lt;br&gt;1051 漏洞描述 502&lt;br&gt;1052 Android 签名机制 503&lt;br&gt;1053 漏洞重现 509&lt;br&gt;1054 漏洞原理分析 514&lt;br&gt;1055 漏洞修复 516&lt;br&gt;106 CVE-2010-1119 Android WebKit UAF 漏洞 516&lt;br&gt;1061 漏洞描述 516&lt;br&gt;1062 漏洞利用 517&lt;br&gt;1063 通过补丁源码分析漏洞成因 524&lt;br&gt;107 CVE-2014-3153 Android 内核Futex 提权漏洞（Towelroot） 528&lt;br&gt;1071 Android 设备Root 神器-Towelroot 528&lt;br&gt;1072 通过内核源码调试分析漏洞 528&lt;br&gt;1073 漏洞利用 548&lt;br&gt;1074 漏洞修复 554&lt;br&gt;108 本章总结 554&lt;br&gt;第11 章 其他类型的漏洞分析 555&lt;br&gt;111 本章引言 555&lt;br&gt;112 CVE-2013-2423 JAVA Applet reflection 类型混淆代码执行漏洞 555&lt;br&gt;1121 漏洞描述 555&lt;br&gt;1122 类型混淆漏洞 555&lt;br&gt;1123 Java 安全机制 556&lt;br&gt;1124 漏洞分析与利用 558&lt;br&gt;1125 漏洞修复 562&lt;br&gt;1126 2013 年漏洞之王-Java 563&lt;br&gt;113 CVE-2014-0257 Microsoft Internet Explorer 11 dfsvc 组件沙盒逃逸漏洞 564&lt;br&gt;1131 漏洞描述 564&lt;br&gt;1132 IE 沙盒保护原理 564&lt;br&gt;1133 IE 沙盒攻击面分析 569&lt;br&gt;1134 CVE-2014-0257 漏洞分析与利用 570&lt;br&gt;114 CVE-2014-9150 Adobe Acrobat Reader MoveFileEx IPC Hook 竞争条件&lt;br&gt;（沙盒逃逸）漏洞 572&lt;br&gt;1141 Therac-25 医疗事故 572&lt;br&gt;1142 竞争条件漏洞原理 573&lt;br&gt;1143 CVE-2014-9150 漏洞描述 574&lt;br&gt;1144 Adobe 沙盒简介 574&lt;br&gt;1145 利用漏洞实现沙盒逃逸 575&lt;br&gt;115 本章总结 578&lt;br&gt;第12 章 软件漏洞发展趋势 579&lt;br&gt;121 软件漏洞领域的新挑战 579&lt;br&gt;122 移动终端漏洞发展趋势 579&lt;br&gt;123 云计算平台漏洞发展趋势 581&lt;br&gt;124 物联网漏洞发展趋势 583&lt;br&gt;125 本章总结 585 &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言　　&quot;&gt;&lt;/a&gt;前言　　&lt;/h3&gt;&lt;h4 id=&quot;为什么写这本书&quot;&gt;&lt;a href=&quot;#为什么写这本书&quot; class=&quot;headerlink&quot; title=&quot;为什么写这本书&quot;&gt;&lt;/a&gt;为什么写这本书&lt;/h4&gt;&lt;p&gt;　　不知道大家是否曾有过这样的经历：&lt;br&gt;　　&lt;br&gt;　　● 无法读懂网上很多软件漏洞分析文章，不理解里面的漏洞成因和漏洞利用技巧。&lt;br&gt;　　● 即使读懂某篇软件漏洞分析文章，自己仍无法独立完成相同漏洞的分析。如果文章中所使用的&lt;br&gt;　　测试环境与软件版本跟自己使用的不一样，则顿时更不知如何入手。&lt;br&gt;　　● 很多软件漏洞分析文章贴出存在漏洞的汇编代码，指出导致漏洞的原因，即”结论式分析”，但如何定位到此段代码并无解释，看完之后，仍不知如何快速定位，缺乏可借鉴的思路。&lt;br&gt;　　&lt;br&gt;　　带着这些问题，相信读者会在本书中找到想要的答案。&lt;br&gt;　　&lt;br&gt;　　再来聊下本书的一些写作经历，开始写作本书始于2012年5月，最初是”爱无言”找到我，说大家合作写一本关于软件漏洞案例分析的书，因为那段时间我在博客上每周都会分享一两篇软件漏洞分析的实际案例，而当时国内还没有专门写软件漏洞案例的专著（几年前出版的《0Day安全：软件漏洞分析技术》主要偏向堆和栈溢出及内核方面的漏洞分析，实际案例较少，且”爱无言”也是作者之一）。&lt;br&gt;　　就这样，两人开始谋划，写书的念头就此产生。&lt;br&gt;　　后来，我又拉了两位朋友加入，然后几人列出大纲目录，但最后因为种种原因，只剩下我一人独自完成本书创作，中途也多次想放弃，但庆幸的是，历时3年半，终于2015年12月完稿，共历时4年后出版。&lt;br&gt;　　就这样，一本原为”合著”的书就写成了”专著”。&lt;br&gt;　　由于朋友的退出，以及写作速度较慢，中途停写半年，已原本打算放弃。后来，有一天，编辑”皎子”找我聊了一些出书的想法。&lt;br&gt;　　就这样，一本原打算沉留箱底的”残卷”再次被”激活”。&lt;br&gt;　　之后的写书经历还算顺利，又历时一年左右完稿，比较符合预期，遗留心底多年的梗总算可以释怀了。&lt;br&gt;　　相信一些读者看完本书目录之后会有一些疑问，也相信其中一些疑问也是我在定位本书方向时考虑的，所以有必要在此谈一谈。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;a href=&quot;#Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;/a&gt;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&lt;/h4&gt;&lt;p&gt;A：0day安全一书主要是讲Windows平台下堆栈溢出和内核提权的漏洞分析技术，还涉及部分格式化字符串漏洞，从基础讲起，最后是实例分析。本书则完全是以真实的漏洞为实例以分享漏洞分析时的一些技巧，以漏洞类型的不同来分享不同的漏洞分析技巧，可以说是”用调试器写出来的一本书”，而且综合考虑当前热门的移动安全，特意加入Android平台上的漏洞分析章节，从Java层、Native层和内核层等方向分享不同的调试分析方法。从难度而言，本书比《0day安全：软件漏洞分析技术》一书更难，可以将本书当作进阶版，搭配学习。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;a href=&quot;#Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;/a&gt;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&lt;/h4&gt;&lt;p&gt;A：著书的宗旨在于”授人以鱼，不如授人以渔”。如果读者经常看网上的漏洞分析文章，就会发现一个常见现象：它们大多是”结论性分析”，而非”思路性分析”。换句话说，就是贴出存在漏洞的汇编代码，然后直接给出漏洞成因的结论，至于如何定位到漏洞代码，并没有给出分析思路。正因为如此，即使你看懂了Vupen漏洞军火商写的分析文章，也不代表你看完后就能独立分析出来，甚至在调试之后，你还会发现Vupen在一些文章里留有”坑”，故意省略或写错某些关键内容，如果没有自己实际调试一遍是很难发现这些问题的。&lt;br&gt;　　相信有一定软件漏洞分析经验的朋友会注意到，软件漏洞分析的大部分时间是花费在寻找和定位漏洞代码，而非分析存在漏洞的代码。对于有一定编程经验和漏洞基础的读者，如果直接给一段漏洞代码，可能很容易就看出来，但像Adobe和Windows这些复杂的软件或系统，在千千万万的代码行中找到漏洞代码是有一定难度的。因此，本书的重点是讲授如何快速地定位漏洞代码，针对不同漏洞类型采取不同的分析技巧，以帮助大家快速地分析出漏洞成因，制定检测、防御与修复方案。书中的漏洞实例分析技巧是可以长期运用和延伸的，这才是本书的核心价值。&lt;/p&gt;
&lt;h4 id=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;a href=&quot;#Q：如何借助本书提升自身的软件漏洞分析能力？&quot; class=&quot;headerlink&quot; title=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;/a&gt;Q：如何借助本书提升自身的软件漏洞分析能力？&lt;/h4&gt;&lt;p&gt;A：本书主要面向有一定软件漏洞基础的读者，如果缺乏这方面的基础，且有一定C语言和汇编语言基础，建议提前看看《0day安全：软件漏洞分析技术》一书。软件漏洞分析是一门实践性比较强的安全领域分支，需要许多实际动手的调试经验，因此建议大家在看本书时，一边看一边动手调试，以加深理解，就像骑自行车一样，熟练之后，哪怕十年未碰，也依然会骑。本书在分析漏洞时，也尽量以思路性地描述为主，以讲解分析漏洞时的思考方式和常用技巧，包括工具和方法论，因此大家在阅读时，应该掌握书中介绍的思考方式、工具运用及分析技巧，毕竟单个漏洞案例本身是会过时的，但技巧性的东西总是可以借鉴和扩展。&lt;br&gt;　　记得大一上第一节历史课时，老师说过这样一句话，如果在未来的某一天，你在和朋友闲聊时，能够运用到历史课上学到的知识，哪怕一句话作为谈资，那这历史课就算没白学。同样地，我也希望未来大家在分析软件漏洞时，本书能够提供一些帮助，哪怕是一个分析技巧，一个工具使用，我也觉得这4年的付出算值了。&lt;br&gt;　　&lt;br&gt;　　纵观近五年，各种APT攻击事件频发，包括知名企业，甚至国家级单位都曾遭受到漏洞攻击。每年都有一款产品的漏洞被频繁用于网络攻击，比如2012年的Office漏洞（还记得经典的CVE-2012-0158吗？），2013年的Java漏洞，2014年的Internet Explorer漏洞，2015年Adobe Flash漏洞。PC端上的软件漏洞一直在逐年增加，虽然厂商在不断地推出各种安全机制，但漏洞利用技术的发展从未间断，Exploiter们依然生存得很好。同时，互联网早已步入移动化时代，伴随着PC软件漏洞攻击事件的频发，移动端的漏洞攻击也在逐年增长。因此，笔者结合PC端（Windows）与移动端（Android）平台上的漏洞案例，历时近4年，将自身的实战经验整理成本书。&lt;/p&gt;
&lt;h4 id=&quot;求学之路&quot;&gt;&lt;a href=&quot;#求学之路&quot; class=&quot;headerlink&quot; title=&quot;求学之路&quot;&gt;&lt;/a&gt;求学之路&lt;/h4&gt;&lt;p&gt;　　经常有人问我：”一个医学生为什么会转行做安全？”，通常我都会这么回答：”因为小说看多了”。&lt;br&gt;　　大一时，由于喜欢看黑客小说，比如《黑客传说》《地狱黑客》《指间的黑客》，就去图书馆找一些黑客书籍学习，每天中午都不休息，几乎天天都泡在图书馆看书，甚至翘课去看计算机书。&lt;br&gt;　　大四才买计算机，在此之前一直都只能去网吧、学校机房或者借用舍友的计算机。当年就用诺基亚3100手机看完了《Windows程序设计》、《Windows核心编程》和《Windows环境下32位汇编语言程序设计》。后来就网购实体书来看，这样比在网吧看电子书更实惠。&lt;br&gt;　　大学期间，经常给《黑客防线》杂志投稿，一方面可以提高个人技术，一方面可以用稿费作为生活补贴，后来就用稿费加上我哥的经济支持，买下了第一台属于自己的计算机，本书就有一半内容是在那台计算机上完成的。&lt;br&gt;　　在求学这条道路上，我一直是一个人默默地前行着，就连一块生活了几年的舍友也不知道我在学习安全方面的知识，我买的一堆计算机书籍一直藏在宿舍衣柜最里面。在此过程中，自己走过很多弯路，甚至多次差点放弃，但很庆幸最后还是坚持下来了，并直至今日，依然在安全这条道路上前行着……&lt;/p&gt;
&lt;h4 id=&quot;面试经历&quot;&gt;&lt;a href=&quot;#面试经历&quot; class=&quot;headerlink&quot; title=&quot;面试经历&quot;&gt;&lt;/a&gt;面试经历&lt;/h4&gt;&lt;p&gt;　　在圈内朋友的建议下，我在大五（医学五年制）上学期开始找安全相关的工作，最终顺利拿到安恒和腾讯的offer。当初投简历给安恒时，安恒的副总裁看完简历后直接发了offer，我有点受宠若惊，也特别感谢安恒的信任，但最终还是选择了腾讯。面试腾讯的经历，我觉得是个有趣的过程，值得与大家分享。&lt;br&gt;　　那年我还在厦门市第二医院骨伤科实习，门诊部刚好不是特别忙，我在给一位腰椎患者做完针灸后，就接到来自腾讯安全中心的面试电话。然后趁主任不在，偷偷躲到门诊部后面的楼梯口进行电话面试，整个面试过程还算比较顺利，第2天腾讯安全中心就来电说希望我到深圳总部面试。&lt;br&gt;　　到了深圳总部后，腾讯安全中心的主管面试了我，虽然聊了一个半小时，但没有问我多少问题，聊完后直接被带去HR那里面试。&lt;br&gt;　　HR面试我时，并非以常规的话题开场，我们是以腰椎间盘突出的话题开场的，也算是一次别开生面的面试经历。&lt;br&gt;　　回到厦门后，我跟带教老师说明了转行情况，之后有上手术台的机会，我都会主动让给其他同班同学，让他们有更多上台练手的机会，而我自己自然有更多的时间去专研安全技术。&lt;/p&gt;
&lt;h4 id=&quot;加入腾讯&quot;&gt;&lt;a href=&quot;#加入腾讯&quot; class=&quot;headerlink&quot; title=&quot;加入腾讯&quot;&gt;&lt;/a&gt;加入腾讯&lt;/h4&gt;&lt;p&gt;　　腾讯是我的第一家雇主，也是目前我唯一工作过的公司，从我毕业一直工作到现在。在公司我见证了腾讯安全应急响应中心（TSRC）的成立与发展，帮助完善各种流程和标准，作为早期主要的漏洞审核者，我也从广大白帽子身上学到很多东西，包括各种漏洞挖掘与利用技术，涉及各个安全领域，如Web安全、驱动安全、应用软件安全、移动安全等，正是TSRC给了我更多学习的机会，使得我在安全技术上能够更加全面地发展。除此之外，我在公司也做一些安全研究工作，并研发出Android与iOS应用安全审计系统，已投入公司日常运营使用。&lt;br&gt;　　至今，我依然觉得工作能够与兴趣结合在一起，是一件既幸福又幸运的事，而选择腾讯依然是我当年的明智之举。&lt;/p&gt;
&lt;h4 id=&quot;著书感言&quot;&gt;&lt;a href=&quot;#著书感言&quot; class=&quot;headerlink&quot; title=&quot;著书感言&quot;&gt;&lt;/a&gt;著书感言&lt;/h4&gt;&lt;p&gt;　　本书是我写的第一本书，也可能是最后一本技术书籍，只有自己经历了著书过程，才知道写书的不易。特别是类似本书这种以漏洞实例进行调试分析的书，写起来特别费时，也更需要有持之以恒之的毅力。如果说单纯写书用掉1年时间，那么我用来调试的时间大约是3年，因此可以说这是”一本用调试器写出来的书”。&lt;br&gt;　　“开头容易，收尾难”是个人著书的真实感受，很多人一时兴起写了开头，最后很难坚持下去，导致夭折了不少著作。
　　&lt;/p&gt;
&lt;h4 id=&quot;本书结构&quot;&gt;&lt;a href=&quot;#本书结构&quot; class=&quot;headerlink&quot; title=&quot;本书结构&quot;&gt;&lt;/a&gt;本书结构&lt;/h4&gt;&lt;p&gt;　　本书共12章，可以分为三大部分。&lt;br&gt;　　基础篇（第1章）：主要介绍一些软件漏洞相关的基本概念，以及常用工具及漏洞分析方法，最后向读者推荐一些相关的学习站点和书籍，方便读者做进一步地学习和交流。&lt;br&gt;　　实战篇（第2~11章）：是本书最主要的部分，根据不同的漏洞类型挑选不同的经典案例，用不同的漏洞分析技巧，向读者介绍比较高效的分析方法，剖析各种常见的软件漏洞类型、原理、利用和修复的实战技术。同时，紧跟当前热门的移动互联网安全问题，增加了Android平台的漏洞分析，以保持内容与时俱进。&lt;br&gt;　　展望篇（第12章）：对未来的软件漏洞发展趋势做出预判，相信未来的主要战场会更集中在移动终端、云计算平台、物联网三大方向上，并对现有的这些方向的漏洞案例进行简要介绍。&lt;/p&gt;
&lt;h4 id=&quot;致谢&quot;&gt;&lt;a href=&quot;#致谢&quot; class=&quot;headerlink&quot; title=&quot;致谢&quot;&gt;&lt;/a&gt;致谢&lt;/h4&gt;&lt;p&gt;　　感谢我父母的养育之恩，是他们在背后默默地支持我前行。&lt;br&gt;　　感谢我的兄长在生活和工作上对我的帮助与支持。&lt;br&gt;　　感谢我的女朋友，正是她的督促和支持才让我能够准时完稿，并且书中有些截图是经过她后期制作的，以便使得图片的印刷效果更好。&lt;br&gt;　　感谢我的姑母长期以来对我生活上的关心与照顾。&lt;br&gt;　　感谢我的公司腾讯，它所营造的良好氛围，使我的技术水平和在职场的发展都更上一层楼。同时也感谢在工作中一直给予我帮助和鼓励的同事和领导，由于人数较多，就不一一列举。&lt;br&gt;　　感谢王清先生为本书作序，他所著书籍一直是软件安全行业的经典。&lt;br&gt;　　感谢博文视点的编辑皎子、郑柳洁及她们的团队，正是他们的努力才使得本书最终能够与大家见面。&lt;br&gt;　　感谢各位圈内的朋友，他们包括但不限于（排名不分先后）：wushi、爱无言、仙果、wingdbg、instruder、kanxue、lake2、harite、h4ckmp、dragonltx、非虫、monster、gmxp、古河、冰雪风谷、KiDebug、KK……&lt;br&gt;　　由于作者水平有限，书中难免有误，欢迎各位业界同仁斧正！&lt;/p&gt;
&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言　　&quot;&gt;&lt;/a&gt;序言　　&lt;/h3&gt;&lt;p&gt;独乐乐，与人乐乐，孰乐？&lt;/p&gt;
&lt;p&gt;不断向底层钻研的技术深度，创造性的广度思维，契而不舍地执着追求是成为优秀的安全研究员所必备的基础素质，无疑riusksk全都具备。&lt;/p&gt;
&lt;p&gt;单论技术本身，问世间，是否此山最高，没有人能说的清楚。但是我在书目中还看到了许多超出技术的其他元素:有精益求精、追求完美的极客精神；有循序渐进、耐心引导的导师身影；有架构明晰，逻辑严谨的整体设计感；最能打动我的，其实是那份炽热的分享精神，毫无保留地去帮助那些还在摸索中学习的朋友。&lt;/p&gt;
&lt;p&gt;一代宗师除了不断修炼自己之外，还需要将自己的智慧发扬传承，我在书中看到了这样的影子。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;《0day安全：软件漏洞分析技术》作者，北京子衿晨风科技有限公司CEO  failwest &lt;/h4&gt;


&lt;h3 id=&quot;媒体评论&quot;&gt;&lt;a href=&quot;#媒体评论&quot; class=&quot;headerlink&quot; title=&quot;媒体评论　　&quot;&gt;&lt;/a&gt;媒体评论　　&lt;/h3&gt;&lt;p&gt;本书对近年来影响比较大的漏洞一一详细剖析，于细节处可以看出作者的功力，对于漏洞攻防领域是一本不可多得的原创好书。&lt;br&gt;　　读者可以对照着动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;– 腾讯科恩实验室总监 wushi&lt;/h4&gt;

&lt;p&gt;　　过去的几年，我们见证了移动互联网的兴起，也见证了软件漏洞战场从PC端向移动端的迁移。本书从这个视角出发，结合实例、深入浅出、涵盖全面，是学习软件漏洞的绝佳之选。同时本书作者riusksk（泉哥）在腾讯安全应急响应中心负责软件漏洞的处理和研究，有着丰富的实战经验。强烈推荐！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 腾讯安全平台部总监 lake2&lt;/h4&gt;

&lt;p&gt;安全漏洞的挖掘与分析是隐秘且难度较高的一门技术，系统性的学习资料更是少之又少。本书以近年来报告出的经典漏洞为蓝本，分析并讲解了常见的各种系统及软件漏洞的成因及攻击方法，通过对这些精彩漏洞实例的全面讲解，相信读者对软件漏洞技术会有更加全面的认识。并且随着全书内容的展开，读者一定会与我一样，被漏洞挖掘者的聪明与智慧深深所折服。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 软件安全专家，《Android软件安全与逆向分析》及《Mac OS X软件安全与逆向分析》作者 丰生强&lt;/h4&gt;

&lt;p&gt;对软件漏洞进行分析研究是提高软件安全技术水平的途径之一，他山之石可以攻玉，这本书为我们提供了一个很好的开始，值得认真学习。移动平台的漏洞研究是当下的热点，这本书与时俱进地纳入了这一部分内容，不可不读也！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 自由安全研究者，《挖0day》作者 爱无言&lt;/h4&gt;

&lt;p&gt;这是自《0day安全：软件漏洞分析技术》以来，又一本关于二进制漏洞分析最全面的力作书籍，该书籍结合新的经典漏洞与新型分析方法，深度剖析不同类型的安全漏洞，结合不同的分析方法，做到授人以渔。相信能够帮助那些希望从事安全行业的人员，为其提供更好的帮助。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里安全威胁情报中心  安全专家 instruder&lt;/h4&gt;

&lt;p&gt;随着互联网的蓬勃发展，安全漏洞也跟着逐年爆发。未知攻，焉知防！因此，如何快速分析漏洞成因是安全研究员必备的一项技能。本书涵盖了各种各样的漏洞类型，覆盖了PC端和移动端，极具实战性和全面性，兼具实用性和时效性，干货满满，是安全研究员提高漏洞分析能力的利器。俱往矣，数漏洞分析，还看此书！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里巴巴移动安全 dragonltx&lt;/h4&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;购买地址&quot;&gt;&lt;a href=&quot;#购买地址&quot; class=&quot;headerlink&quot; title=&quot;购买地址　&quot;&gt;&lt;/a&gt;购买地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot;&gt;淘宝&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://product.dangdang.com/1027799065.html&quot;&gt;当当&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.amazon.cn/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81-%E6%9E%97%E6%A1%A0%E6%B3%89/dp/B01I2ZVN5U/&quot;&gt;亚马逊&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>浅谈iOS应用安全自动化审计</title>
    <link href="http://riusksk.github.io/2016/06/23/ios-auditor/"/>
    <id>http://riusksk.github.io/2016/06/23/ios-auditor/</id>
    <published>2016-06-22T16:00:00.000Z</published>
    <updated>2016-06-26T09:35:57.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;腾讯也有很多iOS应用产品，基本上android上有的，对应的同款应用在iOS上也会有。目前Android应用的审计技术在业界都已经于相对成熟，而iOS应用漏洞审计系统在国内还是比较欠缺的，一些公司可能内部有开发，只是未公开。&lt;/p&gt;
&lt;p&gt;此前腾讯iOS产品也是未能做有效的上线前审计，遗留一些安全隐患，因此我们对此专门研发了一款针对iOS应用的自动化审计系统。除了日常的应用审计外，同时也是希望它能够在安全应急上起到辅助的作用。本文主要就是针对它使用到的一些技术进行浅谈，以希望可以起到抛砖引玉的效果。&lt;/p&gt;
&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;p&gt;• Mac OS X 10.11&lt;br&gt;• Python 开发环境：PyCharm5&lt;br&gt;• Objective-C 开发环境：Xcode7 + iOSOpenDev&lt;br&gt;• 支持 iOS 8.1 以上的越狱系统&lt;/p&gt;
&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h3&gt;&lt;p&gt;整个iOS应用审计系统主要分两部分：静态审计和动态审计【图2】。静态审计包括Bin文件漏洞审计、第三方库检测以及私有API静态检测等功能；动态审计主要通过Hook去监控网络数据包、SSL中间人检测，以及实现ipa的动态安装和运行、文件上传下载等基本功能。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图2：iOS应用审计系统架构图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;基本审计功能&quot;&gt;&lt;a href=&quot;#基本审计功能&quot; class=&quot;headerlink&quot; title=&quot;基本审计功能&quot;&gt;&lt;/a&gt;基本审计功能&lt;/h3&gt;&lt;p&gt;通过静态审计提取基本的文件信息，并以较好的展示效果输出到报告页面上【图3】，也方便后面的二次扫描，以及鉴别不同的ipa文件。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;    图3：文件信息及漏洞统计图&lt;br&gt;    &lt;/center&gt;

&lt;p&gt;在静态审计里最重要的就是Bin文件漏洞检测功能【图4】，像编译选项和使用函数的信息，借助otool即可很容易检测。&lt;/p&gt;
&lt;p&gt;应用漏洞检测主要针对目前已公开的漏洞/恶意后门进行检测，比如XcodeGhost、iBackDoor、AFNetworking等等，先通过分析样本来制定静态检测规则，多数通过关键字符串即可检测出，而对于AFNetworking SSL中间人漏洞，笔者是采用检测漏洞相关的ARM指令。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图4：BIN静态审计功能&lt;br&gt;&lt;/center&gt;

&lt;p&gt;下面是AFNetworking某个漏洞版本的ARM指令【图5】，不同版本会有一定差异，所以还是需要对比多个不同版本，提取通用的检测规则（单纯检测下图标红的ARM指令会误报）。除此之外，还要对比修复版本的代码，避免误报。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图5：AFNetworking SSL 中间人漏洞代码&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于iOS应用为了兼容性，都会包含32位与64位程序，很少会单纯只使用64位编译的应用，所以检测时可以暂不用考虑64位问题。&lt;/p&gt;
&lt;p&gt;除图4上的应用漏洞之外，还支持自定义审计功能【图6】，主要是为了在应急时，可以及时即时制定规则进行批量扫描【图7】，我们也专门针对公司业务情况添加了一些规则，此处就不赘述了。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图6：自定义审计规则示例（非实际运用规则）&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图7：应用批量扫描&lt;br&gt;&lt;/center&gt;

&lt;p&gt;上面【图6】只是一份示例的规则，并非在系统上实际运用的，只是作为演示，它支持二进制、数据库及文件的扫描，里面可以使用linux命令去辅助检测，当然你也可以笑称它为“后门”。&lt;/p&gt;
&lt;p&gt;另外，数据存储安全和网络传输安全都在动态审计部分完成，审计规则在自定义规则里面定义的。其中网络实时检测功能主要是基于Hook实现的，针对发包函数进行监控，比如NSURLConnection:sendSynchronousRequest 或者UIApplication:openURL等等【图8】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图8：通过Hook网络相关API实现监听&lt;br&gt;&lt;/center&gt;

&lt;p&gt;程序会实时监听HTTP、HTTPS甚至是自定义伪协议的请求，而且为方便后续测试会记录cookie值，然后完整地输出到报告上【图9】，后续也可以把它导入扫描器作WEB漏洞扫描。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图9：网络请求实时监控&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于著名第三方库AFNetwork经常被使用，因此笔者也增加了对它的网络监控。&lt;/p&gt;
&lt;h3 id=&quot;UI界面遍历&quot;&gt;&lt;a href=&quot;#UI界面遍历&quot; class=&quot;headerlink&quot; title=&quot;UI界面遍历&quot;&gt;&lt;/a&gt;UI界面遍历&lt;/h3&gt;&lt;p&gt;为了触发更多地程序逻辑，增加代码覆盖率，在动态检测时，就需要去遍历各个UI界面。对于这种情况，我们选用appcrawler工具进行UI遍历，它同时支持Android与iOS应用，而在其提供的config.json配置文件里面，可根据自身需要去灵活配置，比如遍历的深度，匹配文本框关键字进行输入（如登录帐号），这些规则需要自己多测试应用去完善它。【图10】是遍历微信UI的部分截图效果，由于只遍历了10分钟，所以截图相对较少一些，整体效果还是不错的。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图10：遍历微信UI的部分截图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;SSL中间人检测&quot;&gt;&lt;a href=&quot;#SSL中间人检测&quot; class=&quot;headerlink&quot; title=&quot;SSL中间人检测&quot;&gt;&lt;/a&gt;SSL中间人检测&lt;/h3&gt;&lt;p&gt;在移动APP中，无论是Android还是iOS平台，SSL中间人攻击都是一种常见漏洞，经常是由于证书校验不严谨导致的。虽然是中间人攻击，但在一定场景下还可以造成很大的危害，尤其是金融场所里面的WiFi，常常是最好的攻击点。&lt;/p&gt;
&lt;p&gt;针对SSL中间人漏洞，如果采用静态代码检测，可能误报率会比较高，笔者在此处是通过Hook做静态检测，在运行时注入证书异常站点的请求，然后再去检测是否访问成功【图11】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图11：SSL中间人动态检测原理&lt;br&gt;&lt;/center&gt;

&lt;p&gt;以QQ浏览器HD为例，注入异常站点后会弹出【图12】中的提示，说明不会自动连接此站点，因此不存在SSL中间人漏洞。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图12：检测效果&lt;br&gt;&lt;/center&gt;

&lt;p&gt;不过对于使用第三方SSL库的应用可能会漏报，另一种替代方案是使用证书替换的检测方式，不过这会导致访问异常，最终可能导致应用无法正常使用，后续的审计动作也将被中止。各有各的弊端，可以暂时两者分开地使用，如果各位同仁有更好的检测方法，也欢迎在下面回复讨论。&lt;/p&gt;
&lt;h3 id=&quot;私有API检测&quot;&gt;&lt;a href=&quot;#私有API检测&quot; class=&quot;headerlink&quot; title=&quot;私有API检测&quot;&gt;&lt;/a&gt;私有API检测&lt;/h3&gt;&lt;p&gt;虽说调用私有API不算漏洞，但因为苹果严格的审计机制，一经发现调用私有API会直接下架应用，对业务影响也是很大。&lt;/p&gt;
&lt;p&gt;另外从安全角度看，如果应用的漏洞修复版本需要发布，但多次因为调用私有API也被苹果官方拒绝上架，就会导致漏洞无法得到及时的修复。&lt;/p&gt;
&lt;p&gt;检测私有API的难点主要在于苹果未公开这份私有API列表，因此在检测时只能自己提取，但也导致会因此存在一定的漏报和误报的情况。&lt;/p&gt;
&lt;p&gt;网络上有个提取私有API的公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私有的api ＝ (class-dump Framework下的库生成的头文件中的api - (Framework下的头文件里的api = 有文档的api + 没有文档的api)) + PrivateFramework下的api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实这是不完全正确的，如果你单纯按照这种方法提取，会出现很高的误报和漏报情况。因为私有类里面有公有API，公有类里面有私有API。但上面的公式是提取私有API的第一步，之后就需要再做很多提取规则逐步完善，比如一些纯小写字母的api，大多是一些c库函数，可以再过滤一大批。&lt;/p&gt;
&lt;p&gt;这种没有什么特别好的方法，只能多扫应用，根据结果多优化规则。&lt;/p&gt;
&lt;p&gt;Github上面也有用于检测私有API的开源项目，但基本上没有一个可以满足测试需求的，误报率和漏报率太高，而且支持iOS版本较低。iOS9 SDK以上版本，也不能直接使用classdump去提取头文件，因为应用的符号表已经被去掉这些信息，笔者是采用nm去解决的。&lt;/p&gt;
&lt;p&gt;最初笔者是打算把动态检测私有API也做了，但后面考虑审计系统主要是面向公司内部，因此不存在那种恶意绕过私有API检测的行为，然后就把写了一半的动态检测功能给注释掉。&lt;/p&gt;
&lt;p&gt;如果读者要做动态检测私有API，那么误报和性能就是首要考虑的问题。hook太深，则消息过多，时耗过多，而且有些是系统自身调用的私有API，就无法正确区分是应用还是系统调用的；hook太浅，又达不到效果，没法监测到私有API的行为。这里抛张动态检测的半成品截图【图13】，大家可以继续发挥。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图13：动态检测私有API时的Hook日志（半成品）&lt;br&gt;&lt;/center&gt;

&lt;p&gt;为了提高静态检测的准确率，笔者就把静态拼接API字符串的情况也支持【图14】，因为正常情况下，两个字符串都是相邻的，组合起来再与私有API库作比较即可。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/14.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图14：字符串拼接绕过私有API检测&lt;br&gt;&lt;/center&gt;

&lt;p&gt;好了，说了这么多，直接上一张实战图。下面【图15】是针对去年曝光的一款iOS病毒TinyV做的检测（感谢ClaudXiao分享的样本），可以看到它调用LSApplicationWorkspace和MobileInstallation中的私有API去查看安装程序列表，安装和卸载应用。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/15.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图15：iOS病毒TinyV的私有API检测结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;第三方库检测&quot;&gt;&lt;a href=&quot;#第三方库检测&quot; class=&quot;headerlink&quot; title=&quot;第三方库检测&quot;&gt;&lt;/a&gt;第三方库检测&lt;/h3&gt;&lt;p&gt;有时外界会曝光一些第三方开源库的漏洞，影响经常是跨平台的，包括iOS应用。因此我们专门收集上百个常用第三方库信息作为检测内容，在日常审计应用时，能够维护一份哪些公司产品使用到哪些第三方库的信息【图16】，在外部曝光漏洞后，我们可以快速定位受影响的产品及危害范围。&lt;/p&gt;
&lt;p&gt;不过目前缺乏相应的版本信息，因为有些库编译出来后是不带版本字符串，需要针对不同版本作指纹库检测，也是个不少工程量，如果业界有好心人愿意造服群众的话，可以试试做个第三方库的指纹库出来。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图16：第三方库检测&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;开放端口检测&quot;&gt;&lt;a href=&quot;#开放端口检测&quot; class=&quot;headerlink&quot; title=&quot;开放端口检测&quot;&gt;&lt;/a&gt;开放端口检测&lt;/h3&gt;&lt;p&gt;之所以做开放端口检测这个功能，主要是基于此前曝光的“WormHole”漏洞，此类因开放端口导致的安全漏洞，在Android应用上已经有过不少案例，搜索乌云就能找到。&lt;/p&gt;
&lt;p&gt;检测开放端口其实一条命令就足够了，然后定期轮循即可：&lt;br&gt;lsof -i | grep ‘“+appname+”‘ | awk ‘{print $1,$8,$9,$10}’&lt;/p&gt;
&lt;p&gt;直接上效果图，如【图17】所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图17：开放端口审计&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;审计效果&quot;&gt;&lt;a href=&quot;#审计效果&quot; class=&quot;headerlink&quot; title=&quot;审计效果&quot;&gt;&lt;/a&gt;审计效果&lt;/h3&gt;&lt;p&gt;我们随机抽取了公司60款iOS应用，审计后共发现10款产品存在中高危漏洞【图18】，其中主要是SSL中间人漏洞和授权密钥泄露漏洞居多。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图18：审计结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h3&gt;&lt;p&gt;本文主要针对笔者在开发iOS应用自动审计系统时运用的一些技术作个分享，希望能起到抛砖引玉的作用。系统本身也还有一些有待完善的地方，欢迎各位业界同仁共同交流探讨。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="iOS" scheme="http://riusksk.github.io/tags/iOS/"/>
    
      <category term="安全审计" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>迁移技术文章</title>
    <link href="http://riusksk.github.io/2016/06/17/add-articles/"/>
    <id>http://riusksk.github.io/2016/06/17/add-articles/</id>
    <published>2016-06-17T08:11:06.000Z</published>
    <updated>2016-06-17T08:24:10.000Z</updated>
    
    <content type="html">&lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使用，使用 &lt;a href=&quot;http://riusksk.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me&lt;/a&gt; 解析到 &lt;a href=&quot;http://riusksk.github.io&quot;&gt;http://riusksk.github.io&lt;/a&gt; ，似乎就不用备案了。&lt;br&gt;近日，我已在本博客上添加RSS订阅和评论功能，欢迎大家订阅和交流。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>PHDays安全大会议题分析</title>
    <link href="http://riusksk.github.io/2016/05/25/PHDays-2016/"/>
    <id>http://riusksk.github.io/2016/05/25/PHDays-2016/</id>
    <published>2016-05-25T02:09:17.000Z</published>
    <updated>2016-06-24T14:47:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot;&gt;&lt;a href=&quot;#2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot; class=&quot;headerlink&quot; title=&quot;2、《Waf.js：How to Protect Web Applications using JavaScript》&quot;&gt;&lt;/a&gt;2、《Waf.js：How to Protect Web Applications using JavaScript》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641534353049.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用Javascript代码去防御DOM XSS、CSRF、点击劫持，以及其它攻击环境检测（Beef、Xbackdoor、Acunetix等等）的工具，与Server组使用js防御dom xss的思路类似，只是多了其它几项功能。文档下载：&lt;a href=&quot;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot;&gt;&lt;a href=&quot;#3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot; class=&quot;headerlink&quot; title=&quot;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&quot;&gt;&lt;/a&gt;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641573779613.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍Google的分布式Fuzzing系统——CluterFuzz，采用集群服务器进行分布式Fuzzing，大概4000多台机器，不排除使用虚拟机的情况。议题介绍了一些Fuzz变异算法、漏洞类型识别、代码覆盖率问题、自动化精简样本，以及各种sanitizers功能的使用，比较常用的还是Address Sanitizer，且各平台通用。&lt;/p&gt;
&lt;h3 id=&quot;4、《Web-Application-Firewall-Bypassing》&quot;&gt;&lt;a href=&quot;#4、《Web-Application-Firewall-Bypassing》&quot; class=&quot;headerlink&quot; title=&quot;4、《Web Application Firewall Bypassing》&quot;&gt;&lt;/a&gt;4、《Web Application Firewall Bypassing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641659037475.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结绕过AWF的三大策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1、预处理利用&lt;/strong&gt;：即设法绕过WAF的输入验证，比如HTTP头（X-Originating-IP、X-Forwarded-For、X-Remote-IP、X-Remote-Addr）的处理，就曾多次被用于绕过公司WAF的SQL注入防护，或者HTTP方法头GET/POST的篡改、换行符的处理等等方式；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2、致阻断失配&lt;/strong&gt;：利用前后端数据处理的差异，使得无法匹配到黑名单里的规则，通常结合一些参数污染、字符编码、注释符等多种方式绕过；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3、规则集绕过&lt;/strong&gt;：通过暴力枚举出WAF的拦截规则，或者逆向WAF程序获取规则，然后再设法绕过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot;&gt;&lt;a href=&quot;#5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot; class=&quot;headerlink&quot; title=&quot;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&quot;&gt;&lt;/a&gt;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642298519901.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于当前移动通讯网络采用许多过旧技术，导致一些漏洞遗留其中，主要是针对SS7第7号信令系统的漏洞情况进行统计，其中主要三大威胁是：拒绝服务、信息泄露（比如短信、通话内容、IMEI、地理位置等等）、欺诈。并现场演示短信窃取，实现社交帐号的盗取，并成功获取历史聊天记录。&lt;/p&gt;
&lt;h3 id=&quot;6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot;&gt;&lt;a href=&quot;#6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot; class=&quot;headerlink&quot; title=&quot;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&quot;&gt;&lt;/a&gt;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642478498497.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;作者分享了一些关于医疗设备攻击的思路，比如通过网络空间搜索引擎Shodan/Censys/Maltego去查找网络上的医疗设备，介绍如何通过设备指纹去查找医疗设备，目前很多医疗设备存在允许未授权的访问，特别容易导致敏感信息泄露，甚至允许远程操作医疗设备，可能影响到患者的健康问题，最后他提供一些针对医疗设备攻击的防御方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="PHDays" scheme="http://riusksk.github.io/tags/PHDays/"/>
    
  </entry>
  
  <entry>
    <title>CanSecWest 2016 大会议题分析</title>
    <link href="http://riusksk.github.io/2016/04/13/CanSecWest_2016/"/>
    <id>http://riusksk.github.io/2016/04/13/CanSecWest_2016/</id>
    <published>2016-04-13T03:47:32.000Z</published>
    <updated>2016-06-24T14:48:30.000Z</updated>
    
    <content type="html">&lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot;&gt;&lt;a href=&quot;#2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot; class=&quot;headerlink&quot; title=&quot;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&quot;&gt;&lt;/a&gt;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605302948646.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯科恩实验室分享的关于OSX/iOS内核驱动漏洞挖掘的方法，主要介绍了两种Fuzzing策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过Hook IOKit API（IOConnectMapMemory/IOConnectUnmapMemory/IOConnectCallMethod/IOConnectCallScalarMethod），随机变异参数值&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过脚本自动提取驱动的接口函数与参数信息，然后发送畸形数据去调用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后列举一个竞争条件漏洞实例，介绍漏洞成因与利用方法。&lt;/p&gt;
&lt;h3 id=&quot;3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot;&gt;&lt;a href=&quot;#3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&quot;&gt;&lt;/a&gt;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605312840771.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享自动生成利用代码的工具AEG，主要针对混合读写操作导致的漏洞，通过PIN进行指令插桩，利用符号执行（Symbolic Execution）和混合执行（Concolic Execution）一块去实现程序的动态分析与利用代码生成。&lt;br&gt;&lt;strong&gt;PS：整体思路跟以往挖掘漏洞中用于分析代码执行路径，增加代码覆盖率的思路一致，用在漏洞挖掘与分析上比较可行，但自动生成利用代码估计效果不好。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot;&gt;&lt;a href=&quot;#4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot; class=&quot;headerlink&quot; title=&quot;4、《Pwn a Nexus device with a single vulnerability》&quot;&gt;&lt;/a&gt;4、《Pwn a Nexus device with a single vulnerability》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605317938560.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自360的分享，是其在Pwn2Own Mobile 2015上用于攻破Nexus手机的chrome浏览器漏洞CVE-2015-6764。议题对该漏洞的成因、利用和补丁代码都进行了分析，是一个越界访问漏洞，通过越界读写内存造成地址泄露，从而再绕过ASLR。该议题提到的利用方式（&lt;strong&gt;RCE2UXSS、UXSS2RCE&lt;/strong&gt;）比较奇妙,在利用漏洞获取执行代码的权限后，&lt;strong&gt;通过hook ScriptLoader::executeScript去注入Javascript代码，然后在 &lt;a href=&quot;https://play.goolge.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://play.goolge.com&lt;/a&gt; 域下通过JS去安装任意APP&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;5、《BadWinmail-and-Email-Security-on-Outlook》&quot;&gt;&lt;a href=&quot;#5、《BadWinmail-and-Email-Security-on-Outlook》&quot; class=&quot;headerlink&quot; title=&quot;5、《BadWinmail and Email Security on Outlook》&quot;&gt;&lt;/a&gt;5、《BadWinmail and Email Security on Outlook》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605992256618.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在msg文件格式中嵌入OLE对象，然后更改CLSID为Flash控件或者PDF控件，利用这些控件的漏洞直接实现利用。另外还可传输不确定封装格式 (TNEF，附件名为winmail.dat) ，它也支持OLE，然后采用上述相同攻击方法实现利用。用户在使用Outlook打开上述邮件时即可直接执行任意代码。&lt;/p&gt;
&lt;h3 id=&quot;6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot;&gt;&lt;a href=&quot;#6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot; class=&quot;headerlink&quot; title=&quot;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&quot;&gt;&lt;/a&gt;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606052304309.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述利用操作系统的分页机制去绕过各种内核安全机制，比如DEP、KASLR、NULL解引用保护、SMEP等等，主要针对Linux与Windows，并提供有demo代码。传统方法可能更多的是借助信息泄露漏洞，利用泄露地址去绕过上述保护，利用他们提供的方法甚至可允许非特权用户dump到内核访问的物理内存。主要利用以下缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页表位于固定虚拟地址（Windows）；&lt;/li&gt;
&lt;li&gt;分页表可写(Windows);&lt;/li&gt;
&lt;li&gt;PDPTs、PDs与PTs位于固定虚拟地址（Linux）;&lt;/li&gt;
&lt;li&gt;分页结构可写（Linux)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如Windows上，可以利用任意写地址漏洞去将PTE分页表（固定地址）中的指针修改为HAL堆上的物理内存地址,HAL堆上包含有一堆函数指针，包括hal!HalpApicRequestInterrupt函数，最后结合ROP就可以禁用SMEP保护，最终获得系统权限。还有其它页目录堆喷的利用方式，Linux上稍有不同，但攻击思路类似。&lt;/p&gt;
&lt;h3 id=&quot;7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot;&gt;&lt;a href=&quot;#7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot; class=&quot;headerlink&quot; title=&quot;7、《Execute My Packet (Exodus of Shells from a Firewall)》&quot;&gt;&lt;/a&gt;7、《Execute My Packet (Exodus of Shells from a Firewall)》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606157550780.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cisco ASA Adaptive Security Appliance是个IP路由器，具备防火墙、反病毒、入侵检测和VPN服务器的功能，它的IKE(网络密钥交换)版本v1和v2存在堆溢出漏洞（CVE-2016-1287），利用漏洞允许未授权的用户实现远程代码执行。该议题分析了导致漏洞的成因以及利用方法，目前官方已修复此漏洞。&lt;/p&gt;
&lt;h3 id=&quot;8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot;&gt;&lt;a href=&quot;#8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot; class=&quot;headerlink&quot; title=&quot;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&quot;&gt;&lt;/a&gt;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606192691752.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者在不借助地址泄露的情况下，使用“崩溃恢复”（Crash-Resistant）功能去绕过DEP、ASLR、CFG等多个安全机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过内存扫描获取地址&lt;/strong&gt;：结合堆喷射，利用漏洞篡改数据类型相关（比如整数）的1个字节，从而伪造出JS对象，接着在web worker中使用setInerval函数去使用伪造的JS对象，这里使用setInerval是为了使用Crash-Resistant功能，有了JS对象就有了可控的虚表指针，再通过扫描内存获取TEB（线程环境块）基址、DLL基址等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建Blob对象来绕过EAF+&lt;/strong&gt;：另外还演示了如何绕过EMEt 5.5 的EAF和EAF+保护，作者通过创建Blob对象来解决，因为它会调用到未在EAF+黑名单里面的ntdll模块，进而解决导出表的安全限制问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用函数链（Function Chaining）绕过CFG&lt;/strong&gt;：在控制虚表函数指针后，利用5个未被EMET禁用的导出函数（利用networkx 和miasm2工具去搜索的），依次调用组成一个函数调用链，最终调用LdrInitShimEngineDynamic([fakeStr + 0x8] + 0x20, [fakeStr] + 0x18)，这里的两个参数都是可控的，从而实现任意DLL的加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Virtualization-Device-Emulator-Testing-Technology》&quot;&gt;&lt;a href=&quot;#9、《Virtualization-Device-Emulator-Testing-Technology》&quot; class=&quot;headerlink&quot; title=&quot;9、《Virtualization Device Emulator Testing Technology》&quot;&gt;&lt;/a&gt;9、《Virtualization Device Emulator Testing Technology》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606253312145.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过分析虚拟设备模拟器的攻击面，主要针对各个硬件虚拟组件进行Fuzzing，通过系统hook模块去获取各个设备模拟器，然后从服务端向各个模拟器客户端发送畸形数据，再根据客户端返回的日志进行分析。&lt;/p&gt;
&lt;h3 id=&quot;10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot;&gt;&lt;a href=&quot;#10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot; class=&quot;headerlink&quot; title=&quot;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&quot;&gt;&lt;/a&gt;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606908008051.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hardsploit项目是一个硬件安全审计框架，支持多种硬件接口，比如I2C, JTAG, SPI, PARALLEL, UART，主要应用在物联网产品的安全审计上。通过工具可以提取存储在芯片上各种数据，读写以及嗅探传输数据，便于后续作分析，而且还提供有界面、API接口等等功能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CanSecWest" scheme="http://riusksk.github.io/tags/CanSecWest/"/>
    
  </entry>
  
  <entry>
    <title>BlackHat Asia 2016 大会议题分析报告</title>
    <link href="http://riusksk.github.io/2016/04/05/bh-asia-2016/"/>
    <id>http://riusksk.github.io/2016/04/05/bh-asia-2016/</id>
    <published>2016-04-05T02:27:11.000Z</published>
    <updated>2016-06-24T14:48:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot;&gt;&lt;a href=&quot;#2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot; class=&quot;headerlink&quot; title=&quot;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&quot;&gt;&lt;/a&gt;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598369926110.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;东北大学（美国）的4位安全研究员开发出一款叫CrossFire的轻量级静态分析工具，用于自动化挖掘Firefox插件漏洞（对方称为”Externsion-reuse“漏洞），其实就是利用插件原有的敏感功能去执行恶意行为，比如窃取cookie、历史记录等敏感信息。Firefox插件是通过Javascript调用Friefox提供的API实现的附加功能，因此CrossFire是通过静态分析插件的JS代码，构建出抽象语法树，然后跟收集的敏感API数据库做综合分析，API数据库就是定义输入源（source）和输出目标（sink）的内容，然后基于污点传播的思路去做判断，如果检测到漏洞还可以根据原定规则生成exploit。&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;:==基于污点传播的静态分析思路，偏学术研究，估计误报会比较多，往往还需要人工介入排查，效果不见得会很好。==&lt;/p&gt;
&lt;h3 id=&quot;3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot;&gt;&lt;a href=&quot;#3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&quot;&gt;&lt;/a&gt;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598401954245.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于动态二进制插桩的检测与逃逸方法，用来对抗程序被动态分析,主要针对PIN与DynamoRIO两款插桩工具的特点进行分析。&lt;br&gt;&lt;strong&gt;【检测方法】&lt;/strong&gt;：分主动与被动检测方案，主动检测包括扩展的指令代码（Xmode Code，会导致栈桢大小不同）、代码缓存、TLS和异常上下文，而被动检测包括未支持的指令和行为功能。&lt;br&gt;&lt;strong&gt;【逃逸方法】&lt;/strong&gt;：通过代码缓存进行自修改，以及一些栈、TLS和其它DBI框架特有的数据结构，比如.charmve段、BrokerClient回调函数等等方法入手。&lt;/p&gt;
&lt;h3 id=&quot;4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot;&gt;&lt;a href=&quot;#4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot; class=&quot;headerlink&quot; title=&quot;4、《Bypassing Browser Security Policies For Fun And Profit》&quot;&gt;&lt;/a&gt;4、《Bypassing Browser Security Policies For Fun And Profit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598412838122.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述Android浏览器绕过同源策略的UXSS漏洞，都是以一些历史漏洞为例讲解漏洞的利用方式（含PoC）,包括窃取cookie、读取本地文件，以及绕过Google Play的限制实现任意app的安装。==议题主要是对过去漏洞的总结，并没有太多新颖的思路。==&lt;/p&gt;
&lt;h3 id=&quot;5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot;&gt;&lt;a href=&quot;#5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot; class=&quot;headerlink&quot; title=&quot;5、《DSCompromised: A Windows DSC Attack Framework》&quot;&gt;&lt;/a&gt;5、《DSCompromised: A Windows DSC Attack Framework》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598431026382.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DSC（Desired State Configuration，期望状态配置）是Windows上的配置管理平台，它通过向PowerShell语言中引进一个非常简单的语法声明，和一个用来接收和应用这些配置的内置引擎来实现的。DSCompromised即是一款基于PowerShell的工具，用于借助DSC来实现命令控制、恶意软件驻留、回连后门等等功能。该工具已在github上开源：&lt;a href=&quot;https://github.com/matthastings/DSCompromised。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/matthastings/DSCompromised。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot;&gt;&lt;a href=&quot;#6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot; class=&quot;headerlink&quot; title=&quot;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&quot;&gt;&lt;/a&gt;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598447131786.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍iOS企业证书滥用的问题，并列举近年来出现过一些大的iOS安全事件，比如”假面攻击“、WireLurker病毒等等案例，同时讲述其它存在的风险，==比如通过中间人方式去劫持企业的移动设备管理服务器，然后替换请求安装的app，从而使得用户安装被企业证书签名过的恶意软件==。&lt;/p&gt;
&lt;h3 id=&quot;7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot;&gt;&lt;a href=&quot;#7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot; class=&quot;headerlink&quot; title=&quot;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&quot;&gt;&lt;/a&gt;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598465162889.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;列举出当前Linux和PaX(用于安全加固的Linux内核补丁)平台上的ASLR绕过漏洞，共有4个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==低熵==，即地址随机度不够，可被暴力破解，尤其是32位系统&lt;/li&gt;
&lt;li&gt;==非均匀分布随机地址==，呈驼峰型分布，因此有部分地址存在高命中率&lt;/li&gt;
&lt;li&gt;==利用对象间的相对地址偏移实现绕过==，即Offset2Lib攻击方法&lt;/li&gt;
&lt;li&gt;==进程继承缺陷==，所有子进程共享相同的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后提出下一代ASLR防护机制：ASLR-NG，以解决上述问题。&lt;/p&gt;
&lt;h3 id=&quot;8、《Hacking-a-Professional-Drone》&quot;&gt;&lt;a href=&quot;#8、《Hacking-a-Professional-Drone》&quot; class=&quot;headerlink&quot; title=&quot;8、《Hacking a Professional Drone》&quot;&gt;&lt;/a&gt;8、《Hacking a Professional Drone》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598494382580.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;议题中提出两种攻击无人机的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==破解WEP加密的WiFi密码==，直接接入与遥控器通讯；&lt;/li&gt;
&lt;li&gt;==伪造XBee 868LP通讯设备作为中间人==，发送控制指令（逆向Android客户端获得指令序列），从而实现无人机的劫持&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;：==从攻击难度看，此款无人机的安全性比较低，跟大疆无人机存在较大差距==。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot;&gt;&lt;a href=&quot;#9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot; class=&quot;headerlink&quot; title=&quot;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&quot;&gt;&lt;/a&gt;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599077404076.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于KeenLab分享的Android Binder Fuzzing相关的议题，分析出Binder存在的攻击面，然后制定相应的Fuzzing策略。&lt;br&gt;&lt;strong&gt;【亮点一】&lt;/strong&gt;：==从Android C++源码中自动化提取各Binder服务通讯中的 Transaction Code、参数类型及序号、远程服务的调用方式，然后生成json文件，依据它来作参数变异==。如果是闭源的Binder服务，比如华为手机，则通过IDAPython从程序中提取上述信息。&lt;br&gt;&lt;strong&gt;【亮点二】&lt;/strong&gt;：==开启ASAN（AddressSanitize）去编译源码==，加强程序自主的错误检测能力，同时==结合AFL==（Google开发的一款基于源码插桩的Fuzzer工具，曾被用于刷过N多CVE漏洞）去做Fuzzing，==但AFL是基于文件输入的，而Binder未提供此功能，因此KeenLab也未完全实现，这是他们一直在尝试做的工作==。&lt;br&gt;&lt;strong&gt;【亮点三】&lt;/strong&gt;：最后以几个Binder服务漏洞作为实例分析漏洞成因，并分享了CVE-2015-6620 MediaCodecInfo 越界访问漏洞的利用技巧，采用ROP与Heap Spray去绕过NX与ASLR。&lt;/p&gt;
&lt;h3 id=&quot;10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot;&gt;&lt;a href=&quot;#10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot; class=&quot;headerlink&quot; title=&quot;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&quot;&gt;&lt;/a&gt;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599122751659.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Google的reCAPTCHA是一款验证码生成系统，作者分享了一些绕过该验证码系统的方法。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过深度学习为图片注释，使用基于Word2Vec神经网络进行深度学习去为图片标记归类&lt;/li&gt;
&lt;li&gt;收集样本图片、提示信息、注释标签等信息&lt;/li&gt;
&lt;li&gt;通过Google服务（图片搜索、翻译等）获取关键词&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot;&gt;&lt;a href=&quot;#11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot; class=&quot;headerlink&quot; title=&quot;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&quot;&gt;&lt;/a&gt;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599134045481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享物联网产品中常用的无线电安全问题，比如ZigBee、WiFi、GSM、NFC、车钥匙信号等等。介绍分析无线电的硬件、软件工具，以及常见的TOP 10无线安全问题，前3名分别是：未加密通讯、信息重放攻击、密钥交换漏洞。&lt;br&gt;==【PS】:主要是无线电安全的基础知识的概述，工具和常见漏洞类型等等，无实例漏洞分析，里面涉及的内容，预研侧此前大多有分析过。==&lt;/p&gt;
&lt;h3 id=&quot;12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot;&gt;&lt;a href=&quot;#12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot; class=&quot;headerlink&quot; title=&quot;12、《PLC-Blaster：A Worm Living Solely in the PLC》&quot;&gt;&lt;/a&gt;12、《PLC-Blaster：A Worm Living Solely in the PLC》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599217768327.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者开发出一款叫PLC-Blaster的PLC（可编程控制器）蠕虫病毒，以西门子S7-1200版本1到3的PLC为例。西门子PLC使用自定义协议去上传和下载用户程序到PLC，也可以读取PLC相关诊断信息，因此常被用作攻击PLC的手段之一。此款PLC病毒使用SCL编程语言实现的，它会去扫描本地网络，若发现其它PLC则会上传病毒进行感染，实现自我传播的功能。同时它还会主动连接C&amp;amp;C服务器，以实现远程控制功能。&lt;br&gt;==【PS】：难点就在于对S7-1200 PLC的协议分析，只有分析清楚之后，才能使用SCL去实现自我传播的功能。==&lt;/p&gt;
&lt;h3 id=&quot;13、《Practical-New-Developments-In-The-BREACH-Attack》&quot;&gt;&lt;a href=&quot;#13、《Practical-New-Developments-In-The-BREACH-Attack》&quot; class=&quot;headerlink&quot; title=&quot;13、《Practical New Developments In The BREACH Attack》&quot;&gt;&lt;/a&gt;13、《Practical New Developments In The BREACH Attack》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599232870147.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享关于SSL BREACH（超文本自适应压缩浏览器勘测与渗透）攻击方法的新进展，BREACH攻击方法最初是在&lt;a href=&quot;http://breachattack.com/resources/BREACH%20-%20SSL,%20gone%20in%2030%20seconds.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlackHat USA 2013大会&lt;/a&gt;被公布的。作者开发出一款叫”rupture“的攻击框架，并在&lt;a href=&quot;https://github.com/dionyziz/rupture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上开源，用于实现改进后的BREACH攻击，以及针对其它压缩加密算法的攻击。&lt;/p&gt;
&lt;h3 id=&quot;14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot;&gt;&lt;a href=&quot;#14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot; class=&quot;headerlink&quot; title=&quot;14、《The Perl Jam 2: The Camel Strikes Back》&quot;&gt;&lt;/a&gt;14、《The Perl Jam 2: The Camel Strikes Back》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599279606791.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Perl在之前被发现存在多个高危漏洞，而官方一直将问题归结于开发者，作者表示很气愤，认为这个锅不应该由开发者来背。于是，作者分享了他发现的存在于perl核心模块0day漏洞，此漏洞影响所有使用perl开发CGI的程序，可造成远程代码执行。&lt;/p&gt;
&lt;h3 id=&quot;15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot;&gt;&lt;a href=&quot;#15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot; class=&quot;headerlink&quot; title=&quot;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&quot;&gt;&lt;/a&gt;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599250665173.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享==非越狱iOS平台==上的恶意软件相关的议题，列举过去的发生的一些案例，然后总结出一些恶意软件的常用工具和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==重打包==：在正常应用中加入恶意代码，然后重新签名打包&lt;/li&gt;
&lt;li&gt;==Dylib注入==&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cycript&lt;/a&gt;：支持javascript和OC语法的解析工具，可用于调试运行时程序，支持越狱与非越狱平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Theos&lt;/a&gt;：iOS平台上的Hook框架，支持越狱与非越狱平台，但仍需要开发者帐号用于签名，详见：====&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fastlane tools&lt;/a&gt;：iOS开发的持续集成框架，用于实现实现应用发布流程的自动化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后作者开源出一款叫”==&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Su-A-Cyder&lt;/a&gt;==“的iOS恶意软件生成工具，后面作者还打算尝试将Metasploit移植到未越狱的iOS平台上。&lt;/p&gt;
&lt;h3 id=&quot;16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot;&gt;&lt;a href=&quot;#16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot; class=&quot;headerlink&quot; title=&quot;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&quot;&gt;&lt;/a&gt;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599283806453.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者分享了如何利用深度学习与自然语言处理去建立一个基于实时分析海量DNS数据的威胁监控框架，主要用于检测恶意钓鱼的域名站点，并发现了不少伪造Google、Apple、Paypal等知名站点的钓鱼网站。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Team 武器库研究（六）：Mac OSX Rootkit 技术分析</title>
    <link href="http://riusksk.github.io/2015/07/16/Hacking-Team-%E6%AD%A6%E5%99%A8%E5%BA%93%E7%A0%94%E7%A9%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AMac-OSX-Rootkit-%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://riusksk.github.io/2015/07/16/Hacking-Team-武器库研究（六）：Mac-OSX-Rootkit-技术分析/</id>
    <published>2015-07-15T16:00:00.000Z</published>
    <updated>2016-09-27T09:55:22.000Z</updated>
    
    <content type="html">&lt;p&gt;泄露的 driver-macos-master 项目是一个Mac OS X Rootkit 病毒，从源码看，它可能就是当年红极一时的病毒“OSX.Crisis”，因为两者之间连一些函数名都一模一样（比如关键函数hide_proc、hide_kext_osarray，甚至连废弃的hide_kext_leopard也有），逻辑也基本相同。更为牛逼之处的是，Crisis是在2012年爆发的，而该份代码在2009就已完工，想想之间的差距吧，这也再一次证明Hacking Team的技术实力有多强大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##【源码分析】&lt;/p&gt;
&lt;p&gt;下面分析下该 OSX rootkit 技术内幕：&lt;/p&gt;
&lt;p&gt;1、先从入口函数 mchook_start 开始分析，主要就是注册字符设备，然后在文件系统上创建设备节点，常规的驱动入口行为。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对应的字符设备转换表如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;主IOCTL回调函数就下面3个，其中cdev_open和cdev_close为空，整个处理逻辑都包含在cdev_ioctl函数中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、关键看下cdev_ioctl 回调函数，里面包括各种潜伏隐藏的行为。在mchook.h文件头中就定义了一些cdev_ioctl中调用到的函数，从函数名上基本可以推测出该rootkit包含文件隐藏、进程隐藏、内核模块隐藏等功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、进程隐藏：在mac osx上,每个进程的上下文都保存在proc结构中,而在allproc链表中就保存着所有进程proc结构的指针，通过allproc链表移除相应进程的proc结构可隐藏正在运行的进程，下面是关于隐藏进程的代码，位于hide_proc函数中（还有另一个未被调用到的函数hide_proc_l，也是用于实现相同功能）,它相应进程从进程链表和进程Hash表里都移除掉。之前笔者在分析 rubilyn osx rootkit 时，发现它就没有从Hash表里移除进程相关信息，导致可通过“ps -p pid ”命令查找到进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4、内核模块隐藏：早期针对leopard系统的内核模块隐藏是调用 hide_kext_leopard 函数，现在已经不再使用，它只是简单地遍历kmod_info 内核模块链表结构，找到相匹配的模块名，然后将从它链表中踢除，这样当执行kextstat命令时就查看不到隐藏的内核模块，但这种方法现在无效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了支持多个系统版本，后来重写了个 hide_kext_osarray 函数。在“雪豹”苹果系统之后，有个叫sLoadedKexts 的 IOKit OSArray类引用到内核模块列表，不过它并没有导出符号，只要能够找到它，那么就可以对sLoadedKexts 数组进行修改,以达到隐藏内核模块的目的。&lt;/p&gt;
&lt;p&gt;庆幸的是，OSKext::lookupKextWithLoadTag 函数里面引用到sLoadKexts（源码参见：&lt;a href=&quot;http://www.opensource.apple.com/source/xnu/xnu-2782.1.97/libkern/c++/OSKext.cpp），通过它可以定位到sLoadKexts地址。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opensource.apple.com/source/xnu/xnu-2782.1.97/libkern/c++/OSKext.cpp），通过它可以定位到sLoadKexts地址。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;它对应的内核模块位于/System/Library/Extensions/System.kext/PlugIns/LibKern.kext/LibKern，不过当用IDA加载分析时，发现它只有导入表的函数信息，并无实际函数，包括PlugIns目录下的其它驱动也是大多如此。进一步分析，发现这些驱动其实都链接到/System/Library/Kernels/kernel里面，可以发现OSKext::lookupKextWithLoadTag函数对应的符号名为__ZN6OSKext21lookupKextWithLoadTagEj。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过该符号即可找到OSKext::lookupKextWithLoadTag函数，然后开始搜索机器 E8，即CALL指令，从上面的源码看，调用的第一个函数是IORecursiveLockLock，然后跳过call指令（共5字节）进入下一条指令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;再根据32位/64位系统进行区分，对于32位比较简单，call下一条指令就包含有sLoadedKexts地址，下图就是32位系统Snow Leopard 10.6.8的OSKext::lookupKextWithLoadTag函数，由于笔者缺乏该环境，因此图片是从网上扣来的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但对于64位系统会相对繁琐一些，它先找到机器码 48 8B，即mov指令，获取第2个操作数的实际内存地址，即为sLoadKexts，不过笔者在最新版10.10.4上发现必须是在第2个 48 8B才有效，因此该份rookit只适用于低版本的 64位Leopard系统&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;定位到sLoadedKext这个OSArray数组之后， sLoadedKext[OFFT_KEXT_COUNT] ＝  sLoadedKext[0x14] = 元素个数，即已加载的内核模块个数。接着找到最后一个kext模块的kmod_info结构信息，判断该内核模块是否为com.apple.mdworker，若是则将递减模块数量，进而隐藏kext模块，所以实际要隐藏哪个模块就得去更改com.apple.mdworker为相应的模块名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5、文件隐藏：为了对列出文件的相应系统函数进行挂钩，我们需要先对finder和ls所使用的函数进行进程跟踪，在mac上已经用Dtrace代替ktrace，在finder上主要是使用getdirentriesattr函数，而ls主要是使用getdirentries64，下面是用Dtrace分别对finder和ls的进程跟踪情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是查看finder进程2841的调用函数，其中的getdirentriesattr在最新版10.10.4上未发现被调用，以下测试是之前在10.9系统上测试的，但是在10.10.4中getdirentriesattr函数依然在syscall.h中被定义着。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:/usr/include/sys$ sudo dtrace -s ~/Reverse\ engineering/Dtrace/calltrace.d -p 2841 | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: script &amp;apos;/Users/riusksk/Reverse engineering/Dtrace/calltrace.d&amp;apos; matched 573227 probes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1078881          getdirentriesattr:entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1363229         getdirentriesattr:return =1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是ls命令(64位系统)调用的函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此，我们若想在finder和ls中隐藏文件，只要对这两个函数 getdirentriesattr 和 getdirentries64 （32位的为getdirentries）进行挂钩处理即可。在系统调用函数表中，主要是由sysent结构数组构成，每个sysent结构中都包括参数个数sy_narg，执行函数sy_call 这些重要数据。sysent结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了实现对上述系统函数的挂钩，通过修改相应函数sysent结构的sy_call来进行偷梁换柱，关于各系统函数的调用号和宏名均可在 /usr/include/sys/syscall.h中找到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/18.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;回头看源码，发现该rootkit也是对上面这3个函数进行hook：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;看下其中的hook_getdirentiries64函数，其它类似，主要还是移除指定文件的dirent结构，其中dirent结构原型如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/20.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;先调用原始函数，获取真实的文件信息（源码中的direntry对应的其实是dirent结构，在新版版本中这两个结构是独立存在的了）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/21.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后遍历文件链表，找到相匹配的文件名，然后用后一个dirent文件结构覆盖当前找到的dirent文件结构，这样就相当于指定的文件结构信息从链表中移除，从而实现文件隐藏的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/22.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;10、官方另外在testuint目录下放有用于测试的rootkit的工具kextControl.c 和 solveKernel.c。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam06/23.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;【总结】&lt;/p&gt;
&lt;p&gt;实际测试时，由于没有合法签名，导致驱动也无法被正常加载，因此未能作实际测试。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;15/7/17 下午2:23:27.921 com.apple.kextd[44]: ERROR: invalid signature for com.revenge.kext.machooker, will not load&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此次泄露的OSX rootkit 相对还是比较常规的技术，毕竟是2009的源码了，年代久远，但在最新OSX 10.10上稍作修改，应该还是可以用的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;泄露的 driver-macos-master 项目是一个Mac OS X Rootkit 病毒，从源码看，它可能就是当年红极一时的病毒“OSX.Crisis”，因为两者之间连一些函数名都一模一样（比如关键函数hide_proc、hide_kext_osarray，甚至连废
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Hacking Team" scheme="http://riusksk.github.io/tags/Hacking-Team/"/>
    
      <category term="OSX" scheme="http://riusksk.github.io/tags/OSX/"/>
    
      <category term="rootkit" scheme="http://riusksk.github.io/tags/rootkit/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Team 武器库研究（五）：Mac OSX 64位 Shellcode 技术分析</title>
    <link href="http://riusksk.github.io/2015/07/15/Hacking-Team-%E6%AD%A6%E5%99%A8%E5%BA%93%E7%A0%94%E7%A9%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AMac-OSX-64%E4%BD%8D-Shellcode-%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://riusksk.github.io/2015/07/15/Hacking-Team-武器库研究（五）：Mac-OSX-64位-Shellcode-技术分析/</id>
    <published>2015-07-14T16:00:00.000Z</published>
    <updated>2016-09-27T09:44:43.000Z</updated>
    
    <content type="html">&lt;p&gt;在此次泄露的Flash 0Day的利用代码都包含针对Mac OSX 64位系统的利用，以往在网上看到的大多是Windows平台32/64位的利用代码，很少有Mac版的flash利用代码曝光，刚好可以借机分析学习下军用级武器的写法。&lt;/p&gt;
&lt;p&gt;##【源码分析】&lt;/p&gt;
&lt;p&gt;下面以第1个Hacking Team泄露的CVE-2015-5119 Flash 0day 漏洞中的利用代码为例：&lt;/p&gt;
&lt;p&gt;1、内在中暴力搜索Mach-o文件头magic标记 0xfeedfacf（类似搜索windows平台下的PE头MZ标记），它代表64位程序的意思，也是Mac OS X上可执行文件的开头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以用otool或者MachOView查看Mach-o可执行文件格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、在Mach-o文件头之后是加载命令（Load Command）区域，接下来程序搜索用于映射文件中的段到进程内存空间的LC_SEGMENT_64加载命令，遍历每个被加载的段，找到包含段标记为S_SYMBOL_STUBS（代表包含符号信息） 和 S_ATTR_PURE_INSTRUCTIONS （代表包含机器码）的段，然后获取段地址Address、偏移量Offset、Size、Stubs Size、Stubs数量以及Indirect Sym Index（间接符号表索引值）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、找到 _LINKEDIT 段，从中获取相应的虚拟地址和文件偏移，然后互减得到两者之间的偏移量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4、获取LC_SYMTAB加载命令的相关信息，该命令用于指定文件所使用的符号表，找到后分别获取符号表偏移量、符号数、字符串表偏移量、字符串表大小&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5、获取LC_DYSYMTAB加载命令的相关信息，该命令用于指定动态链接库所使用的符号表，找到后获取间接符号表偏移量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6、将前面获取的符号表地址、间接符号表地址和字符串表地址分别加上第3步获取的偏移量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;7、从前面获取的3个值，去字符串表中索引mprotect函数，找到其对应的内存地址，以利用它去真正的shellcode部分赋予可执行权限（这部分与Windows平台上的代码基本一致），以绕过DEP的保护。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;8、前面都是为执行接下来x64 shellcode代码而作的准备，由于vfork所创建的子进程与父进程共享数据，因此可用于检测是否位于沙盒中，若在沙盒中vfrok会执行失效，进而退出执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;9、通过为syscall指定调用号来调用execve函数，以执行”/Applications/Calulator.app/Contents/MacOS/Calculator”打开计算器，然后再调用exit退出子进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;10、设置返回值为int atom类型，左移3位是为了对最后3 bits 清零，因为它代表着atom类型，再加6是为了设置为int atom类型，因为shellcode相当于自定义函数，它是用于替换payload的JIT函数去执行的，最后弹出栈数据，以维持栈平衡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##【总结】&lt;/p&gt;
&lt;p&gt;此次的Mac OSX 64位平台的利用，主要还是先根据Maco-o文件头标记找到flash模块，然后去索引符号表、间接符号表和字符串表，进而找到mprotect函数的地址，将shellcode内存块设置为可执行权限。真正用于弹出计算器的shellcode代码相对比较简单，向syscall传递调用号来执行execve函数，进而打开指定的程序文件Calculator，实现最终的任意代码执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam05/18.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在此次泄露的Flash 0Day的利用代码都包含针对Mac OSX 64位系统的利用，以往在网上看到的大多是Windows平台32/64位的利用代码，很少有Mac版的flash利用代码曝光，刚好可以借机分析学习下军用级武器的写法。&lt;/p&gt;
&lt;p&gt;##【源码分析】&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Hacking Team" scheme="http://riusksk.github.io/tags/Hacking-Team/"/>
    
      <category term="OSX" scheme="http://riusksk.github.io/tags/OSX/"/>
    
      <category term="Shellcode" scheme="http://riusksk.github.io/tags/Shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Team 武器库研究（四）：Flash New 0Day (opaqueBackground UAF)</title>
    <link href="http://riusksk.github.io/2015/07/11/Hacking-Team-%E6%AD%A6%E5%99%A8%E5%BA%93%E7%A0%94%E7%A9%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AFlash-New-0Day-opaqueBackground-UAF/"/>
    <id>http://riusksk.github.io/2015/07/11/Hacking-Team-武器库研究（四）：Flash-New-0Day-opaqueBackground-UAF/</id>
    <published>2015-07-10T16:00:00.000Z</published>
    <updated>2016-09-27T09:35:55.000Z</updated>
    
    <content type="html">&lt;p&gt;周末大清早起来，就看到知道创宇在微博上说，Hacking Team又泄露新的Flash 0Day，在当前最新实测可用。于是笔者下载了一份利用代码，经测试确实在最新版上可利用，目前Adobe官方未发布补丁。此次泄露的0day并没有在泄露的工具库里面，而是在邮件附件中被发现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##【利用代码分析】&lt;/p&gt;
&lt;p&gt;1、这次的漏洞主要出现在AS3 “opaqueBackground” 属性上，它主要用于设置背景颜色。首先创建_ar Array数组，然后用vector.&lt;uint&gt;对象填充。&lt;/uint&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、接着创建TextLine对象，然后设置它的opaqueBackground属性，再自定义valueOf函数，这个函数是触发漏洞的关键，跟前几个flash漏洞类似。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、设置opaqueBackground属性，将_mc（MyClass类型）赋予opaqueBackground，由于数据类型不同，AVM会进行类型转换，此时自定义的valueOf2就会被调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4、调用recreateTextLine函数重建TextLine，导致原分配的TextLine对象内存被释放，但程序依然保留着对它的引用，所以漏洞也是个UAF漏洞。接着重新设置_ar[i].length的长度值（_vLen 大于原始长度值 ），会导致重新分配内存，从而占用已释放的内存，此时里面都是vector.&lt;uint&gt;对象。最后返回_vLen+8的值给_ar[_cnt].opaqueBackground，如果利用成功，它刚好会去篡改某个vector.&lt;uint&gt;对象的长度值，这里是改为106大小。&lt;/uint&gt;&lt;/uint&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5、找到被篡改了长度的vector对象，由于其长度值被更改，允许读取到更大内存空间的数据，再用这个被改的vector去覆盖下一个vector长度为0x40000000，从而获取需要调用的函数地址，绕过ASLR保护。根据不同的系统平台，选择不同的shellcode代码执行，这些跟前2个flash 漏洞的利用模板基本一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6、内存搜索的方式也是采用搜索“MZ”PE头这种暴力方式，再去解析PE文件格式，从导入表中的找到kernel32.dll库，再从其函数名列表里找到VirtualProtect函数，进而找到对应的函数地址进行调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;7、看下ShellWin32.Exec函数，通过内存搜索找到VirtualProtect函数地址，将包含执行calc的shellcode设置为可执行权限，以此绕过DEP保护，并用指向shellcode的指针替换payload对应的JIT函数指针，当调用Payload.call 时则执行的正是shellcode。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam04/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##【总结】&lt;/p&gt;
&lt;p&gt;此次漏洞主要是AS3 opaqueBackground 属性导致的UAF漏洞，依然是valueOf导致的漏洞，此次Hacking Team 曝光的3个漏洞均是valueOf问题，用的基本是同一套利用模板，并且支持多个平台环境，都是采用vector exploit技术去实现信息泄露，从而绕过ASLR，再调用virtualProtect去赋予shellcode可执行权限，以此绕过DEP保护。可以预见未来将会有很多flash exploit 采用类似技术，甚至可能在一些恶意样本中找到Hacking Team的Flash利用模板，未来的利用代码将会更加工程化，通用化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;周末大清早起来，就看到知道创宇在微博上说，Hacking Team又泄露新的Flash 0Day，在当前最新实测可用。于是笔者下载了一份利用代码，经测试确实在最新版上可利用，目前Adobe官方未发布补丁。此次泄露的0day并没有在泄露的工具库里面，而是在邮件附件中被发现的。
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Hacking Team" scheme="http://riusksk.github.io/tags/Hacking-Team/"/>
    
      <category term="Flash" scheme="http://riusksk.github.io/tags/Flash/"/>
    
      <category term="0day" scheme="http://riusksk.github.io/tags/0day/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Team 武器库研究（三）：core-android-audiocapture</title>
    <link href="http://riusksk.github.io/2015/07/10/Hacking-Team-%E6%AD%A6%E5%99%A8%E5%BA%93%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Acore-android-audiocapture/"/>
    <id>http://riusksk.github.io/2015/07/10/Hacking-Team-武器库研究（三）：core-android-audiocapture/</id>
    <published>2015-07-10T04:00:33.000Z</published>
    <updated>2016-09-27T10:00:16.000Z</updated>
    
    <content type="html">&lt;p&gt;泄露的core-android-audiocapture一款Android平台下基于DBI Hook框架的语音窃取工具，可窃取当前国内外流行的即时聊天工具，比如wechat、whatsapp、skype等等。&lt;/p&gt;
&lt;p&gt;##【源码分析】&lt;/p&gt;
&lt;p&gt;1、搜索 mediaserver 进程，然后注入libt.so，并将窃取的语音文件dump到指定目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、查看libt.c源码，其动态链接库的构造函数为my_init，这里参数和返回值都必须为空。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、检测当前的Android系统是否为4.x版本，然后分不同的子版本进行处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4、比如对于Android 4.0版本，会指定mStramType和mname的偏移量，不同系统版本对应的偏移量不同，同时也定义一些将被hook的函数，这些Hook_coverage_x是定义在hijack_func/hooker.h中，对应的函数名在注释代码中已经写得很清楚，主要是Hook Android系统的audio接口提供库libaudiofinger.so里的函数，以用于实现录音（RecordThread）和放音（PlaybackThread）功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5、以Hook回调函数recordTrack_getNextBuffer3_h为例分析下它的修改行为，该函数定义在hijack_func/hooker_thumb.c中，原getNextBuffer获取的缓冲区主要是用于存放录音数据，而录音的开始、停止动作的相关函数也是被hook掉。在recordTrack_getNextBuffer3_h函数中先调用原始函数，得到返回后的结果，然后获取帧大小、采样率、帧数以及原始的AudioBufferProvider::Buffer地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6、创建指定格式的文件名，将语音数据dump出来写入到前面创建的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;7、录音Hook的日志记录如下，其它hook动作类似，此处就不一一分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;8、生成的dump文件，会再调用decode.py去转换成wav语音文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/hackteam03/12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##【结语】&lt;/p&gt;
&lt;p&gt;网上有人说这工具会去解密微信的语音格式，其实它根本没有做这方面的处理，也没必要，因为它Hook的Android系统的Audio库，当你使用一些即时聊天工具进行语音对话时，就会触发放音的函数，此时语音数据早就可以拿到，而decoder.py只是作一些wav的格式化处理，使得dump出来的文件能够转换成可播放的wav文件。在decoder目录下的一些聊天工具目录，只不过是Hacking Team成员在作一些测试而已。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;泄露的core-android-audiocapture一款Android平台下基于DBI Hook框架的语音窃取工具，可窃取当前国内外流行的即时聊天工具，比如wechat、whatsapp、skype等等。&lt;/p&gt;
&lt;p&gt;##【源码分析】&lt;/p&gt;
&lt;p&gt;1、搜索 medi
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android" scheme="http://riusksk.github.io/tags/Android/"/>
    
      <category term="Hacking Team" scheme="http://riusksk.github.io/tags/Hacking-Team/"/>
    
      <category term="Hook" scheme="http://riusksk.github.io/tags/Hook/"/>
    
  </entry>
  
</feed>
