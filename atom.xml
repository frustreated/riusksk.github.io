<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2019-01-27T06:18:10.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊那些黑客小说</title>
    <link href="http://riusksk.github.io/2019/01/27/%E8%81%8A%E8%81%8A%E9%82%A3%E4%BA%9B%E9%BB%91%E5%AE%A2%E5%B0%8F%E8%AF%B4/"/>
    <id>http://riusksk.github.io/2019/01/27/聊聊那些黑客小说/</id>
    <published>2019-01-27T02:24:03.000Z</published>
    <updated>2019-01-27T06:18:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;a href=&quot;#黑客小说：培养对信息安全的兴趣&quot; class=&quot;headerlink&quot; title=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;/a&gt;黑客小说：培养对信息安全的兴趣&lt;/h3&gt;&lt;p&gt;之前在《漏洞战争》的前言里面有提到，鄙人初入象牙塔之时，曾看过多本黑客小说，包括《黑客传说》、《地狱黑客》（后改名为《禁区之门》，参考凯文·米特尼克事迹写的，后来又出了第2部，但好像没写完）、《指间的黑客》等等，后来也因此对安全产生兴趣，入了这行道。&lt;/p&gt;
&lt;p&gt;但，道归道，兴趣归兴趣！&lt;/p&gt;
&lt;p&gt;因为曾有多少人，来了兴趣多年，却未曾自学过。&lt;/p&gt;
&lt;p&gt;“我对安全很感兴趣，求师傅教教我！”这种老套路的提问，大家见得还少吗？&lt;/p&gt;
&lt;p&gt;正如许多人宁愿被动受苦，也不愿主动吃苦学习一样，这个问题在知乎上也曾被热烈讨论过。被动受苦大多不用多动脑，久而久之，身体也会慢慢地适应，也就逐渐被生活、被制度所驯化。&lt;/p&gt;
&lt;p&gt;不过，此处想说的重点是，黑客小说可以培养人们对信息安全的兴趣，而学习的过程本身就是孤独单调的，如有兴趣相伴，则更易独行久远！&lt;/p&gt;
&lt;h3 id=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;a href=&quot;#行业人写小说：有始无终，多半夭折&quot; class=&quot;headerlink&quot; title=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;/a&gt;行业人写小说：有始无终，多半夭折&lt;/h3&gt;&lt;p&gt;安全圈里面其实也有一些人写过黑客小说，不乏某些知名人士，但基本上都是开了个头，却没多久就夭折收场。反正，我是没见过有人写完出版的。&lt;/p&gt;
&lt;p&gt;于是，我上Google搜索了下起点网，通过一些安全专业名词进行搜索，找到几部相关小说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　“第一节操作系统原理、第二节系统及命令详解、第三节溢出漏洞原理、第四节web原理、第五节http协议、tcp/ip协议第六节sql注入原理、上传漏洞、XSS、CSRF……”                           &lt;/p&gt;
&lt;p&gt;​                                                                          ——《别说我是黑客》&lt;/p&gt;
&lt;p&gt;　　过了十多分钟，jsky的界面左侧刷出来许多asp文件和几个目录。右栏则是标注着绿色和红色叹号的几列英文。&lt;br&gt;　　看到扫描结果出来，杨风面带微笑进行下一步操作。他的运气不错，得到了xss与sqlinjection漏洞，这是网站暴露出来的跨站脚本漏洞和sql注入漏洞。&lt;br&gt;　　杨风转到育民高中主页，随手选取了一个注入地址，提交上引号。&lt;br&gt;　　返回错误。&lt;br&gt;　　接着提交and1=1语句。&lt;br&gt;　　返回正常。&lt;br&gt;　　继续提交and1=2语句。&lt;br&gt;　　返回错误。&lt;br&gt;　　杨风做这两步，主要是测试网站程序设计者是否在其中过滤了关键字，如果过滤就不能被注入。&lt;/p&gt;
&lt;p&gt;​                                                                                ——《黑客记事本》&lt;/p&gt;
&lt;p&gt;   ​        “尊敬的孙诚先生，请允许我对你和你的团队–塞伯坦工作室致以敬意。我们的检测人员已经验证了你所寄过来的数据，并证实了ios漏洞的存在，在对你们表示感谢的同时，Zerodium会按照约定，向你的团队支付共计五万四千美元的报酬，并希望你们能尽快将后续数据补完。在邮件中，你们提到找到了ios的两处极为隐秘的高危漏洞，Zerodium上下都对此非常感兴趣。希望能够尽快收到你的回复，报酬方面请不用担心，Zerodium是一个非常有信誉的平台！”&lt;/p&gt;
&lt;p&gt;   ​                                                                      ——《从变形金刚开始》&lt;/p&gt;
&lt;p&gt;   “我明白了，灵根这个电源，就相当于是有着固定编码的反编译器，每个灵根都有一个固定编码，就是所谓的灵根属性。灵根可以把跟自己编码一样的灵气团，进行逆向反编译，把编译好的灵气团分解成单纯由0和1构成的信息流，就是所谓的灵力！”&lt;/p&gt;
&lt;p&gt;   ​                                                                       ——《程序员修真之路》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从教你用jsky黑站（PS：为啥不推荐wvs呢），到黑客穿越、程序员修仙等，各种奇思妙想，在网络小说领域也算是另类的存在。&lt;/p&gt;
&lt;p&gt;但是从这些专业名词看，作者即使不是安全圈的，至少也是IT技术行业的，对一些常见的安全事件、技术名词都比较了解。&lt;/p&gt;
&lt;p&gt;文学与IT技术本身就是两个不同的领域，要同时兼顾就有一定难度。如果算程序员里面写的小说，比较火的，应该是那本《疯狂的程序员》吧！&lt;/p&gt;
&lt;h3 id=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;a href=&quot;#懵懂之美：似懂非懂才是最大的乐趣&quot; class=&quot;headerlink&quot; title=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;/a&gt;懵懂之美：似懂非懂才是最大的乐趣&lt;/h3&gt;&lt;p&gt;我已经很久没看黑客小说，尤其是入了行之后，就更不看了。&lt;/p&gt;
&lt;p&gt;如果要推荐的话，还是开头提到的那3本小说：《黑客传说》、《禁区之门》、《指间的黑客》，不过那是我大学时的口味了，现在重新看也不一定就如当初那般喜欢。&lt;/p&gt;
&lt;p&gt;因为当你对安全行业熟悉后，再去看这些小说的时候，可能就容易较真，少了些许乐趣。&lt;/p&gt;
&lt;p&gt;我当初看上面的小说的时候，其实也还没入门安全，所以看得特别起劲。&lt;/p&gt;
&lt;p&gt;所以，如果要看这类小说，就把那些行业知识都抛诸脑后，享受那当初的懵懂之美，才是读小说的乐趣所在。&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;也许是性格使然，在文字世界里，鄙人老喜欢委婉地批判人和事（俗称：骂人）。不过文学世界里，一千个读者就有一千个哈姆雷特，应该支持下这种多元文化。不然就像娱乐圈里，谁演孙悟空，都要被六小龄童骂一般，少了胸怀，甚至阻碍了行业发展。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养（续）</title>
    <link href="http://riusksk.github.io/2019/01/12/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>http://riusksk.github.io/2019/01/12/安全研究者的自我修养（续）/</id>
    <published>2019-01-12T05:17:58.000Z</published>
    <updated>2019-01-12T09:23:54.000Z</updated>
    
    <content type="html">&lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a&gt;11、工具与方法论沉淀&lt;/h3&gt;&lt;p&gt;虽说代码审计是项必备技能，但终究是项体力活。&lt;/p&gt;
&lt;p&gt;有些漏洞（比如逻辑漏洞）可能就需要人工审计，但也有不少漏洞是可以自动化Fuzzing，一些能自动化或半自动化实现的，尽量写程序自动化。&lt;/p&gt;
&lt;p&gt;因为，纯人工审计终究熬不过年纪，熬不过团队人员的离散变迁，熬不过互联网的快速发展……&lt;/p&gt;
&lt;p&gt;比如，2012年刚开始写《漏洞战争》时，单身一人，从早上8点多起床吃饭，然后开始调代码、看代码，一直奋战到晚上12点，身体无压力。近7年过去了，现在要是这么折腾，身体就要散架了……&lt;/p&gt;
&lt;p&gt;比如，团队里的人分工做不同领域的代码审计，若无工具和方法论沉淀，那么有人走的话，此人对应的领域可能就无法持续产出；若有新人加入，代码审计的技能又不好传承，很多得自己重头来。所以，一直觉得，好的团队应该是，即使人员离散变迁，依然能够独立运作、持续产出的。&lt;/p&gt;
&lt;p&gt;比如，Linux内核在2018年净增87万行代码，很多类似复杂庞大的项目，看代码有时看都看不过来，一般都是针对性地挑模块作代码审计。&lt;/p&gt;
&lt;p&gt;比如，Fuzzer开发里面就有很多共用功能是可以直接做成框架沉淀下来，文件变异、崩溃监控、样本去重精简等等，很多时候有个新的攻击面需要测试，就可以直接在框架的基础上写fuzzer，将会高效很多。下文提到的一个IE漏洞挖掘案例就是基于这思路挖到的。&lt;/p&gt;
&lt;p&gt;我曾经想开发两个漏洞挖掘系统，一个二进制，一个Web，名字都想好了，合称”&lt;strong&gt;冰弓玄箭&lt;/strong&gt;“，但业余一直都没什么时间开发，仅写了个界面，希望2019年能够完成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fz3shymb6cj30z90g2q9e.jpg&quot; alt=&quot;image-20190112143451515&quot;&gt;&lt;/p&gt;
&lt;p&gt;”冰弓“的Logo直接用的是“破甲弓”，感觉很酷……&lt;/p&gt;
&lt;p&gt;再说说方法论，这词虽有点虚，但其实本质上就是一种技术方法的总结而已。&lt;/p&gt;
&lt;p&gt;比如，渗透测试的时候，总有些人每次都能搞到RCE，无论啥网站，完全摆脱“随机挖洞”的命运。多数情况下，他们都会有一套自己测试方法，或者将一些经验转换成工具，测试时就拿自己的工具和以往总结的方法论开搞。&lt;/p&gt;
&lt;p&gt;比如，STRIDE威胁建模本身就是一套方法论，一套简单的风险助记符，当然我这里不是说安全研究要用它，只是举个方法论的例子，它也没有那么万能。&lt;/p&gt;
&lt;p&gt;写这么多，总结起来就一句话：多总结，多沉淀！&lt;/p&gt;
&lt;h3 id=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;a href=&quot;#12、漏洞研究风向标：安全公告&quot; class=&quot;headerlink&quot; title=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;/a&gt;12、漏洞研究风向标：安全公告&lt;/h3&gt;&lt;p&gt;如果大家有关注四大厂商（Google、Microsoft、Apple、Adobe）的安全公告的话，会发现有段时间会出现很多类似漏洞的公告，出现一个新的攻击面之后，一帮研究人员就蜂捅而上狂刷一波。&lt;/p&gt;
&lt;p&gt;这种情况一向是先下手为强，而上文提到的工具和方法论就更显得尤为重要了，否则最后都只能捡剩的。&lt;/p&gt;
&lt;p&gt;比如本周 Microsoft 安全公告出来后，我仔细分析了下，然后下班回家写了个Fuzzer，挂着跑了一天，出来个Crash，再用几分钟成功构造出PoC，实现IE浏览器的远程代码执行，可见也是个品相极佳的神洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fz3u7wx6a8j30jw0bvjsf.jpg&quot; alt=&quot;image-20190112153428430&quot;&gt;&lt;/p&gt;
&lt;p&gt;但不幸的是，我打了1月的补丁后，发现修复了，成功“撞洞”，真的是欲哭无泪……&lt;/p&gt;
&lt;p&gt;但至少证明，通过安全公告寻找新的攻击面，然后挖掘一些类似漏洞，一直是一种高效的漏洞研究方式。&lt;/p&gt;
&lt;h3 id=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;a href=&quot;#13、老一辈研究者都去哪儿了？&quot; class=&quot;headerlink&quot; title=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;/a&gt;13、老一辈研究者都去哪儿了？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz3vtt20n8j30hs0sn428.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近腾讯AILab张潼离职的事传得很火，还有之前各大厂聘请的AI科学家陆续辞职，回归学术界，很多人因此唱起科学家之于科技公司的无用论，主要有以下几点原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;研究成果无法落地为产品&lt;/strong&gt;：做安全研究也是如此，很多事情是无法落地的，圈内很多研究团队都是拿漏洞来打比赛赚影响力，真正能实现为公司营利的（打比赛赚奖金的忽略不计，因为那些都不够给研究者们的工资），我只知道有1个研究团队/实验室今年营利了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长期无产出，KPI压力大&lt;/strong&gt;：研究了很长时间，最后仍一无所获，那KPI咋办、PPT怎么写、晋级怎么答辩。安全行业有句老话来形容安全研究工作，叫“三年不开锅，开锅吃三年”，但多数个人和企业都等不到三年。之前同事说王小云为何能破解出MD5，是因为她在学校里很长时间没搞出东西的时候，领导没找她麻烦，没有KPI压力，以致能够长期专注于此。具体原因我不确定，但学术界自然是没有企业有这般KPI压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务数据不共享&lt;/strong&gt;：业务部门的产品数据基本不太可能共享给实验室作研究的，一般都是实验室以SDK的形式提供给业务用，数据由业务自主控制。这种情况对于安全研究的影响相对较少一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;头两点是多数安全研究者的困境，也跟圈内同行讨论过，下面聊聊这帮老一代“知青”最后都去哪儿了？这里我主要总结一些圈内人的应对方法（其实多数都是转型），具体不作点评，总结为主，也欢迎私信讨论（新注册的公众号已不允许留言）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;坚持研究&lt;/strong&gt;：这帮人主要还是那些研究能力较强的，且有一定研究成果的人，围观下各大实验室就知道个大概，不多说；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型安全产品开发与运营&lt;/strong&gt;：有产品就能解决落地问题，帮助企业解决实际问题，有不少人走这条道，去做威胁情报系统、漏洞扫描器、WAF、云安全产品等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型业务安全&lt;/strong&gt;：跟研究工作差异较大，因为业务安全的主要问题很多时候并非漏洞，而是跟业务产品相关的黑灰产对抗等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自由研究者&lt;/strong&gt;：国外很多此类研究者，靠拿漏洞赏金过活，俗称“赏金猎人”，国内相对少一些，也有一些国内自由研究者后来又进企业做研究的，这里讲的几种转型都可以来回转换，有些人就干过。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创业&lt;/strong&gt;：这里包括安全行业内的创业，也包括那些开淘宝店、奶茶店、服装生意、卖水果的……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;14、个人终究干不过团队&quot;&gt;&lt;a href=&quot;#14、个人终究干不过团队&quot; class=&quot;headerlink&quot; title=&quot;14、个人终究干不过团队&quot;&gt;&lt;/a&gt;14、个人终究干不过团队&lt;/h3&gt;&lt;p&gt;有时想搞的研究太多了，但发现一个人根本搞不过来，需要多人协作才可能完成。但需要多人在研究领域上有交集，否则拉在一块也是各搞各的。&lt;/p&gt;
&lt;p&gt;前篇第7点讲到“进入研究者团队或社区，互相学习”，也是一大影响因素，互相学习也是一种提高效率和产出的方式。&lt;/p&gt;
&lt;p&gt;算了，不多说了！&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;这次真的结束了，没有续篇了。&lt;/p&gt;
&lt;p&gt;思考了很多，总结了很多，有些也是写了删，删了写。&lt;/p&gt;
&lt;p&gt;安全研究领域一直也没人写过这些，出来唠叨几句，也欢迎大家私信讨论。&lt;/p&gt;
&lt;p&gt;最后奉一首酒桌上的《苦行僧》结束本话题，听过这首歌很多个版本，包括原唱，但终究还是觉得视频里这位老哥唱得更具江湖气、更具情感、更具感染力……旁边一老哥听着听着都偷偷抹泪了！&lt;/p&gt;
&lt;p&gt;之所以点这首歌，是因为：&lt;strong&gt;每一个研究者都是独立自行的苦行僧！&lt;/strong&gt;&lt;/p&gt;
&lt;video id=&quot;video&quot; controls preload=&quot;none&quot; poster=&quot;https://pic1.zhimg.com/v2-b1b3fa77c0d2ad60c2322b692b1941c8.jpg&quot;&gt;&lt;br&gt;      &lt;source id=&quot;mp4&quot; src=&quot;https://vdn2.vzuu.com/LD/d9c173e2-2941-11e8-a516-0242ac112a1d.mp4?disable_local_cache=1&amp;bu=com&amp;expiration=1547286438&amp;auth_key=1547286438-0-0-2b1341a2203264d9eebcdede98c1e6c5&amp;f=mp4&amp;v=bsy&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;







</content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养</title>
    <link href="http://riusksk.github.io/2019/01/06/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>http://riusksk.github.io/2019/01/06/安全研究者的自我修养/</id>
    <published>2019-01-06T08:43:31.000Z</published>
    <updated>2019-01-06T12:58:53.000Z</updated>
    
    <content type="html">&lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐今年C3黑客大会上的几个议题&lt;/a&gt;》中提到”Attacking Chrome IPC“这个议题，我觉得该议题最大的亮点是在前半场，作者nedwill是之前在hack2win大赛上因攻破Chrome浏览器而一战成名，他讲了如何训练漏洞研究能力的过程，讲述自己这几年在漏洞研究上的历程和心得，很励志，其建议也非常具有可操作性，值得效仿学习。我反复看了多遍，对其作了一些总结和补充。&lt;/p&gt;
&lt;h3 id=&quot;1、刻意练习10000小时&quot;&gt;&lt;a href=&quot;#1、刻意练习10000小时&quot; class=&quot;headerlink&quot; title=&quot;1、刻意练习10000小时&quot;&gt;&lt;/a&gt;1、刻意练习10000小时&lt;/h3&gt;&lt;p&gt;这份“鸡汤”道理，想必大家都懂，就不解释了，不懂的自行百度，或者去读读《异类》这本经典书籍。&lt;/p&gt;
&lt;p&gt;作者建议以月为单位来制定研究目标，他曾连续花了6个月的时间来研究Chrome Sandbox，但最终一无所获。&lt;/p&gt;
&lt;p&gt;所以，有时坚持了不一定能达到目标，但不坚持，就更没戏了。&lt;/p&gt;
&lt;h3 id=&quot;2、训练挖洞的双技能&quot;&gt;&lt;a href=&quot;#2、训练挖洞的双技能&quot; class=&quot;headerlink&quot; title=&quot;2、训练挖洞的双技能&quot;&gt;&lt;/a&gt;2、训练挖洞的双技能&lt;/h3&gt;&lt;p&gt;（1）看洞：哪里看？历史漏洞的git log、bug报告、代码质量报告等等&lt;/p&gt;
&lt;p&gt;（2）识洞：就是肉眼看代码找漏洞，即代码审计，难点也就是在这上面，训练方法继续往下看&lt;/p&gt;
&lt;h3 id=&quot;3、代码审计训练&quot;&gt;&lt;a href=&quot;#3、代码审计训练&quot; class=&quot;headerlink&quot; title=&quot;3、代码审计训练&quot;&gt;&lt;/a&gt;3、代码审计训练&lt;/h3&gt;&lt;p&gt;（1）根据自己目标定位，寻找相应的历史漏洞案例进行学习，比如要搞chrome就找chrome的历史漏洞&lt;/p&gt;
&lt;p&gt;（2）掌握漏洞所在的模块或子系统，但不看完整的漏洞细节描述，尝试在漏洞版本中找出对应的漏洞&lt;/p&gt;
&lt;p&gt;（3）如果（2）中未能找出漏洞，就去看漏洞细节描述，对比自己的审计过程，看遗漏了哪一步骤&lt;/p&gt;
&lt;p&gt;（4）不断重复上述训练，直至相信：挖洞只是体力消耗，而非能力问题&lt;/p&gt;
&lt;p&gt;这第4点说得，非常励志，因为挖洞挖久了，有时真的容易怀疑自己的能力，目标难度越大，越容易打击人。&lt;/p&gt;
&lt;p&gt;作者第一次训练的漏洞是j00ru（Project Zero成员）的IDA漏洞：&lt;a href=&quot;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、3-5年的训练计划&quot;&gt;&lt;a href=&quot;#4、3-5年的训练计划&quot; class=&quot;headerlink&quot; title=&quot;4、3~5年的训练计划&quot;&gt;&lt;/a&gt;4、3~5年的训练计划&lt;/h3&gt;&lt;p&gt;1~2年：做做 CTF 或 WarGames 题目，网上有很多CTF writeup可以参考学习&lt;/p&gt;
&lt;p&gt;2~3年：简单点的目标，就是找相对容易挖的产品&lt;/p&gt;
&lt;p&gt;3~5年：困难点的目标&lt;/p&gt;
&lt;p&gt;目标的难易程度可以直接参考相应的产品的漏洞奖励计划或私有市场的价格，挑选出一份目标清单，按难易程度排序，逐一去实现它。&lt;/p&gt;
&lt;h3 id=&quot;5、Fuzzing训练&quot;&gt;&lt;a href=&quot;#5、Fuzzing训练&quot; class=&quot;headerlink&quot; title=&quot;5、Fuzzing训练&quot;&gt;&lt;/a&gt;5、Fuzzing训练&lt;/h3&gt;&lt;p&gt;作者代码审计2年后，才开始尝试Fuzzer开发。&lt;/p&gt;
&lt;p&gt;（1）拿已公开的历史漏洞问自己：如何写fuzzer挖掘到此漏洞？&lt;/p&gt;
&lt;p&gt;（2）如果自己不知道此漏洞，那又能够挖掘到呢？&lt;/p&gt;
&lt;p&gt;（3）不断重复训练并改进fuzzer，相信会有更多漏洞被意外发现&lt;/p&gt;
&lt;h3 id=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;a href=&quot;#6、努力往往比运气和天赋更重要&quot; class=&quot;headerlink&quot; title=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;/a&gt;6、努力往往比运气和天赋更重要&lt;/h3&gt;&lt;p&gt;虽然挖洞也需要一定运气和天赋，但多数你认为的挖洞天才，其实只不过是花了比你多100倍，甚至更多的时间在这项技术研究上而已&lt;/p&gt;
&lt;h3 id=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;a href=&quot;#7、进入研究者团队或社区，互相学习&quot; class=&quot;headerlink&quot; title=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;/a&gt;7、进入研究者团队或社区，互相学习&lt;/h3&gt;&lt;p&gt;国外的交流氛围会比国内的更好一些，也更愿意分享。&lt;/p&gt;
&lt;p&gt;很多时候自己的交流圈，大多是一些熟识的同行，或者同事，一般可交流的人还是比较少的。&lt;/p&gt;
&lt;p&gt;经常在网上看到不少人会问，如何认识xx大牛、黑客，但其实很多时候却是：&lt;/p&gt;
&lt;p&gt;努力提高自己的专业能力，圈子最终会吸纳你进去认识更多圈内人。&lt;/p&gt;
&lt;h3 id=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;a href=&quot;#8、建立自己的漏洞信息来源&quot; class=&quot;headerlink&quot; title=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;/a&gt;8、建立自己的漏洞信息来源&lt;/h3&gt;&lt;p&gt;RSS订阅无疑是自己最好的方式，这个需要依赖平时自己去不断收集订阅。&lt;/p&gt;
&lt;p&gt;很多漏洞相关的博文，往往曝露出某些软件新的攻击面，抢占先机就显得尤为重要，比如当年Android stagefirght mp4漏洞、word公式编辑器、adobe图片转换器等等，如果能及时关注并尝试去挖掘，往往可以收获不少漏洞的。&lt;/p&gt;
&lt;h3 id=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;a href=&quot;#9、收集和学习开源的漏洞挖掘工具&quot; class=&quot;headerlink&quot; title=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;/a&gt;9、收集和学习开源的漏洞挖掘工具&lt;/h3&gt;&lt;p&gt;比如afl、honggfuzz、libfuzzer等很多优秀的漏洞挖掘工具，都是值得好好阅读代码，学习其中的fuzzing思路，可以更好地应用到未来的漏洞挖掘研究上。&lt;/p&gt;
&lt;h3 id=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;a href=&quot;#10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot; class=&quot;headerlink&quot; title=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;/a&gt;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&lt;/h3&gt;&lt;p&gt;在《从0到1：开启商业与未来的秘密》一书中有一章叫做“秘密”，漏洞研究可以当作挖掘秘密，为什么人们不探索秘密呢？书中提到4种原因，我觉得同样适用于漏洞研究领域：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;渐进主义&lt;/strong&gt;：把目标定得低一些，更容易取得好成绩；&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;风险规避&lt;/strong&gt;：人们害怕秘密是因为怕犯错，除此之外，可能也担心KPI没法完成，又或者挖洞拿到的奖金又该如何跟公司“分赃”呢？&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;自满&lt;/strong&gt;：很多时候，某些人可以坐享其成，又何必自己去挖掘秘密；国内研究氛围又喜欢搞营销吹牛逼，牛逼吹多了吹大了，有时连自己都信了；&lt;/p&gt;
&lt;p&gt;（4）&lt;strong&gt;扁平化&lt;/strong&gt;：任何一个拥有雄心壮志的人，在涉及某一研究领域之前都会问自己一个问题：如果有可能挖掘到漏洞，难道全球人才库中更加聪明、更加有技术能力的人还没有发现吗？这种怀疑的声音阻止了不少人去探索秘密，从事研究工作，因为身处的世界似乎大到任何个人都无法做出独特的贡献。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;今年因个人原因，已从安全研究转向业务安全，深知研究的不易。&lt;/p&gt;
&lt;p&gt;相信安全领域有秘密的存在，虽会导致黑产的诞生，但肯定也会因此诞生一些优秀的研究者。&lt;/p&gt;
&lt;p&gt;最后以白桦的《船》致谢所有仍在安全研究道路上前进的人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有过多次这样的奇遇，&lt;br&gt;从天堂到地狱只在瞬息之间：&lt;br&gt;每一朵可爱、温柔的浪花&lt;br&gt;都成了突然崛起、随即倾倒的高山。&lt;/p&gt;
&lt;p&gt;每一滴海水都变脸色，&lt;br&gt;刚刚还是那样的美丽、蔚蓝；&lt;br&gt;旋涡纠缠着旋涡，&lt;br&gt;我被抛向高空又投进深渊……&lt;/p&gt;
&lt;p&gt;当时我甚至想到过轻生，&lt;br&gt;眼前一片苦海无边；&lt;br&gt;放弃了希望就像放弃了舵柄，&lt;br&gt;在暴力之下只能沉默和哀叹。&lt;/p&gt;
&lt;p&gt;今天我才有资格嘲笑昨天的自己，&lt;br&gt;为昨天落叶似的惶恐感到羞惭；&lt;br&gt;虚度了多少年华，&lt;br&gt;船身多次被礁石撞穿……&lt;/p&gt;
&lt;p&gt;千万次在大洋里撒网，&lt;br&gt;才捕获到一点点生活的经验，&lt;br&gt;才恍然大悟，&lt;br&gt;啊！道理原是如此浅显；&lt;/p&gt;
&lt;p&gt;你要航行吗&lt;br&gt;必然会有千妖百怪出来阻拦；&lt;br&gt;暴虐的欺凌是它们的游戏，&lt;br&gt;制造灭亡是它们唯一的才干。&lt;/p&gt;
&lt;p&gt;命中注定我要常常和它们相逢，&lt;br&gt;因为我的名字叫做船；&lt;br&gt;面对强大于自身千万倍的对手，&lt;br&gt;能援救自己的只有清醒和勇敢。&lt;/p&gt;
&lt;p&gt;恐惧只能使自己盲目，&lt;br&gt;盲目只能夸大魔鬼的狰狞嘴脸；&lt;br&gt;也许我的样子比它们更可怕，&lt;br&gt;当我以命相拼，一往无前！&lt;/p&gt;
&lt;p&gt;只要我还有一根完整的龙骨，&lt;br&gt;绝不驶进避风的港湾；&lt;br&gt;把生命放在征途上，&lt;br&gt;让勇敢来决定道路的宽窄、长短。&lt;/p&gt;
&lt;p&gt;我完完全全的自由了，&lt;br&gt;船头成为埋葬它们的铁铲；&lt;br&gt;我在波浪中有节奏地跳跃，&lt;br&gt;就像荡着一个巨大的秋千。&lt;/p&gt;
&lt;p&gt;即使它们终于把我撕碎，&lt;br&gt;变成一些残破的木片，&lt;br&gt;我不会沉沦，决不！&lt;br&gt;我还会在浪尖上飞旋。&lt;/p&gt;
&lt;p&gt;后来者还会在残片上认出我，&lt;br&gt;未来的诗人会唱然长叹：&lt;br&gt;“这里有一个幸福的灵魂，&lt;br&gt;它曾经是一艘前进着的航船……”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>推荐今年C3黑客大会上的几个议题</title>
    <link href="http://riusksk.github.io/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/"/>
    <id>http://riusksk.github.io/2018/12/30/推荐今年C3黑客大会上的几个议题/</id>
    <published>2018-12-30T11:06:31.000Z</published>
    <updated>2018-12-30T14:18:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比天朝的要大得多，很多国家的人在上面交流。&lt;/p&gt;
&lt;p&gt;所以，我现在经常混Twitter，当作获取安全资讯的途径，新浪微博就真的当作看新闻的了……&lt;/p&gt;
&lt;h3 id=&quot;德国C3混沌黑客大会&quot;&gt;&lt;a href=&quot;#德国C3混沌黑客大会&quot; class=&quot;headerlink&quot; title=&quot;德国C3混沌黑客大会&quot;&gt;&lt;/a&gt;德国C3混沌黑客大会&lt;/h3&gt;&lt;p&gt;Chaos Communication Congress（C3）大会是每年在德国举办的黑客大会，直译过来就是”混沌通信大会“，圈内通常叫”C3“，今年是第35届，所以叫35c3，今年还有CTF比赛，一些打过pwn2own的人出了一些浏览器实际漏洞的题目，也蛮具有实战价值的。&lt;/p&gt;
&lt;p&gt;每年这大会都会以演讲视频的方式分享出各个议题，以前大多是聚焦在无线电安全，所以一些什么2G\3G\4G短信、电话窃听经常出自该会议。今年也有一些不错的软件安全相关的议题，下面推荐几个鄙人自认为不错的几个议题。&lt;/p&gt;
&lt;h3 id=&quot;From-Zero-to-Zero-Day&quot;&gt;&lt;a href=&quot;#From-Zero-to-Zero-Day&quot; class=&quot;headerlink&quot; title=&quot;From Zero to Zero Day&quot;&gt;&lt;/a&gt;From Zero to Zero Day&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0431o6oj30ju0hxtft.jpg&quot; alt=&quot;image-20181230193447667&quot;&gt;&lt;/p&gt;
&lt;p&gt;大会上有个议题叫 “From Zero to Zero Day”，演讲者是位高中生，讲述他自己如何在一年之内，从无任何安全基础到挖掘到第一枚Edge浏览器远程执行代码漏洞的经历。&lt;/p&gt;
&lt;p&gt;总结来讲就是：&lt;/p&gt;
&lt;p&gt;1、学习编程语言（C/C++、asm等等）&lt;/p&gt;
&lt;p&gt;2、学习操作系统原理&lt;/p&gt;
&lt;p&gt;3、学习常见二进制漏洞原理&lt;/p&gt;
&lt;p&gt;4、打打CTF，写写write-up&lt;/p&gt;
&lt;p&gt;5、学习并实践去分析真实的漏洞案例，就是直接看代码，调代码&lt;/p&gt;
&lt;p&gt;6、不断重复上述练习&lt;/p&gt;
&lt;p&gt;我直接帖几张关键截图，也推荐大家去听听（视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozsxuptzj30hz0aatcu.jpg&quot; alt=&quot;image-20181230192405638&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozt7f18tj30jf0avwjw.jpg&quot; alt=&quot;image-20181230192425929&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fyozqdnwdwj30k30axgoz.jpg&quot; alt=&quot;image-20181230192131880&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozs2o8i2j30k70awtb3.jpg&quot; alt=&quot;image-20181230192320182&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozrme322j30k50atadg.jpg&quot; alt=&quot;image-20181230192254473&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Attack-Chrome-IPC&quot;&gt;&lt;a href=&quot;#Attack-Chrome-IPC&quot; class=&quot;headerlink&quot; title=&quot;Attack Chrome IPC&quot;&gt;&lt;/a&gt;Attack Chrome IPC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/Users/riusksk/Library/Application Support/typora-user-images/image-20181230193950157.png&quot; alt=&quot;image-20181230193950157&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个议题之前作者在韩国PoC大会上讲过，并在网上公布过pdf（&lt;a href=&quot;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&lt;/a&gt; bevx黑客大赛上用于黑掉Chrome浏览器的IPC漏洞，此次C3大会的演讲视频参见：&lt;a href=&quot;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这议题里面讲了作者一些研究二进制漏洞的一些学习和研究的方法，比如做代码审计、打CTF，也介绍了他这几年的安全研究历程，比国内流行晒crash+CVE的方式更接地气。&lt;/p&gt;
&lt;p&gt;最后介绍如何使用 libfuzzer+libprotobuf-mutator去fuzz chrome IPC，并开源fuzzer代码合并到chroium项目中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0grvcxuj30wk0g3aej.jpg&quot; alt=&quot;image-20181230194648886&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Jailbreaking-iOS-From-past-to-present&quot;&gt;&lt;a href=&quot;#Jailbreaking-iOS-From-past-to-present&quot; class=&quot;headerlink&quot; title=&quot;Jailbreaking iOS From past to present&quot;&gt;&lt;/a&gt;Jailbreaking iOS From past to present&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4tb6ppej30lb0c04cb.jpg&quot; alt=&quot;image-20181230202552499&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲iOS越狱发展史的，可以学习到iOS上各种安全机制的原理以及绕过方法，画了不少原理图，通俗易懂不少。对于想了解整个iOS越狱技术发展历程的同学，这确实是份不错的资料。&lt;/p&gt;
&lt;p&gt;作者这次也在推持上放出了pdf和视频：&lt;/p&gt;
&lt;p&gt;pdf: &lt;a href=&quot;https://api.tihmstar.net/35c3slides.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.tihmstar.net/35c3slides.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;video: &lt;a href=&quot;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个议题主要围绕以下几点展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越狱类型（非完美越狱、完美越狱……）&lt;/li&gt;
&lt;li&gt;Exploit mitigations (ASLR, iBoot-level AES, KPP, KTRR, PAC) &lt;/li&gt;
&lt;li&gt;Kernel patches (h3lix) &lt;/li&gt;
&lt;li&gt;Kppless jailbreaks&lt;/li&gt;
&lt;li&gt;越狱的未来趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;The-Layman’s-Guide-to-Zero-Day-Engineering&quot;&gt;&lt;a href=&quot;#The-Layman’s-Guide-to-Zero-Day-Engineering&quot; class=&quot;headerlink&quot; title=&quot;The Layman’s Guide to Zero-Day Engineering&quot;&gt;&lt;/a&gt;The Layman’s Guide to Zero-Day Engineering&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp2wxxr28j30yw0ihgr0.jpg&quot; alt=&quot;image-20181230211151217&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ret2公司分享如何寻找webkit攻击面并fuzz的方法，是基于MozillaSecurity的dharma语法生成框架写的js fuzzer，以及如何借助IDA+&lt;a href=&quot;https://github.com/gaasedelen/lighthouse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lighthouse&lt;/a&gt;开源插件（正是Ret2团队开发的，曾获得过IDA插件比赛的二等奖）来分析代码覆盖率问题。&lt;/p&gt;
&lt;p&gt;除此之外，也介绍如何利用frida去hook mach_msg，用来fuzz WindowServer，最后用WindowServer的漏洞来实现root提权。&lt;/p&gt;
&lt;p&gt;他们在其博客（&lt;a href=&quot;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面还提到长亭的real world ctf比赛了。&lt;/p&gt;
&lt;p&gt;这里有张比较有意思的图，发出来给大伙看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp3j3xqdgj30z00jn4qp.jpg&quot; alt=&quot;image-20181230213304029&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Modern-Windows-Userspace-Exploitation&quot;&gt;&lt;a href=&quot;#Modern-Windows-Userspace-Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Modern Windows Userspace Exploitation&quot;&gt;&lt;/a&gt;Modern Windows Userspace Exploitation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fyp3yvr0eaj30tl0i815k.jpg&quot; alt=&quot;image-20181230214817405&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微软MSRC的人过来分享下windows平台下的一些二进制漏洞利用方法，包括ROP绕过DEP、信息泄露绕过ASLR、绕过CFG、ACG、CIG等等，并现场给了一些演示，不过看起来像是一些CTF赛题，演示的相关代码已放在作者的github上：&lt;a href=&quot;https://github.com/saaramar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/saaramar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是一些利用系统漏洞防御技术的原理与绕过技术的总结，连各种漏洞缓解机制绕过的微软奖励都给大家标注上了，其实有点类似上面Jailbreaking iOS议题的Windows版本。&lt;/p&gt;
&lt;p&gt;最后来张Exploit Mitigations清单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4b42qn5j30rs0hvdir.jpg&quot; alt=&quot;image-20181230215938958&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;后面官方可能还会继续更新演讲视频，可以关注官方twitter（@c3voc_releases）获取消息。&lt;/p&gt;
&lt;p&gt;另外，对于英语不好的同学，不妨下个”腾讯翻译“同声翻译试下，虽然中文翻译没那么准确，但看看显示的英文单词也能知道个大意：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fyp0n9b99lj31400u0b29.jpg&quot; alt=&quot;image-20181230195201468&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年读过的书</title>
    <link href="http://riusksk.github.io/2018/12/28/2018%E5%B9%B4%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    <id>http://riusksk.github.io/2018/12/28/2018年读过的书/</id>
    <published>2018-12-28T12:17:12.000Z</published>
    <updated>2018-12-28T12:17:48.000Z</updated>
    
    <content type="html">&lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这种零碎的时间。&lt;/p&gt;
&lt;p&gt;下面是我今年读过的书单，分别都打个分数，8分及以上的代表推荐，6分以下的别看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《人性的弱点》（6分）&lt;/li&gt;
&lt;li&gt;《代码整洁之道》（8分）&lt;/li&gt;
&lt;li&gt;《如何阅读一本书》（8分）&lt;/li&gt;
&lt;li&gt;《两晋南北朝那些事》（7分）&lt;/li&gt;
&lt;li&gt;《软技能：代码之外的生存指南》（8分）&lt;/li&gt;
&lt;li&gt;《秋叶：如何高效读懂一本书》（6分）&lt;/li&gt;
&lt;li&gt;《横向领导力》（7分）&lt;/li&gt;
&lt;li&gt;《程序员成长课》（8分）&lt;/li&gt;
&lt;li&gt;《英语写作手册》（8分）&lt;/li&gt;
&lt;li&gt;《爆款文案》（7分）&lt;/li&gt;
&lt;li&gt;《运营之光》（8分）&lt;/li&gt;
&lt;li&gt;《威胁建模》（7分）&lt;/li&gt;
&lt;li&gt;《程序员的英语》（7分）&lt;/li&gt;
&lt;li&gt;《冰鉴全鉴》（2分）&lt;/li&gt;
&lt;li&gt;《内向者沟通圣经》（4分）&lt;/li&gt;
&lt;li&gt;《灰度决策》（4分）&lt;/li&gt;
&lt;li&gt;《启功行书技法》（8分）&lt;/li&gt;
&lt;li&gt;《见识》（9分）&lt;/li&gt;
&lt;li&gt;《半小时漫画中国史1、2》（7分）&lt;/li&gt;
&lt;li&gt;《Web安全之机器学习入门》（6分）&lt;/li&gt;
&lt;li&gt;《秦崩》（8分）&lt;/li&gt;
&lt;li&gt;《启功给你讲书法》（8分）&lt;/li&gt;
&lt;li&gt;《思考，快与慢》（10分）&lt;/li&gt;
&lt;li&gt;《三国志》（8分）&lt;/li&gt;
&lt;li&gt;《季羡林谈写作》（6分）&lt;/li&gt;
&lt;li&gt;《Android应用安全防护与逆向分析》（7分）&lt;/li&gt;
&lt;li&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/li&gt;
&lt;li&gt;《非暴力沟通》（9分）&lt;/li&gt;
&lt;li&gt;《系统架构设计》（7分）&lt;/li&gt;
&lt;li&gt;《人人都是产品经理》（8分）&lt;/li&gt;
&lt;li&gt;《漏洞》（7分）&lt;/li&gt;
&lt;li&gt;《风格感觉：21世纪写作指南》（8分）&lt;/li&gt;
&lt;li&gt;《态度》（8分）&lt;/li&gt;
&lt;li&gt;《高效阅读》（5分）&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书》（10分）&lt;/li&gt;
&lt;li&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/li&gt;
&lt;li&gt;《八卦医学史2》（6分）&lt;/li&gt;
&lt;li&gt;《从0到1：开启商业与未来的秘密》（7分）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 所以8分以上的推荐书籍有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《代码整洁之道》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《如何阅读一本书》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《软技能：代码之外的生存指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《程序员成长课》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《英语写作手册》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《运营之光》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功行书技法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《见识》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《秦崩》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功给你讲书法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《思考，快与慢》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《三国志》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《非暴力沟通》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《人人都是产品经理》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《风格感觉：21世纪写作指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《态度》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《写给大家看的设计书》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Bochspwn漏洞挖掘技术深究(2)：内核未初始化漏洞检测</title>
    <link href="http://riusksk.github.io/2018/12/22/bochspwn-reloaded/"/>
    <id>http://riusksk.github.io/2018/12/22/bochspwn-reloaded/</id>
    <published>2018-12-22T00:13:28.000Z</published>
    <updated>2018-12-22T03:21:13.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它采用污点追踪对内核层向用户层泄露数据的行为进行检测。&lt;/p&gt;
&lt;p&gt;关于bochs插桩技术参考&lt;a href=&quot;http://riusksk.me/2018/12/01/bochspwn1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Bochspwn漏洞挖掘技术深究(1)：Double Fetches 检测》&lt;/a&gt;，此处不再赘述。&lt;/p&gt;
&lt;p&gt;直接先看下instrument.h中实现插桩函数有哪些：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs初始化CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs析构CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Bochs每次执行中断操作（软件中断、硬件中断或异常）时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令前的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令后的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs访问线性内存时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// WRMSR指令（写模式定义寄存器）被执行时的回调函数，MSR寄存器数与值作为参数传递给回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化工作&quot;&gt;&lt;a href=&quot;#初始化工作&quot; class=&quot;headerlink&quot; title=&quot;初始化工作&quot;&gt;&lt;/a&gt;初始化工作&lt;/h3&gt;&lt;p&gt;第一篇中讲过&lt;code&gt;bx_instr_initialize&lt;/code&gt;主要用来加载配置信息，针对不同的系统环境设置不同的数据结构偏移地址，用来提供需要的进程/线程等重要信息。在这里它另外增加污点追踪功能的初始化工作：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the taint subsystem.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;taint::initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize helper taint allocations.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::pool_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::pool_taint_alloc, kPoolTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::stack_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::stack_taint_alloc, kStackTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要作一些用于污点信息记录的内存结构分配与VEH异常处理回调设置：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Reserve a memory region for the taint data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint_area = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)VirtualAlloc(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, kTaintAreaSize, MEM_RESERVE, PAGE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Register a VEH handler to commit taint memory touched in other taint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// functions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AddVectoredExceptionHandler(&lt;span class=&quot;comment&quot;&gt;/*FirstHandler=*/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, OvercommitHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;VEH回调函数实现如下，当发生访问违例时，若异常地址不在污点内存区域，则将其设置为可读写内存，然后继续执行：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LONG CALLBACK &lt;span class=&quot;title&quot;&gt;OvercommitHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  _In_ PEXCEPTION_POINTERS ExceptionInfo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *excp_address = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionInformation[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (excp_address &amp;gt;= taint_area &amp;amp;&amp;amp; excp_address &amp;lt; &amp;amp;taint_area[kTaintAreaSize]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (VirtualAlloc((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)excp_address &amp;amp; (~&lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)), &lt;span class=&quot;number&quot;&gt;0x10000&lt;/span&gt;, MEM_COMMIT, PAGE_READWRITE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_EXECUTION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_SEARCH;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;中断响应&quot;&gt;&lt;a href=&quot;#中断响应&quot; class=&quot;headerlink&quot; title=&quot;中断响应&quot;&gt;&lt;/a&gt;中断响应&lt;/h3&gt;&lt;p&gt;再看下&lt;code&gt;bx_instr_interrupt&lt;/code&gt;函数实现，主要是发生中断时，检测该中断地址是否可写，并设置全局标志：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::bp_active &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write_lin_mem(pcpu, globals::bp_address, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;globals::bp_orig_byte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::bp_active = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;污点标记与追踪&quot;&gt;&lt;a href=&quot;#污点标记与追踪&quot; class=&quot;headerlink&quot; title=&quot;污点标记与追踪&quot;&gt;&lt;/a&gt;污点标记与追踪&lt;/h3&gt;&lt;p&gt;bochspwn-reloaded会对内核分配的stack/heap/pools作污点标记：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyf9luidhdj30jy09m75c.jpg&quot; alt=&quot;image-20181222092741926&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、栈污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测修改ESP寄存器的指令，比如：&lt;code&gt;ADD ESP, ...&lt;/code&gt; &lt;code&gt;SUB ESP, ...&lt;/code&gt; &lt;code&gt;AND ESP, …&lt;/code&gt;，若在执行后（&lt;code&gt;bx_instr_after_execution&lt;/code&gt;）ESP发生递减，则调用&lt;code&gt;taint::set_taint(new_rsp, length, /*tainted=*/true)&lt;/code&gt;标记为污点&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_EqId:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Stack allocation handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_PUSH_Eq: &lt;span class=&quot;comment&quot;&gt;/* Allocator prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globals::rep_movs = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_change) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; new_rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (new_rsp &amp;lt; globals::rsp_value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; length = globals::rsp_value - new_rsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt;= kTaintHelperAllocSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        taint::set_taint(new_rsp, length, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write_lin_mem(pcpu, new_rsp, length, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)globals::stack_taint_alloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::config.track_origins) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          taint::set_origin(new_rsp, length, pcpu-&amp;gt;prev_rip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_change = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、堆/Pools污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测内核内存分配操作的指令，则调用&lt;code&gt;taint::set_taint(address, size, /*tainted=*/true)&lt;/code&gt;进行污点标记，主要通过&lt;code&gt;bx_instr_wrmsr&lt;/code&gt;函数来实现，当写入的地址是&lt;code&gt;MSR_LSTAR&lt;/code&gt;寄存器时，它代表着syscall调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MSR_LSTAR	0xc0000082 &lt;span class=&quot;comment&quot;&gt;/* long mode SYSCALL target */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (addr == MSR_LSTAR) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::nt_base = value - globals::config.KiSystemCall64_offset; &lt;span class=&quot;comment&quot;&gt;// ntoskrnl.exe中nt!KiSystemCall64偏移地址，用于获取内核基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_prologues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_prologues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_prologues, BP_POOL_ALLOC_PROLOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_epilogues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_epilogues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_epilogues, BP_POOL_ALLOC_EPILOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;pool_alloc_prologues&lt;/code&gt;与&lt;code&gt;pool_alloc_epilogues&lt;/code&gt;分别代表alloc函数的前序与后序函数，以下是windows-x64系统配置下的地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_prologues  = 0x1E0590&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_epilogues  = 0x1E07AD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、污点清除&lt;/strong&gt;&lt;br&gt;当栈顶弹出或者堆块调用free函数前序指令（Linux下配置地址），以及内存拷贝的目标地址是内核地址时，均将其污点标记清除，如果是win平台则主要依靠&lt;code&gt;bx_instr_lin_access&lt;/code&gt;来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; pc = pcpu-&amp;gt;prev_rip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw != BX_WRITE &amp;amp;&amp;amp; rw != BX_RW) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!pcpu-&amp;gt;long_mode() || !windows::check_kernel_addr(pc) || !windows::check_kernel_addr(lin)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rep_movs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_locked.find(rsp) != globals::rsp_locked.end()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint::set_taint(lin, len, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、污点传播&lt;/strong&gt;&lt;br&gt;在&lt;code&gt;bx_instr_before_execution&lt;/code&gt;中主要对以下操作指令作检测，指令形式主要为 &lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;，用于污点传播追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_MOV_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Standard library memcpy() prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: &lt;span class=&quot;comment&quot;&gt;/* Inline memcpy handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb: mult = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw: mult = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd: mult = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: mult = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_RET_Op64: &lt;span class=&quot;comment&quot;&gt;/* Allocator and memcpy() epilogue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于非&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;指令的内存访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作：清除内存污点标记，标记为已初始化；&lt;/li&gt;
&lt;li&gt;读操作：检测污点标记，如果shadow memory中标记为未初始化读取，则在guest memory中验证：标记不匹配则清除污点，否则若真为未初始化读取就当漏洞报告出来&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* src_in_kernel */&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; tainted_offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    taint::access_type type = taint::check_taint(pcpu, src, size, &amp;amp;tainted_offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::METADATA_MARKER_MISMATCH) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      taint::set_taint(src, size, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::ACCESS_INVALID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      process_bug_candidate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          pcpu, i, pcpu-&amp;gt;prev_rip, src, size, dst, taint::get_origin(src + tainted_offset));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结起来，是否为漏洞主要基于以下几点：&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;中 源地址为内核，目标地址为用户地址，从内核输出数据到用户&lt;/p&gt;
&lt;p&gt;2、源地址被标记为污点&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Bochspwn" scheme="http://riusksk.github.io/tags/Bochspwn/"/>
    
  </entry>
  
  <entry>
    <title>Bochspwn漏洞挖掘技术深究(1)：Double Fetches 检测</title>
    <link href="http://riusksk.github.io/2018/12/01/bochspwn1/"/>
    <id>http://riusksk.github.io/2018/12/01/bochspwn1/</id>
    <published>2018-12-01T03:08:09.000Z</published>
    <updated>2018-12-22T00:15:01.000Z</updated>
    
    <content type="html">&lt;p&gt;虽然现在技术文章很少人看，大家都喜欢聊安全八卦，但技术文章输出是一种很好的学习方式。更重要的是，专业的文章是给专业的人看的，并非为了取悦所有人。&lt;/p&gt;
&lt;p&gt;对于应用程序的代码插桩，有现成的Pin和DynamoRIO插桩框架，在Fuzzing中可以用来实现代码覆盖率的反馈驱动，这已经被应用到winafl，效果很好。除了挖洞，在逆向工程领域应用也很广泛。&lt;/p&gt;
&lt;p&gt;上面都是针对应用层的，内核层的，上面的Pin和DynamoRIO就派不上用场了，对于这种系统内核级的指令插桩，有时就会采用虚拟化技术为实现，比如通过Qemu或Bochs虚拟机。&lt;/p&gt;
&lt;p&gt;ProjectZero的j00ru大神就用bochs的插桩API为实现针对内核double fetches的监测，项目称为bochspwn，后来又采用污点追踪方式检测未初始化漏洞导致的内核信息泄露，叫bochspwn-reloaded。&lt;/p&gt;
&lt;p&gt;Bochs Instrument API 文档参考：&lt;a href=&quot;http://bochs.sourceforge.net/cgi-bin/lxr/source/instrument/instrumentation.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bochs.sourceforge.net/cgi-bin/lxr/source/instrument/instrumentation.txt&lt;/a&gt; ，在编译bochs时指定插桩代码目录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./configure [...] --enable-instrumentation=&amp;quot;instrument/myinstrument&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是bochspwn中用到的API：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs初始化CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs析构CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs访问线性内存时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令前的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bx_instr_initialize用来加载配置信息，针对不同的系统环境设置不同的数据结构偏移地址，用来提供需要的进程/线程等重要信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[general]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trace_log_path      = memlog.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules_list_path   = modules.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os                  = windows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bitness             = 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version             = win10_32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min_read_size       = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max_read_size       = 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min_write_size      = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max_write_size      = 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;callstack_length    = 48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write_as_text       = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbolize           = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbol_path         = &amp;lt;symbols path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[win7_32]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kprcb               = 0x120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;current_thread      = 0x04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcb                 = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process             = 0x150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;client_id           = 0x22c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process_id          = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread_id           = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create_time         = 0x200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image_filename      = 0x16c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kdversionblock      = 0x34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;psloadedmodulelist  = 0x18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loadorder_flink     = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;basedllname         = 0x2c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseaddress         = 0x18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sizeofimage         = 0x20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;us_len              = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;us_buffer           = 0x4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;teb_cid             = 0x20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;irql                = 0x24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;previous_mode       = 0x13a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exception_list      = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next_exception      = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;try_level           = 0xc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bochspwn的核心功能实现就在于&lt;code&gt;bx_instr_lin_access&lt;/code&gt;与&lt;code&gt;bx_instr_before_execution&lt;/code&gt;两个函数。先看下&lt;code&gt;bx_instr_before_execution&lt;/code&gt;的实现逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略实模式real mode&lt;/li&gt;
&lt;li&gt;忽略无关的系统调用中断指令，仅允许&lt;code&gt;int 0x2e&lt;/code&gt;与 &lt;code&gt;int 0x80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取当前进程/线程ID相关的信息，当发现漏洞时方便重现&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; client_id thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; opcode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// We&#39;re not interested in instructions executed in real mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!pcpu-&amp;gt;protected_mode() &amp;amp;&amp;amp; !pcpu-&amp;gt;long64_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// If the system needs an additional invokement from here, call it now.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::has_instr_before_execution_handler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke_system_handler(BX_OS_EVENT_INSTR_BEFORE_EXECUTION, pcpu, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Any system-call invoking instruction is interesting - this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// is mostly due to 64-bit Linux which allows various ways&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// to be used for system-call invocation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note: We&#39;re not checking for int1, int3 nor into instructions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opcode != BX_IA_SYSCALL &amp;amp;&amp;amp; opcode != BX_IA_SYSENTER &amp;amp;&amp;amp; opcode != BX_IA_INT_Ib) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// The only two allowed interrupts are int 0x2e and int 0x80, which are legacy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ways to invoke system calls on Windows and linux, respectively.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opcode == BX_IA_INT_Ib &amp;amp;&amp;amp; i-&amp;gt;Ib() != &lt;span class=&quot;number&quot;&gt;0x2e&lt;/span&gt; &amp;amp;&amp;amp; i-&amp;gt;Ib() != &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Obtain information about the current process/thread IDs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!invoke_system_handler(BX_OS_EVENT_FILL_CID, pcpu, &amp;amp;thread)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Process information about a new syscall depending on the current mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!events::event_new_syscall(pcpu, &amp;amp;thread)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看下&lt;code&gt;bx_instr_lin_access&lt;/code&gt;实现逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略仅读写指令&lt;/li&gt;
&lt;li&gt;检测CPU类型（32位或64位）&lt;/li&gt;
&lt;li&gt;判断当前指令地址pc是否为内核地址，判断访问的线性内存地址是否为用户层地址&lt;/li&gt;
&lt;li&gt;检测读取的内存长度是否处于0~16字节之间，长度大小范围在config.txt中配置，仅处理此范围内的指令操作&lt;/li&gt;
&lt;li&gt;通过上述条件之后，就代表可能存在内核漏洞，然后反汇编指令，然后填充日志记录信息&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Not going to use physical memory address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)phy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Read-write instructions are currently not interesting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw == BX_RW)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is the CPU in protected or long mode?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; mode = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note: DO NOT change order of these ifs. long64_mode must be called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// before protected_mode, since it will also return &quot;true&quot; on protected_mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// query (well, long mode is technically protected mode).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pcpu-&amp;gt;long64_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; BX_SUPPORT_X86_64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mode = &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// BX_SUPPORT_X86_64&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pcpu-&amp;gt;protected_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This is either protected 32-bit mode or 32-bit compat. long mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mode = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Nothing interesting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO(gynvael): Well actually there is the smm_mode(), which&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// might be a little interesting, even if it&#39;s just the bochs BIOS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// SMM code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is pc in kernel memory area?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is lin in user memory area?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bx_address pc = pcpu-&amp;gt;prev_rip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!invoke_system_handler(BX_OS_EVENT_CHECK_KERNEL_ADDR, &amp;amp;pc, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      !invoke_system_handler(BX_OS_EVENT_CHECK_USER_ADDR, &amp;amp;lin, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* pc not in ring-0 or lin not in ring-3 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Check if the access meets specified operand length criteria.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw == BX_READ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len &amp;lt; globals::config.min_read_size || len &amp;gt; globals::config.max_read_size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len &amp;lt; globals::config.min_write_size || len &amp;gt; globals::config.max_write_size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Save basic information about the access.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log_data_st::mem_access_type access_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (rw) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_READ:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_READ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_WRITE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_WRITE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_EXECUTE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_EXEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_RW:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_RW;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;abort&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Disassemble current instruction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bit8u ibuf[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; pc_disasm[&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (read_lin_mem(pcpu, pc, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ibuf), ibuf)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    disassembler bx_disassemble;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bx_disassemble.disasm(mode == &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;, mode == &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, pc, ibuf, pc_disasm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// With basic information filled in, process the access further.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  process_mem_access(pcpu, lin, len, pc, access_type, pc_disasm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;信息记录方式都是通过invoke_system_handler函数去处理自定义系统事件，目前主要支持4种操作系统（windows\linux\freebsd\openbsd），macOS还没搞过，原作者是说想继续实现macOS，这个值得尝试开发下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tag_kSystemEventHandlers&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *system;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s_event_handler_func handlers[BX_OS_EVENT_MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; kSystemEventHandlers[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;windows&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)windows::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::fill_cid,	&lt;span class=&quot;comment&quot;&gt;// 获取线程环境块TEB，读取进程/线程ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::fill_info,	&lt;span class=&quot;comment&quot;&gt;// 基于config.txt中配置的进线程结构offset去读取进线程信息，包括进程文件名、创建时间、栈回溯等信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;linux&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)linux::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;freebsd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)freebsd::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::instr_before_execution&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;openbsd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)openbsd::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::instr_before_execution&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;#123;&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后就是输出记录的信息，比如作者发现的CVE-2018-0894漏洞信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;------------------------------ found uninit-copy of address fffff8a000a63010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid/tid: 000001a0/000001a4] &amp;#123;     wininit.exe&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       COPY of fffff8a000a63010 ---&amp;gt; 1afab8 (64 bytes), pc = fffff80002698600&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [                             mov r11, rcx ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Allocation origin: 0xfffff80002a11101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   (ntoskrnl.exe!IopQueryNameInternal+00000071)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Shadow memory:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000: 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Actual memory:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000: 2e 00 30 00 aa aa aa aa 20 30 a6 00 a0 f8 ff ff ..0..... 0......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000010: 5c 00 44 00 65 00 76 00 69 00 63 00 65 00 5c 00 \.D.e.v.i.c.e.\.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000020: 48 00 61 00 72 00 64 00 64 00 69 00 73 00 6b 00 H.a.r.d.d.i.s.k.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000030: 56 00 6f 00 6c 00 75 00 6d 00 65 00 32 00 00 00 V.o.l.u.m.e.2...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Stack trace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #0  0xfffff80002698600 (ntoskrnl.exe!memmove+00000000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #1  0xfffff80002a11319 (ntoskrnl.exe!IopQueryNameInternal+00000289)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #2  0xfffff800028d4426 (ntoskrnl.exe!IopQueryName+00000026)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #3  0xfffff800028e8fa8 (ntoskrnl.exe!ObpQueryNameString+000000b0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #4  0xfffff8000291313b (ntoskrnl.exe!NtQueryVirtualMemory+000005fb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #5  0xfffff800026b9283 (ntoskrnl.exe!KiSystemServiceCopyEnd+00000013)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在技术文章很少人看，大家都喜欢聊安全八卦，但技术文章输出是一种很好的学习方式。更重要的是，专业的文章是给专业的人看的，并非为了取悦所有人。&lt;/p&gt;
&lt;p&gt;对于应用程序的代码插桩，有现成的Pin和DynamoRIO插桩框架，在Fuzzing中可以用来实现代码覆盖率的反馈
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="bochspwn" scheme="http://riusksk.github.io/tags/bochspwn/"/>
    
  </entry>
  
  <entry>
    <title>从杀软之殇谈产品</title>
    <link href="http://riusksk.github.io/2018/11/24/%E6%9D%80%E8%BD%AF%E4%B9%8B%E6%AE%87/"/>
    <id>http://riusksk.github.io/2018/11/24/杀软之殇/</id>
    <published>2018-11-24T02:09:41.000Z</published>
    <updated>2018-11-24T04:33:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxixl44cx8j30zk0i2tyn.jpg&quot; alt=&quot;百度&quot;&gt;&lt;/p&gt;
&lt;p&gt;前几天，百度杀毒、百度卫士宣布停止服务，祭出“百度杀毒感谢一路有你”的殇曲，就此终结！&lt;/p&gt;
&lt;p&gt;PC杀毒软件的历史已经有35年，但在这移动互联网的时代，问津者能有几人呢？&lt;/p&gt;
&lt;p&gt;今天就此事聊聊安全产品和安全从业人员。&lt;/p&gt;
&lt;h4 id=&quot;面向系统的产品&quot;&gt;&lt;a href=&quot;#面向系统的产品&quot; class=&quot;headerlink&quot; title=&quot;面向系统的产品&quot;&gt;&lt;/a&gt;面向系统的产品&lt;/h4&gt;&lt;p&gt;杀毒软件的出现就是弥补系统自身安全能力的不足，算是面向系统的安全产品，不仅是PC，Android上也是如此。&lt;/p&gt;
&lt;p&gt;当年Android病毒那么严重，第一款Android主动防御软件LBE诞生时也是风光无限，甚至后面还利用系统漏洞作防御。&lt;/p&gt;
&lt;p&gt;再看看现在，随着Windows系统自主安全能力以及自家杀软Windows Defender的不断完善，并且提供给杀软的接口越来越少，权限越来越集中管理，使得PC杀软越来越无用武之地，甚至曾经的头牌杀软已沦为流氓软件。&lt;/p&gt;
&lt;p&gt;而这几年Google在Android安全上的投入也是非常大，整个系统的安全性相比前几年提升很大，他们家的chrome也曾在pwn2own黑客大赛幸存过几年，虽然今年被破了。&lt;/p&gt;
&lt;p&gt;以前iOS截图后是不能直接分享的，然后就有一些软件直接提供截图后的分享功能，但是现在苹果自己在iOS上做了，如果软件还保留原分享功能，就成为一种干扰，有些软件就又不得不去掉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fxj1m5l2w9j30cc0m0adq.jpg&quot; alt=&quot;image-20181124123301131&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;凡是面向系统的产品，自系统厂商打算自己做时，就没你啥事了，无论是现今的PC，还是未来的移动端，均是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;面向业务的产品&quot;&gt;&lt;a href=&quot;#面向业务的产品&quot; class=&quot;headerlink&quot; title=&quot;面向业务的产品&quot;&gt;&lt;/a&gt;面向业务的产品&lt;/h4&gt;&lt;p&gt;以前，很多企业为了维护业务安全，都是从安全公司买服务或产品。&lt;/p&gt;
&lt;p&gt;后来，随着企业的壮大，很多安全工作都企业自己做，自己开发扫描器、防火墙等等，然后各安全公司就开始被收购，乙方安全人员开始向甲方流动。&lt;/p&gt;
&lt;p&gt;再后来，企业内部的业务部门也逐渐壮大，很多业务也开始自己做安全，他们也怕被安全部门捅漏洞丢面子，一些容易做的安全产品会被优先替代掉，一些需要长期投入并维护的安全产品，就得看业务部门是否有此人力，有些安全产品没有多年的积累一时也是无法替代的。与此同时，一些安全部门人员开始向业务部门流动。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;凡是面向业务的产品，自业务打算自己做时，就没你啥事了&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;面向人的产品&quot;&gt;&lt;a href=&quot;#面向人的产品&quot; class=&quot;headerlink&quot; title=&quot;面向人的产品&quot;&gt;&lt;/a&gt;面向人的产品&lt;/h4&gt;&lt;p&gt;人，可以分为商户（2B）与用户（2C），比如阿里就是典型的2B基因，腾讯就是典型的2C基因，虽然他们各自都不信这邪。正如当年阿里做来往，腾讯做拍拍一般，结局都是相当地凄惨。&lt;/p&gt;
&lt;p&gt;杀软2C的道路基本已经凉凉的，但是2B之路还有点残羹剩饭，尤其是天朝机构，出于国家安全考虑，在抵制国外安全产品的同时，就需要国产安全产品替代。所以现在很多国内杀软都是逐步转向做2B业务，但肯定都是不如从前了。&lt;/p&gt;
&lt;p&gt;人总有各种各样的需求，面对人的产品就是为了解决这些需求。比如人与人的沟通，以前飞鸽传书、快马加急，到现在的电话短信、微信视频等方式，需求亘古不变，只是产品在进化，在被另一种更高效、更低成本的产品替代。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;面向人的产品，产品要解决的需求形态可能长期存在，但产品终会被更高效、更低成本的产品替代&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;安全人员的生存之道&quot;&gt;&lt;a href=&quot;#安全人员的生存之道&quot; class=&quot;headerlink&quot; title=&quot;安全人员的生存之道&quot;&gt;&lt;/a&gt;安全人员的生存之道&lt;/h4&gt;&lt;p&gt;最近一年，在微信群里，仍然还有一些做Windows病毒分析的同学，还在聊Windows病毒，看着都觉得无力。如果是结合漏洞的病毒样本分析，还可以高谈APT混口饭吃，而其它类型的病毒都已经没什么市场了。&lt;/p&gt;
&lt;p&gt;从一方面讲，移动时代不求思变转型的安全人员，有时也挺惨的，杀软产品不做了，这帮开发和分析人员又该何去何从。&lt;/p&gt;
&lt;p&gt;就连招二进制安全的，很多人只会windows平台，不懂移动端，经常无法满足业务安全需求。当然，如果是深入Windows系统漏洞攻防的，那现在还是相当有市场的。&lt;/p&gt;
&lt;p&gt;杀软这事也只是系统自身进化导致的，如果是系统颠覆的，如Android灭掉了Symbian，一身超神的塞班技能也无济于事。&lt;/p&gt;
&lt;p&gt;我现在特别希望Android被新系统颠覆，所有安全人员又打回同一起跑线，重新开始研究新系统的漏洞攻防。当年虽赶上Android安全，但只搞了应用安全，没有深入系统安全，后来上车晚了，还是觉悟不够。&lt;/p&gt;
&lt;p&gt;所以，安全人员还是得居安思危，不然哪天就真没饭吃了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxixl44cx8j30zk0i2tyn.jpg&quot; alt=&quot;百度&quot;&gt;&lt;/p&gt;
&lt;p&gt;前几天，百度杀毒、百度卫士宣布停止服务，祭出“百度杀毒感谢一路有你”的殇曲，就此终结！
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>读《态度》</title>
    <link href="http://riusksk.github.io/2018/11/18/%E8%AF%BB%E3%80%8A%E6%80%81%E5%BA%A6%E3%80%8B/"/>
    <id>http://riusksk.github.io/2018/11/18/读《态度》/</id>
    <published>2018-11-18T09:47:02.000Z</published>
    <updated>2018-11-18T12:00:51.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcenoinw2j307009nta1.jpg&quot; alt=&quot;image-20181118184524117&quot;&gt;&lt;/p&gt;
&lt;p&gt;《态度》是吴军在今年新出的书籍，是他写给女儿的40封家书。第一次读吴军的书是《见识》，读完觉得不错，因此这次“双十一”买了好几本他写的书，包括《浪潮之颠》、《大学之路》。&lt;/p&gt;
&lt;p&gt;在新书中，主要分6部分来讲，分别讲了一些做人做事的原则、对待金钱和人际关系的态度、还有学习和人生哲学的一些观点。&lt;/p&gt;
&lt;h4 id=&quot;关于教育&quot;&gt;&lt;a href=&quot;#关于教育&quot; class=&quot;headerlink&quot; title=&quot;关于教育&quot;&gt;&lt;/a&gt;关于教育&lt;/h4&gt;&lt;p&gt;作者说”教育改变命运“，其实多数读书人应该都认同这一观点，他在书中讲述了3个观点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;”教育改变命运“已成为全世界大部分国家的共识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;欧洲很早就意识到教育对人一生的帮助，所以很早就开始兴办免费教育，让交不起学费的贫家子弟都可以到”官办“学校读书，牛顿就是靠这种免费的公立教育完成中学学业，进入剑桥大学的。很多来自中国农村的贫穷人家，为了摆脱贫穷，让自己子女接受良好的教育，通过一代人的努力摆脱贫穷，改变命运。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;衣食无忧的富家子弟也有必要接受教育&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中国著名作家吴晓波，就是那个写了《腾讯传》的人，调查了早期在股市上发财的几十人，发现除了一两个之外，其他人的结局无一例外都很惨，有破产的，有坐牢的，有被仇家杀的，有正在被追杀的。这些人都有两个共同点：第一，敢于冒险；第二，受教育水平低，最高中学学历。因此，他们在有了钱之后，没有更高的理想和追求。&lt;/p&gt;
&lt;p&gt;【PS】：在中国，尤其是农村，一些没接受过多少教育的暴发户，有时会对年轻人或读书人说：“读书没有用的，你读那么多书赚的还不是没我多”！如果此时你对他说：“让你的孩子退学吧！“，估计他就没话了。还有一些在外工作多年的人，包括腾讯人，有时过年同学聚会，发现一些曾经读书不好或者辍学的老同学现在混得相当不错，比自己好太多的时候，通常都会反问自己：“读那么多书真的有用吗“？这种情况都是”幸存者偏差“的认识而已（顺便给大家推荐另一本书《思考，快与慢》，里面就讲了很多这种思考或认识的陷阱）。记得，腾讯内部论坛就有人发过这样感慨。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对退学创业的误解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;互联网行业的退学创业代表主要有5人：比尔盖茨、乔布斯、佩奇、布林，以及扎克伯格。佩奇和布林是进入斯坦福读博士之前退学的，盖茨和扎克伯格情况类似，人家都是上过哈佛的，同样比绝大部分年轻人都出色，并接受过良好的教育，而且他们都是创业成功之后才退学的。乔布斯是因为不忍花父母的钱才没有读大学的，但至少是在斯坦福大学接受过教育的，如果他来自一个相对富有的家庭，或许会读完大学。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;####关于格局&lt;/p&gt;
&lt;p&gt;决策时格局要大，做事时境界要高。用作者通俗一点的话来讲，就是要长远考虑，尽可能往最好的目标努力。&lt;/p&gt;
&lt;p&gt;书中举例几个MIT和哈佛毕业生组成的创业团队，他们打算做高频交易（在股市中通过快速操作以赚取低买高卖时差价）的创业项目，作者认为他们都是非常聪明的人，但做事的格局不大，因为这赚不到大钱，属于小打小闹，而且这事仅是提高股市交易量，并无其它意义，对世界更不可能产生任何重大影响，而且这件事的公司已经很多了。&lt;/p&gt;
&lt;p&gt;这种看似只赚不赔的高频交易公司为何做不到像Google、Apple那样赚更多钱呢？因为前者以改变世界为目的，后者以赚小钱、小富即安为目的。&lt;/p&gt;
&lt;p&gt;很多亚裔家长一直在纠结孩子上名校是否有用？作者对此的观点是，如果格局提升不上去，上了也没有用，还达不到谷歌员工的平均水平。&lt;/p&gt;
&lt;h4 id=&quot;关于贫穷&quot;&gt;&lt;a href=&quot;#关于贫穷&quot; class=&quot;headerlink&quot; title=&quot;关于贫穷&quot;&gt;&lt;/a&gt;关于贫穷&lt;/h4&gt;&lt;p&gt;一个生于富有家庭的孩子不怕别人说他穷的，而一个贫家子弟通常反而怕别人说他穷，看不起他。卖肾买iPhone的人，一定是贫家子弟，怕别人说他穷。于是，很多穷人最后还是选择与穷人，甚至比自己穷的人为伍，成绩差的孩子还是选择扎堆一块玩。久而久之，那些人就无法摆脱原属阶层了。&lt;/p&gt;
&lt;p&gt;大家常说：”物以类聚，人以群分“，因为这样对人来说，交际成本是最低的，也是最舒适的方式。一般人都不太愿意跳出自己的舒适区，去尝试更有难度且有助提升自我的挑战。&lt;/p&gt;
&lt;p&gt;不管贫穷与否，如果事情做不好，那么你所处的地位可能与贫穷无异。通常情况下，人的心理能否接受自己不如别人，在可能会被别人嘲笑的情况下，是否还能努力往前走，直到改变自己的状态，这就是一种考验，与走出贫困差不多。&lt;/p&gt;
&lt;p&gt;其实多数人都知道，要多向学习好的、能力强的人为伍，这些道理小学老师都经常说。但有时要去向比自己牛逼的人学习请教，也是需要一点勇气，以及改变自我的努力和决心。&lt;/p&gt;
&lt;h4 id=&quot;关于投资&quot;&gt;&lt;a href=&quot;#关于投资&quot; class=&quot;headerlink&quot; title=&quot;关于投资&quot;&gt;&lt;/a&gt;关于投资&lt;/h4&gt;&lt;p&gt;作者在书中挺推荐买标准普尔500指数，还让他女儿拿1/3的钱直接购买标普500指数ETF，每过两三个月就继续定投，不管涨跌。说实话，我也没关注这指数，今天赶紧加个关注先。&lt;/p&gt;
&lt;p&gt;作者对投资给出了4条建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;永远不要觉得自己能够打败市场&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得下面这张图已经足够说明一切了，最近在微信和朋友圈上传得挺火的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcfh8tjvlj307z0cz77v.jpg&quot; alt=&quot;image-20181118191352193&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对市场要有信心&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者说，股市有涨有跌，但要相信股市在较长的时间里是往上走的。&lt;/p&gt;
&lt;p&gt;我曾经对腾讯700也是迷之自信，但你看看现在，这一年都跌成啥样了，当然如果你说再等个一两年，那应该还是涨的，看谁命长了。还好作者后面补了个第3点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;虽然股市在下跌后总会涨回来，但是单一股票未必。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在2000年股价到达顶点的英特尔和思科，今天的股价不足当年的1/4，而且可能永远没有机会回到当时的峰值了。也就是说，投资单一的股票，即使遇到明星公司，也未必能长期赚钱。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;时间是你的朋友，而时机不是。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;投资要有耐心，不要急于求成。聪明的投资人永远在股市上投资，而不是试图投机挑选最低点和最高点。因此，走出坏运气的关键是耐心，让时间成为我们的朋友。&lt;/p&gt;
&lt;p&gt;除以上建议之外，作者还给出了3条禁忌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要进行过于冒险，会导致来顶之灾的投资&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如做空股票和使用杠杆投资，你们再回头看看“格雷厄姆的微笑”吧！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要进行自己不懂的投资&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿自己的短处和别人的长处比，胜算微乎其微。同时，你看不懂的投资里面常常有很多陷阱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要被那些所谓的失去了的投机机会乱了方寸&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常有人说：”如果我当初买了比特币，今天能赚100倍“。这种话是没有意义的，如同中彩票一般，是运气，遇不上，也不必在意，因为人生的机会还有很多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;关于友情&quot;&gt;&lt;a href=&quot;#关于友情&quot; class=&quot;headerlink&quot; title=&quot;关于友情&quot;&gt;&lt;/a&gt;关于友情&lt;/h4&gt;&lt;p&gt;作者在书中讲到一个在腾讯的经历，大家感受下，其它就不啰嗦了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxcfyq7yg6j312k0u04go.jpg&quot; alt=&quot;IMG_6440&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;关于交际&quot;&gt;&lt;a href=&quot;#关于交际&quot; class=&quot;headerlink&quot; title=&quot;关于交际&quot;&gt;&lt;/a&gt;关于交际&lt;/h4&gt;&lt;p&gt;与我们接触的人当中，可以分为4种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与自己关系好，能力强；&lt;/li&gt;
&lt;li&gt;与自己关系好，能力有限；&lt;/li&gt;
&lt;li&gt;并非自己朋友，但能力强；&lt;/li&gt;
&lt;li&gt;与自己关系不好，能力不强。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第1种好办，第4种交集不多，可以忽略，所以为人处世方面，我们需要比较留意的第2和第3种人。&lt;/p&gt;
&lt;p&gt;对于这些人，我们必须理性对待，避免依据个人喜好来判断人和事：符合自己喜好的人，无论他们做什么都觉得好；不符合自己喜好的人，无论他们做什么都要挑毛病。&lt;/p&gt;
&lt;p&gt;比如特朗普，很多人讨厌他，其实我也讨厌他，然后就有很多人对他做的任何事都持反对意见，无论对错，这就有点失去理想了。&lt;/p&gt;
&lt;p&gt;在社会上，个人生活和事业有时是需要他人的支持和帮助，需要我们能够团结大多数人，把事情做好。&lt;/p&gt;
&lt;h4 id=&quot;关于拒绝&quot;&gt;&lt;a href=&quot;#关于拒绝&quot; class=&quot;headerlink&quot; title=&quot;关于拒绝&quot;&gt;&lt;/a&gt;关于拒绝&lt;/h4&gt;&lt;p&gt;作者举例说曾有朋友找他帮忙，就是帮个孩子联系谷歌或者腾讯的实习机会，但看了孩子材料之后就直接回绝了。那朋友也表示理解，就没有再提此事。&lt;/p&gt;
&lt;p&gt;这种事太常见了，尤其是在腾讯这类公司，很多人会找过来帮忙找个工作之类，现在基本每次回家都有人找我。以前有人让我帮忙投简历，我一般都直接帮投了，即使有些简历或者学历问题，基本都拿不到面试机会的，我也帮忙投了，所以在公司那个”伯乐“平台上，结果全是拒绝的。后来，我学聪明了，不再当”老好人“。一些简历有问题，有明显水平不行的，我都委婉地回绝掉。一方面，投了也是白投，另一方面HR又不傻，我老帮人投这类简历，别人还会觉得我看人的水平太次太有问题了。&lt;/p&gt;
&lt;p&gt;对于别人请帮忙的事，作者总结出4点，按不同情况采取不同的方法处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能力不及，不能帮上忙，直接在第一时间委婉拒绝。&lt;/li&gt;
&lt;li&gt;能帮上忙，但是自己代价太大，不想帮的，就不要勉强自己，但也要及早通知对方。&lt;/li&gt;
&lt;li&gt;不论多困难都愿意帮，而且极有可能办成，这时就答应对方，然后全力去做。&lt;/li&gt;
&lt;li&gt;虽然愿意帮，但有可能帮上，也可能帮不上，这时要将实际情况说明，千万不要轻易许诺。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h4&gt;&lt;p&gt;这书整体上我觉得还不错，虽然有些是对中学生或大学生说的道理，很多事情自己经历过也都明白，但也有一些适合不同年龄段的人学习的知识点，所以还是推荐阅读。&lt;/p&gt;
&lt;p&gt;喜欢吴军写的书，并非崇拜对方，而他写的书确实很好，也很用心。在这种浮躁的社会，出书也不容易，写好书更不容易，自己出过书的人应该更有体会。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcenoinw2j307009nta1.jpg&quot; alt=&quot;image-20181118184524117&quot;&gt;&lt;/p&gt;
&lt;p&gt;《态度》是吴军在今年新出的书籍，是他写给女儿
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="读书笔记" scheme="http://riusksk.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读《风格感觉：21世纪写作指南》</title>
    <link href="http://riusksk.github.io/2018/11/10/%E8%AF%BB%E3%80%8A%E9%A3%8E%E6%A0%BC%E6%84%9F%E8%A7%89%EF%BC%9A21%E4%B8%96%E7%BA%AA%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>http://riusksk.github.io/2018/11/10/读《风格感觉：21世纪写作指南》/</id>
    <published>2018-11-10T08:17:37.000Z</published>
    <updated>2018-11-10T10:05:29.000Z</updated>
    
    <content type="html">&lt;p&gt;1、节俭使用元话语（语句中标示话语结构的标记语言，即用来提醒读者应该注意什么），可以用提问代替元话语，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：这一章讨论引起名字流行程度上升和下降的因素。&lt;/p&gt;
&lt;p&gt;【改后】：一个名字流行或不流行的原因是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、放弃专家腔、更自然地对话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：近年来，越来越多的心理学家和语言学家将注意力转向儿童语言习得的问题。本文将评述这一过程近年来的研究。&lt;/p&gt;
&lt;p&gt;【改后】：小孩子不用专门上课，就能获得说一门语言的能力。他们怎么做到的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、写作清晰有力，少用模糊词汇&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：杰克是个诚实的人。&lt;/p&gt;
&lt;p&gt;【改后】：杰克是个&lt;code&gt;特别&lt;/code&gt;诚实的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加了“特别”反而让人产生困惑，甚至以为说的是反话，所以少用“非常”、“十分”、“特别”这种过犹不及的强调词。&lt;/p&gt;
&lt;p&gt;4、少用抽象词，比如“xx性”、“xx观”、“xx力”，这种特别容易出现在工作中，俗称“官僚体”，腾讯内部就有一堆此类名词（闭环、打法、自控力、大局观、专注度……）&lt;/p&gt;
&lt;p&gt;5、去掉僵尸名词：比如“做出确认”变成“确认”、“做出辞职的决定”变成“决定辞职”。&lt;/p&gt;
&lt;p&gt;6、采用主动和互动风格，即站在读者角度或者自己主动的角度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：我们很高兴地宣布，本实验室的新设施将对外开放，随时准备承接各类脑科学实验。&lt;/p&gt;
&lt;p&gt;【改后】：你将有机会使用本实验室，来做你的脑科学实验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7、【有序地称呼反复出现的事物】避免读者过多思考，免得他们需要思考是否为新事物&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个&lt;code&gt;英国人&lt;/code&gt;、一个&lt;code&gt;法国人&lt;/code&gt;和一个&lt;code&gt;犹太人&lt;/code&gt;坐在一起，这个&lt;code&gt;英国人&lt;/code&gt;说……，这个&lt;code&gt;法国人&lt;/code&gt;说……，这个&lt;code&gt;犹太人&lt;/code&gt;说……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少用他/她/它去代替前面说过的人物事等，减少读者疑惑和思考，避免产生歧义，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愧疚、复仇和苦痛会从感情上毁掉你和你的孩子。&lt;code&gt;你&lt;/code&gt;必须摆脱他们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的&lt;code&gt;你&lt;/code&gt;是摆脱你的孩子，还是摆脱愧疚、复仇和苦痛？&lt;/p&gt;
&lt;p&gt;8、避免使用过多的连接词，否则文章就会变得臃肿不堪，比如下句中的&lt;code&gt;因为&lt;/code&gt;就是多余的，因为前面的“原因”已经暗示我们正在做出解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;太多人生活在黑暗之中的原因是&lt;code&gt;因为&lt;/code&gt;他们想那样生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9、【谨慎地运用否定】正如克林顿辩解道“我没有和那个女人发生过性关系”的时候，并没有使各种传言平息下来，有时甚至起到“此地无银三百两“的反作用。&lt;/p&gt;
&lt;p&gt;10、正确的写作用法只是促成良好写作最小的因素，其重要性远远比不过保持连贯性、使用古典风格、克服知识的诅咒，更不用说在智力上维护勤恳了。假如真的希望提高写作质量，或者怒斥他人的文章，最需要关注的不是那些语法规则，而是那些支配批判性思考和发现事实的规则：&lt;/p&gt;
&lt;p&gt;​    a. 查资料&lt;/p&gt;
&lt;p&gt;​    b.确保论证有理有据&lt;/p&gt;
&lt;p&gt;​    c. 不要把轶事或个人经历当作世界的常态，避免把特殊个例当作显著现象&lt;/p&gt;
&lt;p&gt;​    d. 谨防虚假的二分法：把复杂问题化为两种思想之间的战争，几乎无法帮助我们增进理解&lt;/p&gt;
&lt;p&gt;​    e.论证应当基于理性，而非个人。即“不要证明自己对，而要弄清什么是对的”&lt;/p&gt;
&lt;p&gt;最后说一句最重要的话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热文或畅销书之所以流行，关键在于其内容，而非华丽的辞藻文法。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1、节俭使用元话语（语句中标示话语结构的标记语言，即用来提醒读者应该注意什么），可以用提问代替元话语，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：这一章讨论引起名字流行程度上升和下降的因素。&lt;/p&gt;
&lt;p&gt;【改后】：一个名字流行或不流行的原因是什么？&lt;/p&gt;

    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>我的挑书手段</title>
    <link href="http://riusksk.github.io/2018/11/10/%E6%88%91%E7%9A%84%E6%8C%91%E4%B9%A6%E6%89%8B%E6%AE%B5/"/>
    <id>http://riusksk.github.io/2018/11/10/我的挑书手段/</id>
    <published>2018-11-10T00:53:52.000Z</published>
    <updated>2018-11-10T02:47:23.000Z</updated>
    
    <content type="html">&lt;p&gt;双十一，一年一度的”屯书日“又到了。&lt;/p&gt;
&lt;p&gt;鄙人生平无其它购物嗜好，唯有购书。&lt;/p&gt;
&lt;p&gt;在电子书横行的时代，各类读书应用都在崛起，比如”微信读书“、”QQ阅读“、”掌阅“等，个人习惯用微信读书，因为有社交好友的阅读推荐，以及公司送的读书券，所以基本也都是免费的，这个才是重点。&lt;/p&gt;
&lt;p&gt;对于懒人，也有听书应用，比如”懒人听书“、”喜马拉雅“，特别适合听小说、历史人文，之前我就在上面听过《明朝那些事儿》、《盗墓笔记》等，特别是一些小说类的配音，如电影一般，甚是精彩声动。&lt;/p&gt;
&lt;p&gt;开篇聊完，该说说”挑书”这件事儿了……&lt;/p&gt;
&lt;p&gt;首先，对于非技术书，如果在上述读书app中有免费的，一般我不会去买实体书，直接在app上翻来看看，有兴趣就继续，没兴趣就结束了。&lt;/p&gt;
&lt;p&gt;所以，这里所说的挑书，挑的是技术书以及无电子版的非技术书，或者其它想收藏的经典书籍（如书帖、史书、经管心理名著等等）。&lt;/p&gt;
&lt;h4 id=&quot;挑书第一式：查作者翻目录&quot;&gt;&lt;a href=&quot;#挑书第一式：查作者翻目录&quot; class=&quot;headerlink&quot; title=&quot;挑书第一式：查作者翻目录&quot;&gt;&lt;/a&gt;挑书第一式：查作者翻目录&lt;/h4&gt;&lt;p&gt;翻开当当网信息安全书籍总榜，在前3名，永远有一本书占其中，书名永远是《黑客xx从入门到精通》，而且还是个系列，好多本，也不得不承认，越初级越入门，越受欢迎，毕竟菜鸟永远比专业人士多……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fx2pvzdgcfj30q806iq5z.jpg&quot; alt=&quot;image-20181110093819437&quot;&gt;&lt;/p&gt;
&lt;p&gt;挑书第一眼，自然是作者与目录，但对它们的判断，又常常要求读者具备一定的专业知识，因为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“只有具备犯罪能力的人才能洞察他人的犯罪行为。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看作者，经常署名“xx工作室”，也有个人，此时都可以查看他们出过的书，对比各书目录，经常可以发现“换汤不换药”的行为，把旧书内容重新包装进新书再出版。&lt;/p&gt;
&lt;p&gt;有时出版社编辑也会找我帮忙评价下某些新书目录，我就经常这么搞，偶而就会发现存在这种情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fx2qf148i7j30d20f612a.jpg&quot; alt=&quot;image-20181110095640534&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在很多书籍都可以在线试读了，也一种不错的挑书方式。&lt;/p&gt;
&lt;h4 id=&quot;挑书第二式：利用工具查价&quot;&gt;&lt;a href=&quot;#挑书第二式：利用工具查价&quot; class=&quot;headerlink&quot; title=&quot;挑书第二式：利用工具查价&quot;&gt;&lt;/a&gt;挑书第二式：利用工具查价&lt;/h4&gt;&lt;p&gt;每到购物节，各网站都会推出“满多少减多少”的优惠，但有时查下历史价格趋势会发现，都是先抬高价格再打折的。&lt;/p&gt;
&lt;p&gt;对于这种情况都一些工具可以查询，如果是在电脑上可以用“油猴“脚本：购物党自动比价工具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fx2qp7xqnwj30zg0azn24.jpg&quot; alt=&quot;image-20181110100630299&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是手机上，可以使用”慢慢买“、”历史价值查询“，比如京东《态度》这本书，昨天就从32.5抬高到59：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fx2qsszf40j309a0g5tb5.jpg&quot; alt=&quot;image-20181110100956404&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;挑书第三式：看评价&quot;&gt;&lt;a href=&quot;#挑书第三式：看评价&quot; class=&quot;headerlink&quot; title=&quot;挑书第三式：看评价&quot;&gt;&lt;/a&gt;挑书第三式：看评价&lt;/h4&gt;&lt;p&gt;购物网站上面都有评价可以看，还有豆瓣读书上，都可以看到一些书籍的评价，作为自己的一些参考。虽然豆瓣读书的评分不如电影那般准确，但评语还是可以参考的。&lt;/p&gt;
&lt;p&gt;还有网上也有一些推荐书籍的文章，经典的比如”C语言之四书五经“、“Linux内核学习四库全书”，还有最近左耳朵耗子在微博上推荐的“程序员必读经典书籍”，都是可以借鉴参考的。&lt;/p&gt;
&lt;p&gt;这些文章网上都有，大家自行搜索，对于信息安全从业人员，之前我也列了个书单“信息安全从业者书单推荐”：&lt;a href=&quot;https://github.com/riusksk/secbook，好坏自行判断，毕竟不同人对同一本书的看法也是不一样的。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/secbook，好坏自行判断，毕竟不同人对同一本书的看法也是不一样的。&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;挑书第四式：预估对个人的实用价值&quot;&gt;&lt;a href=&quot;#挑书第四式：预估对个人的实用价值&quot; class=&quot;headerlink&quot; title=&quot;挑书第四式：预估对个人的实用价值&quot;&gt;&lt;/a&gt;挑书第四式：预估对个人的实用价值&lt;/h4&gt;&lt;p&gt;“买书如山倒，看书如抽丝”是多数人的真实写照，所以有时我也特别能理解女生为何喜欢整天买化妆品衣服包包之类的。对于这种情况，我一般这样选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在未来一年自己用不上的技术知识，不买相关书籍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未来一年可能过时或淘汰的技术知识（比如Flash、塞班等），不买相关书籍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;挑选与当前自身能力要求相近或高一点的书籍，至少能看懂半本书的，当年初学二进制逆向，看《网络渗透技术》一书就跟天书一般，没几年的技术功底积累，也根本看不懂此书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可能绝版的好书，也可考虑提前购买，即使当前看不懂，还说《网络渗透技术》这书，后来我在淘宝双倍价购买打印版了，现在china-pub上也可以双倍价购买此书，不过封面已换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;挑书第五式：打铁仍需自身硬&quot;&gt;&lt;a href=&quot;#挑书第五式：打铁仍需自身硬&quot; class=&quot;headerlink&quot; title=&quot;挑书第五式：打铁仍需自身硬&quot;&gt;&lt;/a&gt;挑书第五式：打铁仍需自身硬&lt;/h4&gt;&lt;p&gt;遥想当年，我看的第一本安全书籍叫《黑客入门》，当时挑书的标准是：必须带有“黑客”两个字，否则不看。&lt;/p&gt;
&lt;p&gt;过一段时间，发现这些书籍对提高技术并没有什么作用，然后开始找大学计算机课程开始从基础学起。&lt;/p&gt;
&lt;p&gt;这个转折点，要从《深入理解计算机系统》开始，然后又开始学汇编、C/C++、数据结构与算法等等基本课。&lt;/p&gt;
&lt;p&gt;当自己积累得越来越多的时候，能看懂的书就越多，对技术书籍的好坏判断，自然就有自己的评判标准。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fx2rvlwgu4j309j0b4dhn.jpg&quot; alt=&quot;WX20180707-203543&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;双十一，一年一度的”屯书日“又到了。&lt;/p&gt;
&lt;p&gt;鄙人生平无其它购物嗜好，唯有购书。&lt;/p&gt;
&lt;p&gt;在电子书横行的时代，各类读书应用都在崛起，比如”微信读书“、”QQ阅读“、”掌阅“等，个人习惯用微信读书，因为有社交好友的阅读推荐，以及公司送的读书券，所以基本也都是免费的
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（5）—— Intel Processor Trace</title>
    <link href="http://riusksk.github.io/2018/10/14/honggfuzz5/"/>
    <id>http://riusksk.github.io/2018/10/14/honggfuzz5/</id>
    <published>2018-10-14T01:48:40.000Z</published>
    <updated>2018-12-01T02:58:14.000Z</updated>
    
    <content type="html">&lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代码覆盖率监控，比如afl、bochpwn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬件级技术：使用Intel Processor Trace（PT）技术，比如honggfuzz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Intel-PT&quot;&gt;&lt;a href=&quot;#Intel-PT&quot; class=&quot;headerlink&quot; title=&quot;Intel PT&quot;&gt;&lt;/a&gt;Intel PT&lt;/h4&gt;&lt;p&gt;Intel® Processor Trace (Intel® PT) 是在i5/i7 5000以上型号上加入的功能，由于它是硬件级的特性，相比Qemu或Boch，在性能上和代码工作量会占有一定优势。在Linux上可以通过perf来使用PT，可以先简单看是否支持PT：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看是否支持PT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls /sys/devices/intel_pt/format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;追踪程序执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;perf record -e intel_pt// program&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以使用开源工具&lt;a href=&quot;https://github.com/andikleen/simple-pt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;simple-pt&lt;/a&gt;中的ptfeature命令行工具来检测:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./ptfeature pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Supports PT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最新版GDB也支持pt功能了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gdb program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record btrace pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record instruction-history /m	# show instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record function-history		# show functions executed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;honggfuzz-perf-event-open&quot;&gt;&lt;a href=&quot;#honggfuzz-perf-event-open&quot; class=&quot;headerlink&quot; title=&quot;honggfuzz perf_event_open&quot;&gt;&lt;/a&gt;honggfuzz perf_event_open&lt;/h4&gt;&lt;p&gt;在程序内通过&lt;code&gt;perf_event_open&lt;/code&gt;（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perf_event_open.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将返回的文件描述符传递给mmap映射为可读写的用户内存空间，以便从中读取PT记录的追踪数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/mmapbuf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PT记录的追踪数据采用压缩的二进制格式输出，每秒每个CPU都会持续记录并输出，由于是硬件记录的，最早自然是出现在内核空间，为了使用它，就需要将其导出到用户空间，即通过前面mmap方法映射到用户可写的内存空间，然后再去定位数据解码。PT导出的追踪数据被存储在一个叫&lt;code&gt;AUX space&lt;/code&gt;的内存区域，它相对&lt;code&gt;perfMmapBuf&lt;/code&gt;的偏移记录在&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_offset&lt;/code&gt;，大小为&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_size&lt;/code&gt;，上面代码的第二步&lt;code&gt;mmap&lt;/code&gt;就是去映射&lt;code&gt;AUX space&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是利用libpt来解码捕获到追踪数据，实现函数位于perf_ptAnalyzePkt中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/ptAnalyzePkt.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后将执行到的BB基本块信息更新到feedback map，之后的实现步骤就跟本系列第1篇驱动反馈中所讲的一致。&lt;/p&gt;
&lt;p&gt;跑起来的效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxr27bx6jnj30ks08245z.jpg&quot; alt=&quot;image-20181201105755833&quot;&gt;&lt;/p&gt;
&lt;p&gt;到这里，关于《honggfuzz漏洞挖掘技术深究系列》的文章先暂告一段落了，它就相当于是自己的学习笔记，也可以留作日后查询。&lt;/p&gt;
&lt;p&gt;本系列的其它文章如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&amp;amp;chksm=fb04159acc739c8c36e0785e2ce9c3a202066c6cc39a9ce32fd0fc9dfeb348e860a82e29c9d6&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483780&amp;amp;idx=1&amp;amp;sn=8e634a1deb08006063156db60b1c1f77&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（2）—— Persistent Fuzzing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483819&amp;amp;idx=1&amp;amp;sn=daed3baf16e1211d6d869183ba1680f4&amp;amp;chksm=fb041553cc739c457d54494c99d1870488dfa76831fde40a351098b0fcfcdb9f716a473ba213&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483828&amp;amp;idx=1&amp;amp;sn=e96241ce399781414db3ba556ce1f90d&amp;amp;chksm=fb04154ccc739c5a12176eb7492e80abfd36e630193627ba140394e678e47ee2b0f1532516b1&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer</title>
    <link href="http://riusksk.github.io/2018/10/02/honggfuzz4/"/>
    <id>http://riusksk.github.io/2018/10/02/honggfuzz4/</id>
    <published>2018-10-02T01:35:52.000Z</published>
    <updated>2018-10-02T02:54:52.000Z</updated>
    
    <content type="html">&lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文件作变异，对于doc最好是作文件格式解析，只对感兴趣的stream作文件变异，这样的fuzzing的有效性才会更高。&lt;/p&gt;
&lt;p&gt;庆幸地是，honggfuzz提供&lt;code&gt;-c&lt;/code&gt;参数用于扩展变异规则以代替原有变异方式，同时提供有&lt;code&gt;--pprocess_cmd&lt;/code&gt;在原有的文件变异后再作处理：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--mutate_cmd|-c VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command producing fuzz files (instead of internal mutators)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--pprocess_cmd VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command postprocessing files produced by internal mutators&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;功能比较有用，也是我用得比较多的，另一个&lt;code&gt;--pprocess_cmd&lt;/code&gt;基本我没用过。&lt;/p&gt;
&lt;p&gt;当你通过&lt;code&gt;-f&lt;/code&gt;提供输入样本目录后，在fuzzing时，随机提取的文件会直接传递给&lt;code&gt;-c&lt;/code&gt;参数指定的扩展命令作变异。&lt;/p&gt;
&lt;p&gt;比如想针对某文件特定offset范围内的内容进行变异，下面是针对macOS/iOS字体文件中的虚拟指令作Fuzzing时写的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; randint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_START = &lt;span class=&quot;number&quot;&gt;0x16D8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_END   = &lt;span class=&quot;number&quot;&gt;0x304D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIN_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAX_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.DS_Store&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;r+b&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped = mmap.mmap(f.fileno(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#print &quot;file size: 0x%x&quot; % len(mapped)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_to_flip = randint(MIN_BYTES_TO_FLIP, MAX_BYTES_TO_FLIP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_flipped = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; bytes_flipped &amp;lt; bytes_to_flip:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_pos = randint(RANGE_START, RANGE_END)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print &quot;byte_pos: 0x%x&quot; %byte_pos &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_new = chr(randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapped[byte_pos] = byte_new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bytes_flipped += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;变异效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/font_rangfuzz.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后挖到一个TTF字体虚拟指令漏洞：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;orig file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【CD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;poc file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【DD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glyf table -&amp;gt; SimpleGlyf[] -&amp;gt; Instructions(&amp;apos;0xCD&amp;apos; =&amp;gt; ‘0xDD&amp;apos;) -&amp;gt; MDRP指令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，你也可以写个doc、docx等office文件格式解析并变异的扩展fuzzer，比如利用olefile库（但只支持修改同等大小不变的doc，要插入或删除需要自行实现），或者通过COM接口来实现操作。&lt;/p&gt;
&lt;p&gt;比如之前有段时间doc中的公式编辑器存在很多漏洞，你就可以专门针对&lt;code&gt;Equation Native&lt;/code&gt;流作fuzzing。&lt;/p&gt;
&lt;p&gt;最后放两张图(riufuzz是自己对honggfuzz二次开发的版本，后面有机会再讲)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/olefuzz.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/doc_crash.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略</title>
    <link href="http://riusksk.github.io/2018/09/16/honggfuzz3/"/>
    <id>http://riusksk.github.io/2018/09/16/honggfuzz3/</id>
    <published>2018-09-16T03:54:16.000Z</published>
    <updated>2018-10-02T01:49:03.000Z</updated>
    
    <content type="html">&lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用动态fuzz或者静态fuzz的方法，但最后都是调用mangle_mangleContent来变异文件数据：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-3bdc1da036608cc745ef0cb89c2313ea_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 跟进mangle_mangleContent函数：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-529248182e9e09517288c6cbc0f4152d_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 重点就在于后半部分，它会随机选择变异函数进行处理，更改的字节数也是随机的，根据用户指定的mutation变异率来定，即允许变异文件大小的百分比，变异函数列表如下：&lt;/p&gt;
 &lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9450da60b2082522f7aa9dff7757a921_hd.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt; 这些函数都是在mangle_init中初始化，各函数之间也会相互调用：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-025eaad0cd3d34fb828240b30469bede_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 把这些函数过一遍就是honggfuzz中所有的文件变异规则了，如果想实现自己的fuzzer，这些规则来扣出来用Python实现一遍，顺便把afl的规则也扣过来就更完美了，下面是我之前写office fuzzer时的半成品代码，最后偷懒直接用radamas去实现变异了：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-a0d2b4262c74f02388926e1829e70a37_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 再回到刚才的变异函数列表，我们一个个走读源码。&lt;/p&gt;
&lt;p&gt; 1、mangle_Resize函数：&lt;/p&gt;
&lt;p&gt; 用空格填充随机位置&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e43d8f246b8fcb2408bc0c8700baa2_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8875c992f90668d4a2be2817ee32acc8_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2、mangle_Byte函数：&lt;/p&gt;
&lt;p&gt; 向随机位置写随机的uint8类型的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-b857966a5c005b1e95f80512382933d6_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 3、mangle_Bit函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数值做位翻转&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-179d9066a2fd1fc2653f335ce5a41f72_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 4、mangle_Bytes函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖写2~4字节数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4857e9d3d3fb2722bb4705cff49d9bc9_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 5、mangle_Magic函数：&lt;/p&gt;
&lt;p&gt; 取各种边界值进行覆写，这些边界值部分跟AFL还不一样，我在自己的fuzzer里面把它们作了整合。由于边幅所限，我省略了不少边界值：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8b34894b9c1fe0833e95dc6d426ff8fb_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 6、mangle_IncByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据加1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-ea765d0bf263d6aed9cdaf94a1065631_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 7、mangle_DecByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据减1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bc2bf5117cb1495783b2d5501623e602_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 8、mangle_NegByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据取反&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4ef170d3cbb5915de395b7f7aa304079_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 9、mangle_AddSub函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的1、2、4或8字节的数据长度作加减操作，操作数取 rand(0~8192)-4096&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-66a0ed1564725c2dbdf05439e6e26295_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 10、mangle_Dictionary函数：&lt;/p&gt;
&lt;p&gt; 变异目录名，也是随机取文件夹名称进行变异，如果有多个目录，那被变异的目录数也是随机的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-d5aaeb860ab0f32d1283e2d987e456ad_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 11、mangle_DictionaryInsert函数：&lt;/p&gt;
&lt;p&gt; 在目录的随机位置中插入随机数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0fa9250d8e778ca02841b66fc08a00ce_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 12、mangle_MemMove函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据拷贝随机长度的数据，里面就是调用memmove函数实现的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-eabb7cafe2e6042ef8bd2e18d526b9df_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 13、mangle_MemSet函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小，用UINT8_MAX数值填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-82430bbef8b74651aea3a1bdeca9b2dc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 14、mangle_Random函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小的缓冲区，用随机数填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e9a2621714c7a6d88dc68c4a859979_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 15、mangle_CloneByte函数：&lt;/p&gt;
&lt;p&gt; 取两处随机位置的作数据交换&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-cac0e8c50be64a1174f9b7a6cc924a5e_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 16、mangle_Expand函数：&lt;/p&gt;
&lt;p&gt; 文件末尾扩展随机长度的空间，用空格填充，然后在随机位置，取前面的随机长度作数据拷贝&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0e199dd7f82c223a928ead2b7a6cdd04_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bb4820b762220d720d78928d34e923e1_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 17、mangle_Shrink函数：&lt;/p&gt;
&lt;p&gt; 删除随机长度的文件内容&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-010ccb9f2dd19bd450b655cb9f9c7209_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 18、mangle_InsertRnd函数：&lt;/p&gt;
&lt;p&gt; 在文件的随机位置插入随机长度的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-325836aaf17585d5a02265ae000b72fc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 19、mangle_ASCIIVal函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖32字节的随机数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0385d1c51fda364543b22c77067b28ac_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 总结&lt;/p&gt;
&lt;p&gt; 在Fuzzing过程中，很多变异规则是共用的，可以参考一些主源的开源软件，比如afl\peach\honggfuzz\libfuzzer，提取规则作整合，然后写个自己的fuzzing框架，在后面作针对的fuzzer时，可以直接套用。&lt;/p&gt;
&lt;p&gt; 从上面的fuzz策略可以总结出常规的变异规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机数据替换&lt;/li&gt;
&lt;li&gt;数据值增减&lt;/li&gt;
&lt;li&gt;已知边界值替换&lt;/li&gt;
&lt;li&gt;插入随机数据&lt;/li&gt;
&lt;li&gt;删减文件内容&lt;/li&gt;
&lt;li&gt;目录变异&lt;/li&gt;
&lt;li&gt;数据拷贝覆盖&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>知识的诅咒</title>
    <link href="http://riusksk.github.io/2018/09/15/%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92/"/>
    <id>http://riusksk.github.io/2018/09/15/知识的诅咒/</id>
    <published>2018-09-15T05:45:05.000Z</published>
    <updated>2018-09-15T05:50:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、过于装逼的演讲-废话&quot;&gt;&lt;a href=&quot;#一、过于装逼的演讲-废话&quot; class=&quot;headerlink&quot; title=&quot;一、过于装逼的演讲 = 废话&quot;&gt;&lt;/a&gt;一、过于装逼的演讲 = 废话&lt;/h3&gt;&lt;p&gt;无论是演讲还是写文章，你对一帮不懂安全技术的人讲溢出，讲UAF漏洞利用，那纯粹是浪费时间。&lt;/p&gt;
&lt;p&gt;早年觉得分享就该讲一些多数人不懂的东西，尤其是那些自认为高深的技术，让大家听得云里雾里的，这样才显得自己技术牛逼。&lt;/p&gt;
&lt;p&gt;但实际上，别人听不懂的东西，对其而言，均是废话。&lt;/p&gt;
&lt;p&gt;当我们对一件事物过于了解之后，往往意识不到自己对它的思考有多么的抽象。&lt;/p&gt;
&lt;p&gt;比如“辐射”一词，大家常常说手机有辐射，X线有辐射，但又有几人能解释清楚什么叫“辐射”呢？&lt;/p&gt;
&lt;p&gt;正是我们高估了一般读者/听众对我们所处知识世界的熟悉程度，才造就了“知识的诅咒”。&lt;/p&gt;
&lt;h3 id=&quot;二、高学历造就知识面的狭窄&quot;&gt;&lt;a href=&quot;#二、高学历造就知识面的狭窄&quot; class=&quot;headerlink&quot; title=&quot;二、高学历造就知识面的狭窄&quot;&gt;&lt;/a&gt;二、高学历造就知识面的狭窄&lt;/h3&gt;&lt;p&gt;鄙人深深地觉得，高中时代就是我们知识面最丰富的时代，那时候真的是上知天文，下知地理，中知英汉语，左手历史，右手政治，无所不会，无所不能，虽然也常常只是勉强及格，但回首这二三十年，知识面依然还是没广过高中啊！&lt;/p&gt;
&lt;p&gt;之前也面试过一些博士生，有些博士几年只搞个TLS，或者只搞个android app的数据流找隐私泄露之类，这种搞学术研究并无问题，但一旦想进入企业就很难。&lt;/p&gt;
&lt;p&gt;这里也不是鄙视博士生，只是知识的深度和广度的选择而已，但这得看你未来选择的方向而定了。&lt;/p&gt;
&lt;h3 id=&quot;三、学医历程：从“一身病”到“百病不侵”&quot;&gt;&lt;a href=&quot;#三、学医历程：从“一身病”到“百病不侵”&quot; class=&quot;headerlink&quot; title=&quot;三、学医历程：从“一身病”到“百病不侵”&quot;&gt;&lt;/a&gt;三、学医历程：从“一身病”到“百病不侵”&lt;/h3&gt;&lt;p&gt;学医的前一两年，学到啥病就觉得自己可能就有这病，最后就是感觉自己一身病，我们一般叫这为：“学医综合征”。&lt;/p&gt;
&lt;p&gt;到后来下临床了，见过的病多了，更多恶心的、血腥的、神经的病症都见了个遍，自己抗恶心能力提高的不是一两万点啊，而且慢慢地认识到，其实世上很多疾病都是没法治的，如果你们有认识肾内科的医生朋友，问问他们就知道啥叫“挫败感”！&lt;/p&gt;
&lt;p&gt;慢慢地，就觉得只要不死不残的病，都不算事。&lt;/p&gt;
&lt;h3 id=&quot;四、贩卖知识焦虑&quot;&gt;&lt;a href=&quot;#四、贩卖知识焦虑&quot; class=&quot;headerlink&quot; title=&quot;四、贩卖知识焦虑&quot;&gt;&lt;/a&gt;四、贩卖知识焦虑&lt;/h3&gt;&lt;p&gt;最近关注的一批公众号，开始文末各种课程广告，学英语、学写作、学开发各类广告满天飞，利用的正是人们对知识的焦虑。&lt;/p&gt;
&lt;p&gt;之前的文章也提到过，多数的付费知识很多系统化的学习到知识，之前也买过一些讲书的、或者一些通用技能课程，一开始觉得挺有道理的，最后细想下，其实几乎都没有任何可实践性的方法，很多讲的最后还是废话。当然，有些个别付费知识还是不错，不过我所依赖的付费知识只有书本。&lt;/p&gt;
&lt;h3 id=&quot;五、知识学习中的套路与陷阱&quot;&gt;&lt;a href=&quot;#五、知识学习中的套路与陷阱&quot; class=&quot;headerlink&quot; title=&quot;五、知识学习中的套路与陷阱&quot;&gt;&lt;/a&gt;五、知识学习中的套路与陷阱&lt;/h3&gt;&lt;p&gt;以前还没接触过电脑的时候，就听说要先练五笔打字，要练五笔就得先背字根口诀：&lt;br&gt;“王旁青头戋（兼）五一， 土士二干十寸雨……”&lt;/p&gt;
&lt;p&gt;不过最后我没背也练成了五笔，全靠实际打字练习练出来的。&lt;/p&gt;
&lt;p&gt;熟练之后，所有文字均会变成脑海中的一个手指的动作，所有关于五笔的知识全变成一种抽象化动作，无什么字根，无什么键盘位……&lt;br&gt;所以，很多时候网上说：学习A就得先学习B不一定靠谱，只有实践出真知。&lt;/p&gt;
&lt;p&gt;记得以前大学时打算学习数据结构与算法，网上查了下，说需要先学习离散数学，然后我就得真去图书馆翻离散数学，最后没看几页就放弃了。&lt;/p&gt;
&lt;p&gt;这事跟别人说“学Java要先看《Java编程思想》”一样，谁会在无基础的情况下硬看得下去啊！&lt;/p&gt;
&lt;p&gt;可见找到一种适合自己的学习途径才是最好的方法。自己学得哪本书好，就学哪本书，哪来那么多规矩。&lt;/p&gt;
&lt;p&gt;能够为己所用，则为知识；但倘若被知识所用、所卖、所困，则为诅咒。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、过于装逼的演讲-废话&quot;&gt;&lt;a href=&quot;#一、过于装逼的演讲-废话&quot; class=&quot;headerlink&quot; title=&quot;一、过于装逼的演讲 = 废话&quot;&gt;&lt;/a&gt;一、过于装逼的演讲 = 废话&lt;/h3&gt;&lt;p&gt;无论是演讲还是写文章，你对一帮不懂安全技术的人讲溢出
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（2）—— Persistent Fuzzing</title>
    <link href="http://riusksk.github.io/2018/08/22/honggfuzz%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF2/"/>
    <id>http://riusksk.github.io/2018/08/22/honggfuzz漏洞挖掘技术2/</id>
    <published>2018-08-22T12:21:28.000Z</published>
    <updated>2018-08-22T13:12:36.000Z</updated>
    
    <content type="html">&lt;p&gt;上篇&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）》&lt;/a&gt;讲到基于软件的代码覆盖率驱动fuzzing的方式，除了软件还有硬件方式，即基于Intel BTS (Branch Trace Store) 或Intel PT (Processor Tracing) 去计算代码覆盖率，同时要求Linux内核&amp;gt;=4.2，这种方式的最大好处是完全由硬件支配，无所谓软件是闭源还是开源。由于硬件环境受限，我也一直未使用过，有此条件的同学可以试下。&lt;/p&gt;
&lt;p&gt;本篇主要讲下持久型fuzzing（Persistent Fuzzing），即fuzzing API，这种方式会更精准和高效的。&lt;/p&gt;
&lt;p&gt;先看使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat test.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;inttypes.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;testlib.h&amp;gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; **buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; *len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _FuncFromFuzzedLib_(buf, len);  &lt;span class=&quot;comment&quot;&gt;// 目标函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ clang&lt;span class=&quot;number&quot;&gt;-4.0&lt;/span&gt; -fsanitize-coverage=trace-pc,indirect-calls,trace-cmp fuzzedlib.c -o fuzzedlib.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ clang&lt;span class=&quot;number&quot;&gt;-4.0&lt;/span&gt; test.c fuzzedlib.o honggfuzz/libhfuzz/libhfuzz.a -o test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ honggfuzz -z -P -f INPUT.corpus -- ./test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用到几个编译选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;trace-pc&lt;/strong&gt;：追踪执行过的基本块BB，在每个edge中插入__saitizer_cov_trace_pc()函数，可定义该函数作为相应的回调处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;indirect-calls&lt;/strong&gt;：在每个间接调用中添加PC追踪，与前面的trace-pc或trace-pc-guard联合使用，回调函数：__sanitizer_cov_trace_pc_indir&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trace-cmp&lt;/strong&gt;：追踪每个比较指令和swith语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以trace-pc为例，测试代码如下：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/trace_pc1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;br&gt;用trace_pc编译：&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/trace_pc2.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;可以看到自定义的函数被执行，输出执行过的不同pc地址，其它编译选项的用法同上。&lt;br&gt;下面是honggfuzz对各个回调函数的定义情况：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/instrument.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;然后就是记录代码覆盖率情况并进行统计，跟驱动反馈的方式一样了。&lt;/p&gt;
&lt;p&gt;再回头看使用示例中的&lt;code&gt;LLVMFuzzerTestOneInput&lt;/code&gt;函数,honggfuzz是如何处理它的呢？&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/persistent.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;通过for无限循环调用目标函数进行Fuzzing，其中参数buf，即样本文件内容，len是数据长度。&lt;/p&gt;
&lt;p&gt;最后根据发现的新路径，将相应的样本作为新样本继续fuzzing。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/fuzz_back.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

















</content>
    
    <summary type="html">
    
      &lt;p&gt;上篇&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&quot; target
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="fuzzing" scheme="http://riusksk.github.io/tags/fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>从攻防角度谈黑客与程序员</title>
    <link href="http://riusksk.github.io/2018/08/11/%E4%BB%8E%E6%94%BB%E9%98%B2%E8%A7%92%E5%BA%A6%E8%B0%88%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://riusksk.github.io/2018/08/11/从攻防角度谈黑客与程序员/</id>
    <published>2018-08-11T03:12:45.000Z</published>
    <updated>2018-08-11T03:28:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，然，“知攻未必知防”！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01 — 黑客的敌人是程序员&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客所要攻破的任何一款产品，无论是网站、软件还是IoT硬件产品，这些都是由程序员开发的，所以他们要攻破的其实是程序员的安全思维缺陷。&lt;/p&gt;
&lt;p&gt;所以说，黑客的敌人是程序员。但如果黑客本身就是程序员呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;02 — 会开发的黑客：知己知彼，百战不殆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时某些大厂的漏洞致谢公告放出后，可能会出现连续几个月，某类漏洞突然暴增。因为程序员也常常会出现习惯性错误，比如习惯用memcpy危险函数，且不校验size，那么有一必有二，有可能顺藤摸瓜找到一堆此类漏洞。&lt;/p&gt;
&lt;p&gt;上面这种情况就是黑客从程序员的角度入手，去寻找突破口。&lt;/p&gt;
&lt;p&gt;在之前的工作中，也遇到过一些不懂安全的程序员，在转入安全漏洞挖掘领域后，能够快速上手，挖到不少Android等大厂产品的漏洞。这也利益于此前的开发基础，具备开发能力的程序员比只懂安全的技术人员更容易在安全道路上走得更远更深。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;黑客是否需要精通开发？&lt;/strong&gt;这是个老生常谈的问题了。&lt;/p&gt;
&lt;p&gt;如果你去看一些黑客大牛或漏洞挖掘高手写的代码，你会发现有时他们写得也跟我们一样烂。&lt;/p&gt;
&lt;p&gt;但也不是说搞安全就不需要学编程开发了，而是必学课程。只是，很多情况下，黑客具备的是基础开发能力，而非开发产品的能力，两者还是有区别的。但其实也不是绝对，我说的只是一种普遍情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于安全从业人员，掌握基础开发能力是必备的，而是否具备产品开发能力成了一道分水岭。即，产品开发能力是加分项，而非必备项。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;03 — 懂安全的程序员：无存在感&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://riusksk.me/media/god.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;先来看一幅漫画，估计这是许多安全开发同学的心声：防御住了，用户无感知；未防御住，用户就开始骂娘了，或者受公司处罚。&lt;/p&gt;
&lt;p&gt;程序员开发的产品出安全事故，肯定会受到处罚。大家常调侃道：CSO就是用来背锅的，多少有些道理。&lt;/p&gt;
&lt;p&gt;但如果懂安全的程序员开发出具有高安全性的产品，对用户，甚至对领导而言，都可能是无感知，跟不存在一般。&lt;/p&gt;
&lt;p&gt;常说赏罚分明，但上述普遍情况明显是不对等、不完善的赏罚机制。所以现在也有一些公司慢慢地增设“开发之星”、“质量之星”之类的奖励机制，也算是对此的一种弥补措施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;04 — 攻防不对等：攻击的是短板，防御的是体系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客攻击时，只需要找到系统的一处短板，就有可能攻破系统。&lt;/p&gt;
&lt;p&gt;业务防御时，则需要构建全面的防御体系，比黑客掌握更加全面的攻击点和防御策略，而非单一的技术点或者功能模块。&lt;/p&gt;
&lt;p&gt;因此，防御比攻击更难，两者是不对等的。&lt;/p&gt;
&lt;p&gt;有些大厂，比如微软就设有“纵深防御”奖励机制。纵深防御，通俗地讲，就是层层防御，一层防御失效后，仍有备用的其它防御策略生效。&lt;/p&gt;
&lt;p&gt;比如电影《侠盗联盟》中，去城堡偷项链的场景：&lt;/p&gt;
&lt;p&gt;翻过城墙后 =》还有保安 =》绕过保安后还有监控 =》绕过监控后还有防盗门 =》 进门后还有看门狗 =》最后还有指纹验证&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://riusksk.me/media/v2-838f8dccd10d662cbdd11f0972181b8f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;05 — 知攻未必知防&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，对此我一直深信不疑。&lt;/p&gt;
&lt;p&gt;但这是必要不充分条件，因为现在互联网越来越方便，工具化、教程化的资源网上遍地都是，很多脚本小子随手就可以拿来入侵网站，但让他们提供防御方案，基本都要歇菜。&lt;/p&gt;
&lt;p&gt;之前面试过几个做渗透测试的同学，当问某个WEB漏洞的防御时，对方直接说，他只做攻击，不做防御，不懂这些。&lt;/p&gt;
&lt;p&gt;对于企业而言，让你做攻击测试的目的，还是为了提前作防御，如果只知攻，不懂防，又有多大价值呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;06 — 结语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于不懂产品开发的黑客，以及不懂安全的程序员，我们均表示理解；对于即懂安全又懂开发的同学，我们则爱之、惜之。但无论你是黑客（白帽子：无任何违法乱纪行为），还是程序员，如对【微信支付安全】感兴趣，均可私信本账号，共讨职业发展大计，承诺每条有效私信必回，欢迎搭讪。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，然，“知攻未必知防”！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01 — 黑客
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="攻防" scheme="http://riusksk.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
      <category term="黑客" scheme="http://riusksk.github.io/tags/%E9%BB%91%E5%AE%A2/"/>
    
      <category term="程序员" scheme="http://riusksk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）</title>
    <link href="http://riusksk.github.io/2018/07/29/honggfuzz%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF1/"/>
    <id>http://riusksk.github.io/2018/07/29/honggfuzz漏洞挖掘技术1/</id>
    <published>2018-07-29T01:54:40.000Z</published>
    <updated>2018-10-02T03:09:09.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;“&lt;/strong&gt; 反馈驱动：通过监控样本触发的代码覆盖率，进而改进输入样本以提高代码覆盖率，增加发现漏洞的概率。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9f0fe133af6f259bcc310cb7f1f14083_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前业界中基于代码覆盖率的最著名的三大Fuzzer，当属Google开发的AFL、libfuzzer和honggfuzz，且他们都是开源的，在github上都可以搜索到。&lt;/p&gt;
&lt;p&gt;相信很多搞fuzzing的同学都听过或用过这三款工具，本系列主要讲honggfuzz的原理与应用，之前把honggfuzz源码都阅读过一遍，并且二次开发过，该工具的挖洞效果还是不错的。&lt;/p&gt;
&lt;h2 id=&quot;01-—-关于代码覆盖率的那些事&quot;&gt;&lt;a href=&quot;#01-—-关于代码覆盖率的那些事&quot; class=&quot;headerlink&quot; title=&quot;01 — 关于代码覆盖率的那些事&quot;&gt;&lt;/a&gt;&lt;strong&gt;01 — 关于代码覆盖率的那些事&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;计算代码覆盖率情况就需要有个计量单位，通常有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数（Fuction-Level）&lt;/li&gt;
&lt;li&gt;基本块（BasicBlock-Level）&lt;/li&gt;
&lt;li&gt;边界（Edge-Level）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-e59bc6bc894b1d9aa84b69292ba8f3f8_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 函数（Fuction-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先说下函数，这个很容易理解，就是代码执行时调用到哪些函数，但是函数里面的具体代码行却不作统计，相对比较粗糙但高效的统计方式。&lt;/p&gt;
&lt;p&gt;所以，通常的统计方式是用基本块，简称BB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.基本块（BasicBlock-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是基本块，直接看下图就很容易理解了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-19797c5c8d99a42c36318718f29265d5_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;IDA中每一块代码就代表着一个基本块，就是以指令跳转为作划分界限的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.边界（Edge-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;edge本身就涵盖了基本块部分，唯一的差别是edge多记录了一些执行边界的信息。比如示例代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-22c28c570cf9739b790c4c2969b5b5f2_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在IDA中可以看到A、B、C这3个基本块，但当a为假时，程序就会从A执行到C。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9544f8e035e1874da0a0368ad39aa926_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前面基本块的方式就无法确切地知道是否曾从A执行到C，尤其是该段代码被多次执行的情况，就更无法知道，这时edge覆盖方式就出现了。&lt;/p&gt;
&lt;p&gt;edge会在A跟C之间建立虚拟块D，通过判断D是否执行过，来确认是否曾从A执行到C，这种方式也会比较消耗性能就是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-6a1b97ef1552f83c2e77b5ef2c927093_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;统计代码覆盖率又分两种情况：&lt;/p&gt;
&lt;p&gt;1.【有源码】：直接使用SanitizerCoverage即可，在编译选项中添加相应的覆盖率统计方式，比如基本块统计方式可以添加：&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;CFLAG=“-fsanitize=address -fsanitize-coverage=bb”&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-0b937d36b150db10b68416ecee96a18f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.【无源码】：使用Pin、DynamoRIO等二进制插桩工具去hook统计，或者pediy改指令的方式去监控也是可以的，本系列的后续文章可能会细说。&lt;/p&gt;
&lt;h2 id=&quot;02-—-Honggfuzz反馈驱动原理&quot;&gt;&lt;a href=&quot;#02-—-Honggfuzz反馈驱动原理&quot; class=&quot;headerlink&quot; title=&quot;02 — Honggfuzz反馈驱动原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;02 — Honggfuzz反馈驱动原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本文我们默认以基本块作为代码覆盖率的统计方式，比如采用如下编译选项：&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;ASAN_OPTIONS=coverage=1:coverage_direct=1 -fsanitize=address -fsanitize-coverage=bb&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;执行后它会生成两个文件：&lt;em&gt;.sancov.map和&lt;/em&gt;.sancov.raw，这是honggfuzz处理过的scancov文件。&lt;/p&gt;
&lt;p&gt;其中&lt;em&gt;.sancov.map文件记录是模块信息，&lt;/em&gt;.sancov.raw文件则记录着执行过的基本块地址信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-fcc18ec6efcedcd5b19e4428b6844294_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、首先，honggfuzz会先去分析.sancov.raw文件，保存命中的基本块地址，记录BB数，以及总共的BB数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-be7bc26166e0f1d376ba1c712cf61b59_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、计算代码覆盖率 = 命中BB数 / (命中BB数 + 未命中的BB数)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-e9348eaa3c3712994d135045c8530231_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是旧版honggfuzz关于coverage的显示内容格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-67391dd336b6e4e343244f994c6aa52f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;新版的变成只记录BB/edge数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-033f35d3e5e67fdd9661ca42c7b06cf9_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、发现新路径或者新插桩链接库加载，则添加此变异样本为新的输入样本，供后面作进一步变异，以触发更多新路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-a2fec1e1ca91bbcefabe770da1b6d6b2_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;03-—-总结&quot;&gt;&lt;a href=&quot;#03-—-总结&quot; class=&quot;headerlink&quot; title=&quot;03 — 总结&quot;&gt;&lt;/a&gt;&lt;strong&gt;03 — 总结&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;honggfuzz最早创建于2015年，跟AFL的发布时间差不多，AFL的出现可以说在安全界是项里程碑标志，给漏洞挖掘技术带来新的技术革命，网上对其源码分析的文章也到处可见，但对honggfuzz的详细分析还没有，因此才作此系列记录下。&lt;/p&gt;
&lt;p&gt;个人也曾给honggfuzz贡献过代码，但由于某次pull request未被采用，于是就自己二次开发不再提交合并。因为我是在macOS下开发，而原作者主要是用Linux，那次提交的功能对我很有用，所以只好自己维护一份二次开发版本。&lt;/p&gt;
&lt;p&gt;后来自己也在Windows和macOS平台上扩展了许多新功能，在本系列文章中，后面可能会单篇聊一聊，也感谢作者robertswiecki开发出这么好用的fuzzer，让我借此刷了不少CVE。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt; 反馈驱动：通过监控样本触发的代码覆盖率，进而改进输入样本以提高代码覆盖率，增加发现漏洞的概率。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9f0fe133
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="fuzzing" scheme="http://riusksk.github.io/tags/fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>编译原理在安全领域的应用</title>
    <link href="http://riusksk.github.io/2018/07/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    <id>http://riusksk.github.io/2018/07/21/编译原理与安全/</id>
    <published>2018-07-21T00:19:43.000Z</published>
    <updated>2018-07-22T04:20:47.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是编译原理&quot;&gt;&lt;a href=&quot;#什么是编译原理&quot; class=&quot;headerlink&quot; title=&quot;什么是编译原理&quot;&gt;&lt;/a&gt;什么是编译原理&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/640.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;上图是我从《编译系统透视：图解编译原理》里面扣出来的，基本包括编译原理的各个主要方面，从中可以对编译原理有个大体认识。&lt;/p&gt;
&lt;p&gt;专业点来讲，编译原理就是介绍编译程序构造的一般原理和基本方法，内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。&lt;/p&gt;
&lt;p&gt;之前在知乎上看到过一份视频，讲的是程序员编写的代码如何被计算机识别，并在CPU上运行，如果你未曾学习编译原理，推荐观看一下（视频时长11:34）。&lt;/p&gt;
&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=b0694sp0u3a&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;    

&lt;h3 id=&quot;每个信安学生总有一份叫“污点分析”的毕业设计&quot;&gt;&lt;a href=&quot;#每个信安学生总有一份叫“污点分析”的毕业设计&quot; class=&quot;headerlink&quot; title=&quot;每个信安学生总有一份叫“污点分析”的毕业设计&quot;&gt;&lt;/a&gt;每个信安学生总有一份叫“污点分析”的毕业设计&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/641.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;污点分析是指将程序从外部获取的数据标记为污点，然后观察污点在程序执行过程中的传播，从而得到程序中的信息流等信息，里面涉及编译原理中的词法语法分析会多一些，主要被应用于恶意软件分析、攻击代码检测等软件安全性分析研究中。&lt;/p&gt;
&lt;p&gt;记得刚参加工作那会，经常到网上搜索安全论文，发现很多信息安全专业的学生大多有做过一份关于“污点分析”的毕业设计，你现在上CNKI就可以搜索到很多，尤以硕士毕业论文居多。&lt;/p&gt;
&lt;p&gt;当时我几乎翻遍网上所有能找到的“污点分析”论文，最后我得出几点结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不求效果，但求理论高深。之前搞flash xss检测，花了几天时间用一堆grep实现的检测工具，挖不了不到大厂的漏洞，包括淘宝、京东这些电商；但也有同学花几个月搞flash actionscript污点分析，虽然有点作用，但从工作效率和结果看，有时高深的理论不见得适合工业界，虽然我的几行grep没法拿来写论文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;千篇一律，天下文章一大抄。下载了一堆同主题方向的论文，发现有的内容改都没改，互相乱抄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以漏洞挖掘的主题居多，但最后总要以挖洞效果结尾，有0day自然最好，没0day就找几个历史漏洞重现下（很多可能是特例化处理的），没历史漏洞就对比几个主流开源的挖洞工具，对比效率、性能等等，最挫的就是连效果都没有就收尾了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有过此般经历后，我已很少再去翻国内的安全论文了，学术论文可能还是以翻阅国外的为主。&lt;/p&gt;
&lt;h3 id=&quot;成熟的技术-≠-成熟的产品&quot;&gt;&lt;a href=&quot;#成熟的技术-≠-成熟的产品&quot; class=&quot;headerlink&quot; title=&quot;成熟的技术 ≠ 成熟的产品&quot;&gt;&lt;/a&gt;成熟的技术 ≠ 成熟的产品&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/642.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;污点分析技术最早是在1976被提出的，2005年左右开始，污点分析应用于二进制漏洞挖掘的研究火了好多年，其实技术已经相对成熟。&lt;/p&gt;
&lt;p&gt;确实有一些人通过污点分析挖掘到不少有价值的主流软件漏洞，但这项技术要落地为一款安全产品还是有很多问题的。&lt;/p&gt;
&lt;p&gt;首要问题就是误报率，之前有同学开发出基于污点分析的源码审计工具，每次外部报告漏洞的时候，复盘时总说能检测出来，只是没人工跟进。但是，检测出来的有成千上万条告警，需要消耗大量人力去排查这又有什么价值呢，本质上，还是没发现嘛！&lt;/p&gt;
&lt;p&gt;这也算是安全运营的问题，深以为，凡是能检测到，但无法人工或自动跟进推动问题解决的，都是徒劳的。&lt;/p&gt;
&lt;p&gt;相信有很多公司都有出过污点分析的安全审计工具，收费的或者开源的，国内的此类安全产品很多最后都不了了之，所以说成熟的技术不等于成熟的产品。&lt;/p&gt;
&lt;p&gt;国外比较著名的商业源码审计工具就是Coverity和Fortify SCA，算做得最好的业界同款产品，但用过的人都知道，检测出来的问题，还是需要投入很多人工成本的。&lt;/p&gt;
&lt;h3 id=&quot;反编译与加固&quot;&gt;&lt;a href=&quot;#反编译与加固&quot; class=&quot;headerlink&quot; title=&quot;反编译与加固&quot;&gt;&lt;/a&gt;反编译与加固&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/643.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;搞逆向的同学都知道IDA、JEB这些著名的逆向工具，平时在无源码的情况下，我们直接通过它们来分析程序逻辑，无需知晓其中涉及各类反编译技术。&lt;/p&gt;
&lt;p&gt;反编译算是编译的逆过程，即将可执行程序转换成程序源码的过程，如果是转换成汇编语言，我们通常称为反汇编；如果是其它语言的（比如C、Java、C#等等），我们统称为反编译。&lt;/p&gt;
&lt;p&gt;不同语言的编译过程还不一样，比如Java是通过JVM虚拟机将字节码转换成CPU认识的指令，而C是直接由编译器转换机器码供CPU执行的，因此它们的反编译过程也不一样。&lt;/p&gt;
&lt;p&gt;所以如果不懂编译原理，又如何开发反编译工具呢？&lt;/p&gt;
&lt;p&gt;有了反编译，自然就有了防反编译的工具，因此造就了各种加壳工具的出现。&lt;/p&gt;
&lt;p&gt;未知攻，焉知防。要开发加固工具，就需要知道反编译原理，要知道反编译原理，又需要知道编译原理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;编译原理 &amp;lt;---&amp;gt; 反编译原理 &amp;lt;---&amp;gt; 加固原理&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;编译原理在漏洞攻防中的应用&quot;&gt;&lt;a href=&quot;#编译原理在漏洞攻防中的应用&quot; class=&quot;headerlink&quot; title=&quot;编译原理在漏洞攻防中的应用&quot;&gt;&lt;/a&gt;编译原理在漏洞攻防中的应用&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/644.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;搞文件Fuzzing，我们可以在样本（收集、筛选、精简）和Fuzzer（策略、方向等）上面下功夫，甚至简单地暴力fuzzing文件都可以挖到漏洞。&lt;/p&gt;
&lt;p&gt;但对于JavaScript、CSS、Flash ActionScript这些脚本呢，直接简单地暴力变异文件根本无法进入正常的解析，做的大多是无用功。&lt;/p&gt;
&lt;p&gt;因此我们需要一个能够准确生成代码的语法生成器，再用它生成fuzzing样本，这里主要涉及编译原理中的语法分析。这方面有著名的开源工具funfuzz（&lt;a href=&quot;https://github.com/MozillaSecurity/funfuzz）、domato（https://github.com/google/domato），下图就domato生成js代码的语法模板片段：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/funfuzz）、domato（https://github.com/google/domato），下图就domato生成js代码的语法模板片段：&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/645.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;除此之外，通过对clang/gcc等开源的编译工具对目标源码进行插桩，以帮助监控fuzz样本的代码覆盖率，反馈给fuzzer作改进，以进一步提高代码覆盖率，这块叫“驱动反馈（feedback-driven），比如著名工具就是afl、libfuzzer、honggfuzz，以后有机会可以专篇讲解此技术。&lt;/p&gt;
&lt;p&gt;还有通过编译器增加防漏洞利用的机制，比如GS、CFG等安全机制，在对抗漏洞攻击上也起到了不小的作用。&lt;/p&gt;
&lt;p&gt;所以通过研究llvm、gcc等编译项目，对漏洞攻防领域也是有一些可作为的地方。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;编译原理在逆向工程、漏洞攻防、软件开发等诸多领域有所应用，有时就看你怎么使用，也并不是每个人在安全工作领域中有机会运用到，但技多不压身，不妨多储备点知识，以免到了“书到用时方恨少”的地步。&lt;/p&gt;
&lt;p&gt;若干年前，挖洞不用污点追踪都不好意思写论文; 现在搞安全不用人工智能都不好意思装逼，能用机器学习的，坚决不用正则；能用DNN的，坚决不用LR回归；能用无监督学习的，坚决不用有监督学习……但你不试下，怎么就知道grep不行呢？&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是编译原理&quot;&gt;&lt;a href=&quot;#什么是编译原理&quot; class=&quot;headerlink&quot; title=&quot;什么是编译原理&quot;&gt;&lt;/a&gt;什么是编译原理&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/640.webp&quot; a
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="编译原理" scheme="http://riusksk.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>谈谈写作</title>
    <link href="http://riusksk.github.io/2018/07/15/%E8%B0%88%E8%B0%88%E5%86%99%E4%BD%9C/"/>
    <id>http://riusksk.github.io/2018/07/15/谈谈写作/</id>
    <published>2018-07-15T02:26:57.000Z</published>
    <updated>2018-07-15T06:29:42.000Z</updated>
    
    <content type="html">&lt;center&gt;“写作，或为利，或为名，或为寻找自我！” —— 题记&lt;/center&gt;

&lt;h2 id=&quot;为利&quot;&gt;&lt;a href=&quot;#为利&quot; class=&quot;headerlink&quot; title=&quot;为利&quot;&gt;&lt;/a&gt;为利&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/money.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;勤工俭学对于多数大学生来说，是件再正常不过的事了。当年作为一介穷书生的我，或许有点“清高”，即使没钱也从没干过。&lt;/p&gt;
&lt;p&gt;只因在图书馆看到了一本杂志，发现内容不错，当时心想能否自己也去投稿，赚点稿费买书，改善下伙食，想必也是极好的。&lt;/p&gt;
&lt;p&gt;刚好杂志尾页留有投稿方式，就开始着手准备。但当时基本没写过文章，文笔与技术积累都不足。&lt;/p&gt;
&lt;p&gt;于是，就从翻译开始，因为它技术要求低一点，且产出快，这就是为什么早期我很多文章都是翻译的原因，除了赚钱，自己也从中学习到不少知识。&lt;/p&gt;
&lt;p&gt;有了一定积累之后，才开始作原创，并逐步帮我实现转行，成功打入安全圈。&lt;/p&gt;
&lt;p&gt;后来用稿费买了电脑、买书、改善伙食等等，对于个人是段相当难忘的回忆。&lt;/p&gt;
&lt;p&gt;这本杂志就叫《黑客防线》，一本影响我人生轨迹的杂志，一本启蒙我进入“唯利是图”写作生涯的杂志。&lt;/p&gt;
&lt;p&gt;现在很多付费知识平台上的文章，其写作目的也大多如此。&lt;/p&gt;
&lt;h2 id=&quot;为名&quot;&gt;&lt;a href=&quot;#为名&quot; class=&quot;headerlink&quot; title=&quot;为名&quot;&gt;&lt;/a&gt;为名&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/9825bc315c6034a891394f2bc013495408237645.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;从医学生转行入IT圈的过程是艰难的，早期投简历，也有某安全公司说不招实习生/临时工（忘记原话了），也有因为说经常投黑防，被某著名安全公司怀疑是搞黑产的，遂均无缘面试机会。但整体上，在其它公司的求职面试的过程还是很顺利的。&lt;/p&gt;
&lt;p&gt;除了投稿，自己也慢慢开始写博客，逛论坛发技术帖。&lt;/p&gt;
&lt;p&gt;在看雪论坛上发表了不少原创技术帖，在小圈子里积累了点名气，为后来求职铺垫了一条路。&lt;/p&gt;
&lt;p&gt;圈子就这么大，你的文章看的人多了，有时在网上、现实生活中，甚至在面试过程中，别人都可能会冒出一句：”原来你就是xxx“。&lt;/p&gt;
&lt;p&gt;所以当时写作是为了那一点名，为转行作准备的，后来也顺利达到目的，毕业后进入腾讯，一直工作到现在，这都是后话了。&lt;/p&gt;
&lt;p&gt;工作后写作变少了，但偶而还是会发表一些技术文章，也有其它杂志社来约稿，比如CSDN的《程序员》：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/programer-2016-09.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;但这些对于一个工作多年的人来说，赚稿费，累名气，似乎已经没多大意义了，对此也就慢慢淡化了。&lt;/p&gt;
&lt;p&gt;再后来，写《漏洞战争》的时候，就知道赚不了几个钱，所以写的时候就提前跟编辑打招呼说了这事，最多也就是赚点名气而已。&lt;/p&gt;
&lt;p&gt;令人庆幸的是，这书出版后，基本没多少骂声，骂的大多是出版社和网上书店，顺利躲过一劫。&lt;/p&gt;
&lt;h2 id=&quot;寻找自我&quot;&gt;&lt;a href=&quot;#寻找自我&quot; class=&quot;headerlink&quot; title=&quot;寻找自我&quot;&gt;&lt;/a&gt;寻找自我&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/1461314133878.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;1、寻找曾经的自我，勿忘初心&quot;&gt;&lt;a href=&quot;#1、寻找曾经的自我，勿忘初心&quot; class=&quot;headerlink&quot; title=&quot;1、寻找曾经的自我，勿忘初心&quot;&gt;&lt;/a&gt;1、寻找曾经的自我，勿忘初心&lt;/h3&gt;&lt;p&gt;以前最早是在博客大巴写文章，写了好多年，可惜它把导出博文的功能关掉，且现在博客大巴也关门大吉了，导致很多文章丢失。&lt;/p&gt;
&lt;p&gt;博客大巴记录着自己过往的从医求学的过程，记录着弃医从安全的经历，记录着自己如何学习逆向、如何研究漏洞的过程，可谓一部奋斗史在案。&lt;/p&gt;
&lt;p&gt;在上面见证着自己的成长，从稚嫩的文笔逐步成熟化，从肤浅的技术逐步提升。&lt;/p&gt;
&lt;p&gt;在上面可以追寻自己的过往，寻找往昔的足迹，回味初心，昔从何来，今往何所，静坐常思，勿忘初心。&lt;/p&gt;
&lt;p&gt;这也是我仍在坚持写作的初心。&lt;/p&gt;
&lt;h3 id=&quot;2、寻找未来的自我，居安思危&quot;&gt;&lt;a href=&quot;#2、寻找未来的自我，居安思危&quot; class=&quot;headerlink&quot; title=&quot;2、寻找未来的自我，居安思危&quot;&gt;&lt;/a&gt;2、寻找未来的自我，居安思危&lt;/h3&gt;&lt;p&gt;公众号曾开过两次，一次为了测试，用别人的身份，现在微信加强身份认证，需要用绑定身份证的银行卡作校验，所以这号被封，已无法解禁，这也证明了微信产品这几年在信息安全上逐步健全起来了。&lt;/p&gt;
&lt;p&gt;还有一次是前些天审计公众号支付，同时也因看到”订阅号助手“app的发布和订阅号显示的调整，于是又重新注册了个公众号，一方面为了体验产品，一方面也是为了写作。&lt;/p&gt;
&lt;p&gt;互联网行业更新换代过快，需要永远保持一颗学习之心。&lt;/p&gt;
&lt;p&gt;前些年，在android开始发展的时候，如果你仍在搞symbian就将被时代所淘汰掉，所以对于新兴的领域，仍需要不断学习，保持居安思危的心态。&lt;/p&gt;
&lt;p&gt;而所学的，有时就可以通过写作方式，去整理和记录知识点，这也是学习过程的一部分。&lt;/p&gt;
&lt;p&gt;同时我也想通过写作来提升文笔能力，语言表达能力。&lt;/p&gt;
&lt;p&gt;所以，第一篇公众号文章发表一个月后阅读量只有1，是因为我没有发到朋友圈或微博等社交平台上，对此的态度就是，爱看不爱，一个粉丝，一次阅读量，也都无所谓，我仍会坚持写下去。&lt;/p&gt;
&lt;p&gt;因为我坚信在未来某一时候，会需要用到它。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;











</content>
    
    <summary type="html">
    
      &lt;center&gt;“写作，或为利，或为名，或为寻找自我！” —— 题记&lt;/center&gt;

&lt;h2 id=&quot;为利&quot;&gt;&lt;a href=&quot;#为利&quot; class=&quot;headerlink&quot; title=&quot;为利&quot;&gt;&lt;/a&gt;为利&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riu
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="写作" scheme="http://riusksk.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
