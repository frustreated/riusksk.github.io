<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2018-10-14T03:28:34.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（5）—— Intel Processor Trace</title>
    <link href="http://riusksk.github.io/2018/10/14/honggfuzz5/"/>
    <id>http://riusksk.github.io/2018/10/14/honggfuzz5/</id>
    <published>2018-10-14T01:48:40.000Z</published>
    <updated>2018-10-14T03:28:34.000Z</updated>
    
    <content type="html">&lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代码覆盖率监控，比如afl、bochpwn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬件级技术：使用Intel Processor Trace（PT）技术，比如honggfuzz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Intel-PT&quot;&gt;&lt;a href=&quot;#Intel-PT&quot; class=&quot;headerlink&quot; title=&quot;Intel PT&quot;&gt;&lt;/a&gt;Intel PT&lt;/h4&gt;&lt;p&gt;Intel® Processor Trace (Intel® PT) 是在i5/i7 5000以上型号上加入的功能，由于它是硬件级的特性，相比Qemu或Boch，在性能上和代码工作量会占有一定优势。在Linux上可以通过perf来使用PT，可以先简单看是否支持PT：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看是否支持PT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls /sys/devices/intel_pt/format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;追踪程序执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;perf record -e intel_pt// program&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以使用开源工具simple-pt（&lt;a href=&quot;https://github.com/andikleen/simple-pt）中的ptfeature命令行工具来检测&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/andikleen/simple-pt）中的ptfeature命令行工具来检测&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./ptfeature pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Supports PT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最新版GDB也支持pt功能了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gdb program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record btrace pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record instruction-history /m	# show instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record function-history		# show functions executed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;honggfuzz-perf-event-open&quot;&gt;&lt;a href=&quot;#honggfuzz-perf-event-open&quot; class=&quot;headerlink&quot; title=&quot;honggfuzz perf_event_open&quot;&gt;&lt;/a&gt;honggfuzz perf_event_open&lt;/h4&gt;&lt;p&gt;在程序内通过&lt;code&gt;perf_event_open&lt;/code&gt;（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perf_event_open.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将返回的文件描述符传递给mmap映射为可读写的用户内存空间，以便从中读取PT记录的追踪数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/mmapbuf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PT记录的追踪数据采用压缩的二进制格式输出，每秒每个CPU都会持续记录并输出，由于是硬件记录的，最早自然是出现在内核空间，为了使用它，就需要将其导出到用户空间，即通过前面mmap方法映射到用户可写的内存空间，然后再去定位数据解码。PT导出的追踪数据被存储在一个叫&lt;code&gt;AUX space&lt;/code&gt;的内存区域，它相对&lt;code&gt;perfMmapBuf&lt;/code&gt;的偏移记录在&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_offset&lt;/code&gt;，大小为&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_size&lt;/code&gt;，上面代码的第二步&lt;code&gt;mmap&lt;/code&gt;就是去映射&lt;code&gt;AUX space&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是利用libpt来解码捕获到追踪数据，实现函数位于perf_ptAnalyzePkt中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/ptAnalyzePkt.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后将执行到的BB基本块信息更新到feedback map，之后的实现步骤就跟本系列第1篇驱动反馈中所讲的一致。&lt;/p&gt;
&lt;p&gt;到这里，关于《honggfuzz漏洞挖掘技术深究系列》的文章先暂告一段落了，它就相当于是自己的学习笔记，也可以留作日后查询。&lt;/p&gt;
&lt;p&gt;本系列的其它文章如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&amp;amp;chksm=fb04159acc739c8c36e0785e2ce9c3a202066c6cc39a9ce32fd0fc9dfeb348e860a82e29c9d6&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483780&amp;amp;idx=1&amp;amp;sn=8e634a1deb08006063156db60b1c1f77&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（2）—— Persistent Fuzzing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483819&amp;amp;idx=1&amp;amp;sn=daed3baf16e1211d6d869183ba1680f4&amp;amp;chksm=fb041553cc739c457d54494c99d1870488dfa76831fde40a351098b0fcfcdb9f716a473ba213&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483828&amp;amp;idx=1&amp;amp;sn=e96241ce399781414db3ba556ce1f90d&amp;amp;chksm=fb04154ccc739c5a12176eb7492e80abfd36e630193627ba140394e678e47ee2b0f1532516b1&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer</title>
    <link href="http://riusksk.github.io/2018/10/02/honggfuzz4/"/>
    <id>http://riusksk.github.io/2018/10/02/honggfuzz4/</id>
    <published>2018-10-02T01:35:52.000Z</published>
    <updated>2018-10-02T02:54:52.000Z</updated>
    
    <content type="html">&lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文件作变异，对于doc最好是作文件格式解析，只对感兴趣的stream作文件变异，这样的fuzzing的有效性才会更高。&lt;/p&gt;
&lt;p&gt;庆幸地是，honggfuzz提供&lt;code&gt;-c&lt;/code&gt;参数用于扩展变异规则以代替原有变异方式，同时提供有&lt;code&gt;--pprocess_cmd&lt;/code&gt;在原有的文件变异后再作处理：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--mutate_cmd|-c VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command producing fuzz files (instead of internal mutators)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--pprocess_cmd VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command postprocessing files produced by internal mutators&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;功能比较有用，也是我用得比较多的，另一个&lt;code&gt;--pprocess_cmd&lt;/code&gt;基本我没用过。&lt;/p&gt;
&lt;p&gt;当你通过&lt;code&gt;-f&lt;/code&gt;提供输入样本目录后，在fuzzing时，随机提取的文件会直接传递给&lt;code&gt;-c&lt;/code&gt;参数指定的扩展命令作变异。&lt;/p&gt;
&lt;p&gt;比如想针对某文件特定offset范围内的内容进行变异，下面是针对macOS/iOS字体文件中的虚拟指令作Fuzzing时写的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; randint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_START = &lt;span class=&quot;number&quot;&gt;0x16D8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_END   = &lt;span class=&quot;number&quot;&gt;0x304D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIN_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAX_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.DS_Store&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;r+b&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped = mmap.mmap(f.fileno(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#print &quot;file size: 0x%x&quot; % len(mapped)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_to_flip = randint(MIN_BYTES_TO_FLIP, MAX_BYTES_TO_FLIP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_flipped = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; bytes_flipped &amp;lt; bytes_to_flip:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_pos = randint(RANGE_START, RANGE_END)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print &quot;byte_pos: 0x%x&quot; %byte_pos &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_new = chr(randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapped[byte_pos] = byte_new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bytes_flipped += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;变异效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/font_rangfuzz.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后挖到一个TTF字体虚拟指令漏洞：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;orig file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【CD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;poc file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【DD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glyf table -&amp;gt; SimpleGlyf[] -&amp;gt; Instructions(&amp;apos;0xCD&amp;apos; =&amp;gt; ‘0xDD&amp;apos;) -&amp;gt; MDRP指令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，你也可以写个doc、docx等office文件格式解析并变异的扩展fuzzer，比如利用olefile库（但只支持修改同等大小不变的doc，要插入或删除需要自行实现），或者通过COM接口来实现操作。&lt;/p&gt;
&lt;p&gt;比如之前有段时间doc中的公式编辑器存在很多漏洞，你就可以专门针对&lt;code&gt;Equation Native&lt;/code&gt;流作fuzzing。&lt;/p&gt;
&lt;p&gt;最后放两张图(riufuzz是自己对honggfuzz二次开发的版本，后面有机会再讲)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/olefuzz.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/doc_crash.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略</title>
    <link href="http://riusksk.github.io/2018/09/16/honggfuzz3/"/>
    <id>http://riusksk.github.io/2018/09/16/honggfuzz3/</id>
    <published>2018-09-16T03:54:16.000Z</published>
    <updated>2018-10-02T01:49:03.000Z</updated>
    
    <content type="html">&lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用动态fuzz或者静态fuzz的方法，但最后都是调用mangle_mangleContent来变异文件数据：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-3bdc1da036608cc745ef0cb89c2313ea_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 跟进mangle_mangleContent函数：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-529248182e9e09517288c6cbc0f4152d_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 重点就在于后半部分，它会随机选择变异函数进行处理，更改的字节数也是随机的，根据用户指定的mutation变异率来定，即允许变异文件大小的百分比，变异函数列表如下：&lt;/p&gt;
 &lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9450da60b2082522f7aa9dff7757a921_hd.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt; 这些函数都是在mangle_init中初始化，各函数之间也会相互调用：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-025eaad0cd3d34fb828240b30469bede_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 把这些函数过一遍就是honggfuzz中所有的文件变异规则了，如果想实现自己的fuzzer，这些规则来扣出来用Python实现一遍，顺便把afl的规则也扣过来就更完美了，下面是我之前写office fuzzer时的半成品代码，最后偷懒直接用radamas去实现变异了：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-a0d2b4262c74f02388926e1829e70a37_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 再回到刚才的变异函数列表，我们一个个走读源码。&lt;/p&gt;
&lt;p&gt; 1、mangle_Resize函数：&lt;/p&gt;
&lt;p&gt; 用空格填充随机位置&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e43d8f246b8fcb2408bc0c8700baa2_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8875c992f90668d4a2be2817ee32acc8_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2、mangle_Byte函数：&lt;/p&gt;
&lt;p&gt; 向随机位置写随机的uint8类型的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-b857966a5c005b1e95f80512382933d6_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 3、mangle_Bit函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数值做位翻转&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-179d9066a2fd1fc2653f335ce5a41f72_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 4、mangle_Bytes函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖写2~4字节数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4857e9d3d3fb2722bb4705cff49d9bc9_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 5、mangle_Magic函数：&lt;/p&gt;
&lt;p&gt; 取各种边界值进行覆写，这些边界值部分跟AFL还不一样，我在自己的fuzzer里面把它们作了整合。由于边幅所限，我省略了不少边界值：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8b34894b9c1fe0833e95dc6d426ff8fb_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 6、mangle_IncByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据加1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-ea765d0bf263d6aed9cdaf94a1065631_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 7、mangle_DecByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据减1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bc2bf5117cb1495783b2d5501623e602_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 8、mangle_NegByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据取反&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4ef170d3cbb5915de395b7f7aa304079_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 9、mangle_AddSub函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的1、2、4或8字节的数据长度作加减操作，操作数取 rand(0~8192)-4096&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-66a0ed1564725c2dbdf05439e6e26295_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 10、mangle_Dictionary函数：&lt;/p&gt;
&lt;p&gt; 变异目录名，也是随机取文件夹名称进行变异，如果有多个目录，那被变异的目录数也是随机的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-d5aaeb860ab0f32d1283e2d987e456ad_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 11、mangle_DictionaryInsert函数：&lt;/p&gt;
&lt;p&gt; 在目录的随机位置中插入随机数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0fa9250d8e778ca02841b66fc08a00ce_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 12、mangle_MemMove函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据拷贝随机长度的数据，里面就是调用memmove函数实现的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-eabb7cafe2e6042ef8bd2e18d526b9df_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 13、mangle_MemSet函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小，用UINT8_MAX数值填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-82430bbef8b74651aea3a1bdeca9b2dc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 14、mangle_Random函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小的缓冲区，用随机数填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e9a2621714c7a6d88dc68c4a859979_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 15、mangle_CloneByte函数：&lt;/p&gt;
&lt;p&gt; 取两处随机位置的作数据交换&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-cac0e8c50be64a1174f9b7a6cc924a5e_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 16、mangle_Expand函数：&lt;/p&gt;
&lt;p&gt; 文件末尾扩展随机长度的空间，用空格填充，然后在随机位置，取前面的随机长度作数据拷贝&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0e199dd7f82c223a928ead2b7a6cdd04_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bb4820b762220d720d78928d34e923e1_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 17、mangle_Shrink函数：&lt;/p&gt;
&lt;p&gt; 删除随机长度的文件内容&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-010ccb9f2dd19bd450b655cb9f9c7209_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 18、mangle_InsertRnd函数：&lt;/p&gt;
&lt;p&gt; 在文件的随机位置插入随机长度的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-325836aaf17585d5a02265ae000b72fc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 19、mangle_ASCIIVal函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖32字节的随机数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0385d1c51fda364543b22c77067b28ac_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 总结&lt;/p&gt;
&lt;p&gt; 在Fuzzing过程中，很多变异规则是共用的，可以参考一些主源的开源软件，比如afl\peach\honggfuzz\libfuzzer，提取规则作整合，然后写个自己的fuzzing框架，在后面作针对的fuzzer时，可以直接套用。&lt;/p&gt;
&lt;p&gt; 从上面的fuzz策略可以总结出常规的变异规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机数据替换&lt;/li&gt;
&lt;li&gt;数据值增减&lt;/li&gt;
&lt;li&gt;已知边界值替换&lt;/li&gt;
&lt;li&gt;插入随机数据&lt;/li&gt;
&lt;li&gt;删减文件内容&lt;/li&gt;
&lt;li&gt;目录变异&lt;/li&gt;
&lt;li&gt;数据拷贝覆盖&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>知识的诅咒</title>
    <link href="http://riusksk.github.io/2018/09/15/%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92/"/>
    <id>http://riusksk.github.io/2018/09/15/知识的诅咒/</id>
    <published>2018-09-15T05:45:05.000Z</published>
    <updated>2018-09-15T05:50:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、过于装逼的演讲-废话&quot;&gt;&lt;a href=&quot;#一、过于装逼的演讲-废话&quot; class=&quot;headerlink&quot; title=&quot;一、过于装逼的演讲 = 废话&quot;&gt;&lt;/a&gt;一、过于装逼的演讲 = 废话&lt;/h3&gt;&lt;p&gt;无论是演讲还是写文章，你对一帮不懂安全技术的人讲溢出，讲UAF漏洞利用，那纯粹是浪费时间。&lt;/p&gt;
&lt;p&gt;早年觉得分享就该讲一些多数人不懂的东西，尤其是那些自认为高深的技术，让大家听得云里雾里的，这样才显得自己技术牛逼。&lt;/p&gt;
&lt;p&gt;但实际上，别人听不懂的东西，对其而言，均是废话。&lt;/p&gt;
&lt;p&gt;当我们对一件事物过于了解之后，往往意识不到自己对它的思考有多么的抽象。&lt;/p&gt;
&lt;p&gt;比如“辐射”一词，大家常常说手机有辐射，X线有辐射，但又有几人能解释清楚什么叫“辐射”呢？&lt;/p&gt;
&lt;p&gt;正是我们高估了一般读者/听众对我们所处知识世界的熟悉程度，才造就了“知识的诅咒”。&lt;/p&gt;
&lt;h3 id=&quot;二、高学历造就知识面的狭窄&quot;&gt;&lt;a href=&quot;#二、高学历造就知识面的狭窄&quot; class=&quot;headerlink&quot; title=&quot;二、高学历造就知识面的狭窄&quot;&gt;&lt;/a&gt;二、高学历造就知识面的狭窄&lt;/h3&gt;&lt;p&gt;鄙人深深地觉得，高中时代就是我们知识面最丰富的时代，那时候真的是上知天文，下知地理，中知英汉语，左手历史，右手政治，无所不会，无所不能，虽然也常常只是勉强及格，但回首这二三十年，知识面依然还是没广过高中啊！&lt;/p&gt;
&lt;p&gt;之前也面试过一些博士生，有些博士几年只搞个TLS，或者只搞个android app的数据流找隐私泄露之类，这种搞学术研究并无问题，但一旦想进入企业就很难。&lt;/p&gt;
&lt;p&gt;这里也不是鄙视博士生，只是知识的深度和广度的选择而已，但这得看你未来选择的方向而定了。&lt;/p&gt;
&lt;h3 id=&quot;三、学医历程：从“一身病”到“百病不侵”&quot;&gt;&lt;a href=&quot;#三、学医历程：从“一身病”到“百病不侵”&quot; class=&quot;headerlink&quot; title=&quot;三、学医历程：从“一身病”到“百病不侵”&quot;&gt;&lt;/a&gt;三、学医历程：从“一身病”到“百病不侵”&lt;/h3&gt;&lt;p&gt;学医的前一两年，学到啥病就觉得自己可能就有这病，最后就是感觉自己一身病，我们一般叫这为：“学医综合征”。&lt;/p&gt;
&lt;p&gt;到后来下临床了，见过的病多了，更多恶心的、血腥的、神经的病症都见了个遍，自己抗恶心能力提高的不是一两万点啊，而且慢慢地认识到，其实世上很多疾病都是没法治的，如果你们有认识肾内科的医生朋友，问问他们就知道啥叫“挫败感”！&lt;/p&gt;
&lt;p&gt;慢慢地，就觉得只要不死不残的病，都不算事。&lt;/p&gt;
&lt;h3 id=&quot;四、贩卖知识焦虑&quot;&gt;&lt;a href=&quot;#四、贩卖知识焦虑&quot; class=&quot;headerlink&quot; title=&quot;四、贩卖知识焦虑&quot;&gt;&lt;/a&gt;四、贩卖知识焦虑&lt;/h3&gt;&lt;p&gt;最近关注的一批公众号，开始文末各种课程广告，学英语、学写作、学开发各类广告满天飞，利用的正是人们对知识的焦虑。&lt;/p&gt;
&lt;p&gt;之前的文章也提到过，多数的付费知识很多系统化的学习到知识，之前也买过一些讲书的、或者一些通用技能课程，一开始觉得挺有道理的，最后细想下，其实几乎都没有任何可实践性的方法，很多讲的最后还是废话。当然，有些个别付费知识还是不错，不过我所依赖的付费知识只有书本。&lt;/p&gt;
&lt;h3 id=&quot;五、知识学习中的套路与陷阱&quot;&gt;&lt;a href=&quot;#五、知识学习中的套路与陷阱&quot; class=&quot;headerlink&quot; title=&quot;五、知识学习中的套路与陷阱&quot;&gt;&lt;/a&gt;五、知识学习中的套路与陷阱&lt;/h3&gt;&lt;p&gt;以前还没接触过电脑的时候，就听说要先练五笔打字，要练五笔就得先背字根口诀：&lt;br&gt;“王旁青头戋（兼）五一， 土士二干十寸雨……”&lt;/p&gt;
&lt;p&gt;不过最后我没背也练成了五笔，全靠实际打字练习练出来的。&lt;/p&gt;
&lt;p&gt;熟练之后，所有文字均会变成脑海中的一个手指的动作，所有关于五笔的知识全变成一种抽象化动作，无什么字根，无什么键盘位……&lt;br&gt;所以，很多时候网上说：学习A就得先学习B不一定靠谱，只有实践出真知。&lt;/p&gt;
&lt;p&gt;记得以前大学时打算学习数据结构与算法，网上查了下，说需要先学习离散数学，然后我就得真去图书馆翻离散数学，最后没看几页就放弃了。&lt;/p&gt;
&lt;p&gt;这事跟别人说“学Java要先看《Java编程思想》”一样，谁会在无基础的情况下硬看得下去啊！&lt;/p&gt;
&lt;p&gt;可见找到一种适合自己的学习途径才是最好的方法。自己学得哪本书好，就学哪本书，哪来那么多规矩。&lt;/p&gt;
&lt;p&gt;能够为己所用，则为知识；但倘若被知识所用、所卖、所困，则为诅咒。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、过于装逼的演讲-废话&quot;&gt;&lt;a href=&quot;#一、过于装逼的演讲-废话&quot; class=&quot;headerlink&quot; title=&quot;一、过于装逼的演讲 = 废话&quot;&gt;&lt;/a&gt;一、过于装逼的演讲 = 废话&lt;/h3&gt;&lt;p&gt;无论是演讲还是写文章，你对一帮不懂安全技术的人讲溢出
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（2）—— Persistent Fuzzing</title>
    <link href="http://riusksk.github.io/2018/08/22/honggfuzz%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF2/"/>
    <id>http://riusksk.github.io/2018/08/22/honggfuzz漏洞挖掘技术2/</id>
    <published>2018-08-22T12:21:28.000Z</published>
    <updated>2018-08-22T13:12:36.000Z</updated>
    
    <content type="html">&lt;p&gt;上篇&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）》&lt;/a&gt;讲到基于软件的代码覆盖率驱动fuzzing的方式，除了软件还有硬件方式，即基于Intel BTS (Branch Trace Store) 或Intel PT (Processor Tracing) 去计算代码覆盖率，同时要求Linux内核&amp;gt;=4.2，这种方式的最大好处是完全由硬件支配，无所谓软件是闭源还是开源。由于硬件环境受限，我也一直未使用过，有此条件的同学可以试下。&lt;/p&gt;
&lt;p&gt;本篇主要讲下持久型fuzzing（Persistent Fuzzing），即fuzzing API，这种方式会更精准和高效的。&lt;/p&gt;
&lt;p&gt;先看使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat test.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;inttypes.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;testlib.h&amp;gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; **buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; *len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _FuncFromFuzzedLib_(buf, len);  &lt;span class=&quot;comment&quot;&gt;// 目标函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ clang&lt;span class=&quot;number&quot;&gt;-4.0&lt;/span&gt; -fsanitize-coverage=trace-pc,indirect-calls,trace-cmp fuzzedlib.c -o fuzzedlib.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ clang&lt;span class=&quot;number&quot;&gt;-4.0&lt;/span&gt; test.c fuzzedlib.o honggfuzz/libhfuzz/libhfuzz.a -o test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ honggfuzz -z -P -f INPUT.corpus -- ./test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用到几个编译选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;trace-pc&lt;/strong&gt;：追踪执行过的基本块BB，在每个edge中插入__saitizer_cov_trace_pc()函数，可定义该函数作为相应的回调处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;indirect-calls&lt;/strong&gt;：在每个间接调用中添加PC追踪，与前面的trace-pc或trace-pc-guard联合使用，回调函数：__sanitizer_cov_trace_pc_indir&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trace-cmp&lt;/strong&gt;：追踪每个比较指令和swith语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以trace-pc为例，测试代码如下：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/trace_pc1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;br&gt;用trace_pc编译：&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/trace_pc2.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;可以看到自定义的函数被执行，输出执行过的不同pc地址，其它编译选项的用法同上。&lt;br&gt;下面是honggfuzz对各个回调函数的定义情况：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/instrument.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;然后就是记录代码覆盖率情况并进行统计，跟驱动反馈的方式一样了。&lt;/p&gt;
&lt;p&gt;再回头看使用示例中的&lt;code&gt;LLVMFuzzerTestOneInput&lt;/code&gt;函数,honggfuzz是如何处理它的呢？&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/persistent.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;通过for无限循环调用目标函数进行Fuzzing，其中参数buf，即样本文件内容，len是数据长度。&lt;/p&gt;
&lt;p&gt;最后根据发现的新路径，将相应的样本作为新样本继续fuzzing。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/fuzz_back.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

















</content>
    
    <summary type="html">
    
      &lt;p&gt;上篇&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&quot; target
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="fuzzing" scheme="http://riusksk.github.io/tags/fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>从攻防角度谈黑客与程序员</title>
    <link href="http://riusksk.github.io/2018/08/11/%E4%BB%8E%E6%94%BB%E9%98%B2%E8%A7%92%E5%BA%A6%E8%B0%88%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://riusksk.github.io/2018/08/11/从攻防角度谈黑客与程序员/</id>
    <published>2018-08-11T03:12:45.000Z</published>
    <updated>2018-08-11T03:28:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，然，“知攻未必知防”！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01 — 黑客的敌人是程序员&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客所要攻破的任何一款产品，无论是网站、软件还是IoT硬件产品，这些都是由程序员开发的，所以他们要攻破的其实是程序员的安全思维缺陷。&lt;/p&gt;
&lt;p&gt;所以说，黑客的敌人是程序员。但如果黑客本身就是程序员呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;02 — 会开发的黑客：知己知彼，百战不殆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时某些大厂的漏洞致谢公告放出后，可能会出现连续几个月，某类漏洞突然暴增。因为程序员也常常会出现习惯性错误，比如习惯用memcpy危险函数，且不校验size，那么有一必有二，有可能顺藤摸瓜找到一堆此类漏洞。&lt;/p&gt;
&lt;p&gt;上面这种情况就是黑客从程序员的角度入手，去寻找突破口。&lt;/p&gt;
&lt;p&gt;在之前的工作中，也遇到过一些不懂安全的程序员，在转入安全漏洞挖掘领域后，能够快速上手，挖到不少Android等大厂产品的漏洞。这也利益于此前的开发基础，具备开发能力的程序员比只懂安全的技术人员更容易在安全道路上走得更远更深。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;黑客是否需要精通开发？&lt;/strong&gt;这是个老生常谈的问题了。&lt;/p&gt;
&lt;p&gt;如果你去看一些黑客大牛或漏洞挖掘高手写的代码，你会发现有时他们写得也跟我们一样烂。&lt;/p&gt;
&lt;p&gt;但也不是说搞安全就不需要学编程开发了，而是必学课程。只是，很多情况下，黑客具备的是基础开发能力，而非开发产品的能力，两者还是有区别的。但其实也不是绝对，我说的只是一种普遍情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于安全从业人员，掌握基础开发能力是必备的，而是否具备产品开发能力成了一道分水岭。即，产品开发能力是加分项，而非必备项。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;03 — 懂安全的程序员：无存在感&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://riusksk.me/media/god.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;先来看一幅漫画，估计这是许多安全开发同学的心声：防御住了，用户无感知；未防御住，用户就开始骂娘了，或者受公司处罚。&lt;/p&gt;
&lt;p&gt;程序员开发的产品出安全事故，肯定会受到处罚。大家常调侃道：CSO就是用来背锅的，多少有些道理。&lt;/p&gt;
&lt;p&gt;但如果懂安全的程序员开发出具有高安全性的产品，对用户，甚至对领导而言，都可能是无感知，跟不存在一般。&lt;/p&gt;
&lt;p&gt;常说赏罚分明，但上述普遍情况明显是不对等、不完善的赏罚机制。所以现在也有一些公司慢慢地增设“开发之星”、“质量之星”之类的奖励机制，也算是对此的一种弥补措施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;04 — 攻防不对等：攻击的是短板，防御的是体系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客攻击时，只需要找到系统的一处短板，就有可能攻破系统。&lt;/p&gt;
&lt;p&gt;业务防御时，则需要构建全面的防御体系，比黑客掌握更加全面的攻击点和防御策略，而非单一的技术点或者功能模块。&lt;/p&gt;
&lt;p&gt;因此，防御比攻击更难，两者是不对等的。&lt;/p&gt;
&lt;p&gt;有些大厂，比如微软就设有“纵深防御”奖励机制。纵深防御，通俗地讲，就是层层防御，一层防御失效后，仍有备用的其它防御策略生效。&lt;/p&gt;
&lt;p&gt;比如电影《侠盗联盟》中，去城堡偷项链的场景：&lt;/p&gt;
&lt;p&gt;翻过城墙后 =》还有保安 =》绕过保安后还有监控 =》绕过监控后还有防盗门 =》 进门后还有看门狗 =》最后还有指纹验证&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://riusksk.me/media/v2-838f8dccd10d662cbdd11f0972181b8f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;05 — 知攻未必知防&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，对此我一直深信不疑。&lt;/p&gt;
&lt;p&gt;但这是必要不充分条件，因为现在互联网越来越方便，工具化、教程化的资源网上遍地都是，很多脚本小子随手就可以拿来入侵网站，但让他们提供防御方案，基本都要歇菜。&lt;/p&gt;
&lt;p&gt;之前面试过几个做渗透测试的同学，当问某个WEB漏洞的防御时，对方直接说，他只做攻击，不做防御，不懂这些。&lt;/p&gt;
&lt;p&gt;对于企业而言，让你做攻击测试的目的，还是为了提前作防御，如果只知攻，不懂防，又有多大价值呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;06 — 结语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于不懂产品开发的黑客，以及不懂安全的程序员，我们均表示理解；对于即懂安全又懂开发的同学，我们则爱之、惜之。但无论你是黑客（白帽子：无任何违法乱纪行为），还是程序员，如对【微信支付安全】感兴趣，均可私信本账号，共讨职业发展大计，承诺每条有效私信必回，欢迎搭讪。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常言道：“未知攻，焉知防”，然，“知攻未必知防”！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01 — 黑客
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="攻防" scheme="http://riusksk.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
      <category term="黑客" scheme="http://riusksk.github.io/tags/%E9%BB%91%E5%AE%A2/"/>
    
      <category term="程序员" scheme="http://riusksk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）</title>
    <link href="http://riusksk.github.io/2018/07/29/honggfuzz%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF1/"/>
    <id>http://riusksk.github.io/2018/07/29/honggfuzz漏洞挖掘技术1/</id>
    <published>2018-07-29T01:54:40.000Z</published>
    <updated>2018-10-02T03:09:09.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;“&lt;/strong&gt; 反馈驱动：通过监控样本触发的代码覆盖率，进而改进输入样本以提高代码覆盖率，增加发现漏洞的概率。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9f0fe133af6f259bcc310cb7f1f14083_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前业界中基于代码覆盖率的最著名的三大Fuzzer，当属Google开发的AFL、libfuzzer和honggfuzz，且他们都是开源的，在github上都可以搜索到。&lt;/p&gt;
&lt;p&gt;相信很多搞fuzzing的同学都听过或用过这三款工具，本系列主要讲honggfuzz的原理与应用，之前把honggfuzz源码都阅读过一遍，并且二次开发过，该工具的挖洞效果还是不错的。&lt;/p&gt;
&lt;h2 id=&quot;01-—-关于代码覆盖率的那些事&quot;&gt;&lt;a href=&quot;#01-—-关于代码覆盖率的那些事&quot; class=&quot;headerlink&quot; title=&quot;01 — 关于代码覆盖率的那些事&quot;&gt;&lt;/a&gt;&lt;strong&gt;01 — 关于代码覆盖率的那些事&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;计算代码覆盖率情况就需要有个计量单位，通常有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数（Fuction-Level）&lt;/li&gt;
&lt;li&gt;基本块（BasicBlock-Level）&lt;/li&gt;
&lt;li&gt;边界（Edge-Level）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-e59bc6bc894b1d9aa84b69292ba8f3f8_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 函数（Fuction-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先说下函数，这个很容易理解，就是代码执行时调用到哪些函数，但是函数里面的具体代码行却不作统计，相对比较粗糙但高效的统计方式。&lt;/p&gt;
&lt;p&gt;所以，通常的统计方式是用基本块，简称BB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.基本块（BasicBlock-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是基本块，直接看下图就很容易理解了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-19797c5c8d99a42c36318718f29265d5_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;IDA中每一块代码就代表着一个基本块，就是以指令跳转为作划分界限的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.边界（Edge-Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;edge本身就涵盖了基本块部分，唯一的差别是edge多记录了一些执行边界的信息。比如示例代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-22c28c570cf9739b790c4c2969b5b5f2_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在IDA中可以看到A、B、C这3个基本块，但当a为假时，程序就会从A执行到C。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9544f8e035e1874da0a0368ad39aa926_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前面基本块的方式就无法确切地知道是否曾从A执行到C，尤其是该段代码被多次执行的情况，就更无法知道，这时edge覆盖方式就出现了。&lt;/p&gt;
&lt;p&gt;edge会在A跟C之间建立虚拟块D，通过判断D是否执行过，来确认是否曾从A执行到C，这种方式也会比较消耗性能就是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-6a1b97ef1552f83c2e77b5ef2c927093_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;统计代码覆盖率又分两种情况：&lt;/p&gt;
&lt;p&gt;1.【有源码】：直接使用SanitizerCoverage即可，在编译选项中添加相应的覆盖率统计方式，比如基本块统计方式可以添加：&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;CFLAG=“-fsanitize=address -fsanitize-coverage=bb”&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-0b937d36b150db10b68416ecee96a18f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.【无源码】：使用Pin、DynamoRIO等二进制插桩工具去hook统计，或者pediy改指令的方式去监控也是可以的，本系列的后续文章可能会细说。&lt;/p&gt;
&lt;h2 id=&quot;02-—-Honggfuzz反馈驱动原理&quot;&gt;&lt;a href=&quot;#02-—-Honggfuzz反馈驱动原理&quot; class=&quot;headerlink&quot; title=&quot;02 — Honggfuzz反馈驱动原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;02 — Honggfuzz反馈驱动原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本文我们默认以基本块作为代码覆盖率的统计方式，比如采用如下编译选项：&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;ASAN_OPTIONS=coverage=1:coverage_direct=1 -fsanitize=address -fsanitize-coverage=bb&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;执行后它会生成两个文件：&lt;em&gt;.sancov.map和&lt;/em&gt;.sancov.raw，这是honggfuzz处理过的scancov文件。&lt;/p&gt;
&lt;p&gt;其中&lt;em&gt;.sancov.map文件记录是模块信息，&lt;/em&gt;.sancov.raw文件则记录着执行过的基本块地址信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-fcc18ec6efcedcd5b19e4428b6844294_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、首先，honggfuzz会先去分析.sancov.raw文件，保存命中的基本块地址，记录BB数，以及总共的BB数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-be7bc26166e0f1d376ba1c712cf61b59_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、计算代码覆盖率 = 命中BB数 / (命中BB数 + 未命中的BB数)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-e9348eaa3c3712994d135045c8530231_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是旧版honggfuzz关于coverage的显示内容格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-67391dd336b6e4e343244f994c6aa52f_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;新版的变成只记录BB/edge数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-033f35d3e5e67fdd9661ca42c7b06cf9_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、发现新路径或者新插桩链接库加载，则添加此变异样本为新的输入样本，供后面作进一步变异，以触发更多新路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-a2fec1e1ca91bbcefabe770da1b6d6b2_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;03-—-总结&quot;&gt;&lt;a href=&quot;#03-—-总结&quot; class=&quot;headerlink&quot; title=&quot;03 — 总结&quot;&gt;&lt;/a&gt;&lt;strong&gt;03 — 总结&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;honggfuzz最早创建于2015年，跟AFL的发布时间差不多，AFL的出现可以说在安全界是项里程碑标志，给漏洞挖掘技术带来新的技术革命，网上对其源码分析的文章也到处可见，但对honggfuzz的详细分析还没有，因此才作此系列记录下。&lt;/p&gt;
&lt;p&gt;个人也曾给honggfuzz贡献过代码，但由于某次pull request未被采用，于是就自己二次开发不再提交合并。因为我是在macOS下开发，而原作者主要是用Linux，那次提交的功能对我很有用，所以只好自己维护一份二次开发版本。&lt;/p&gt;
&lt;p&gt;后来自己也在Windows和macOS平台上扩展了许多新功能，在本系列文章中，后面可能会单篇聊一聊，也感谢作者robertswiecki开发出这么好用的fuzzer，让我借此刷了不少CVE。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt; 反馈驱动：通过监控样本触发的代码覆盖率，进而改进输入样本以提高代码覆盖率，增加发现漏洞的概率。&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9f0fe133
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="fuzzing" scheme="http://riusksk.github.io/tags/fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>编译原理在安全领域的应用</title>
    <link href="http://riusksk.github.io/2018/07/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    <id>http://riusksk.github.io/2018/07/21/编译原理与安全/</id>
    <published>2018-07-21T00:19:43.000Z</published>
    <updated>2018-07-22T04:20:47.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是编译原理&quot;&gt;&lt;a href=&quot;#什么是编译原理&quot; class=&quot;headerlink&quot; title=&quot;什么是编译原理&quot;&gt;&lt;/a&gt;什么是编译原理&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/640.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;上图是我从《编译系统透视：图解编译原理》里面扣出来的，基本包括编译原理的各个主要方面，从中可以对编译原理有个大体认识。&lt;/p&gt;
&lt;p&gt;专业点来讲，编译原理就是介绍编译程序构造的一般原理和基本方法，内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。&lt;/p&gt;
&lt;p&gt;之前在知乎上看到过一份视频，讲的是程序员编写的代码如何被计算机识别，并在CPU上运行，如果你未曾学习编译原理，推荐观看一下（视频时长11:34）。&lt;/p&gt;
&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=b0694sp0u3a&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;    

&lt;h3 id=&quot;每个信安学生总有一份叫“污点分析”的毕业设计&quot;&gt;&lt;a href=&quot;#每个信安学生总有一份叫“污点分析”的毕业设计&quot; class=&quot;headerlink&quot; title=&quot;每个信安学生总有一份叫“污点分析”的毕业设计&quot;&gt;&lt;/a&gt;每个信安学生总有一份叫“污点分析”的毕业设计&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/641.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;污点分析是指将程序从外部获取的数据标记为污点，然后观察污点在程序执行过程中的传播，从而得到程序中的信息流等信息，里面涉及编译原理中的词法语法分析会多一些，主要被应用于恶意软件分析、攻击代码检测等软件安全性分析研究中。&lt;/p&gt;
&lt;p&gt;记得刚参加工作那会，经常到网上搜索安全论文，发现很多信息安全专业的学生大多有做过一份关于“污点分析”的毕业设计，你现在上CNKI就可以搜索到很多，尤以硕士毕业论文居多。&lt;/p&gt;
&lt;p&gt;当时我几乎翻遍网上所有能找到的“污点分析”论文，最后我得出几点结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不求效果，但求理论高深。之前搞flash xss检测，花了几天时间用一堆grep实现的检测工具，挖不了不到大厂的漏洞，包括淘宝、京东这些电商；但也有同学花几个月搞flash actionscript污点分析，虽然有点作用，但从工作效率和结果看，有时高深的理论不见得适合工业界，虽然我的几行grep没法拿来写论文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;千篇一律，天下文章一大抄。下载了一堆同主题方向的论文，发现有的内容改都没改，互相乱抄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以漏洞挖掘的主题居多，但最后总要以挖洞效果结尾，有0day自然最好，没0day就找几个历史漏洞重现下（很多可能是特例化处理的），没历史漏洞就对比几个主流开源的挖洞工具，对比效率、性能等等，最挫的就是连效果都没有就收尾了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有过此般经历后，我已很少再去翻国内的安全论文了，学术论文可能还是以翻阅国外的为主。&lt;/p&gt;
&lt;h3 id=&quot;成熟的技术-≠-成熟的产品&quot;&gt;&lt;a href=&quot;#成熟的技术-≠-成熟的产品&quot; class=&quot;headerlink&quot; title=&quot;成熟的技术 ≠ 成熟的产品&quot;&gt;&lt;/a&gt;成熟的技术 ≠ 成熟的产品&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/642.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;污点分析技术最早是在1976被提出的，2005年左右开始，污点分析应用于二进制漏洞挖掘的研究火了好多年，其实技术已经相对成熟。&lt;/p&gt;
&lt;p&gt;确实有一些人通过污点分析挖掘到不少有价值的主流软件漏洞，但这项技术要落地为一款安全产品还是有很多问题的。&lt;/p&gt;
&lt;p&gt;首要问题就是误报率，之前有同学开发出基于污点分析的源码审计工具，每次外部报告漏洞的时候，复盘时总说能检测出来，只是没人工跟进。但是，检测出来的有成千上万条告警，需要消耗大量人力去排查这又有什么价值呢，本质上，还是没发现嘛！&lt;/p&gt;
&lt;p&gt;这也算是安全运营的问题，深以为，凡是能检测到，但无法人工或自动跟进推动问题解决的，都是徒劳的。&lt;/p&gt;
&lt;p&gt;相信有很多公司都有出过污点分析的安全审计工具，收费的或者开源的，国内的此类安全产品很多最后都不了了之，所以说成熟的技术不等于成熟的产品。&lt;/p&gt;
&lt;p&gt;国外比较著名的商业源码审计工具就是Coverity和Fortify SCA，算做得最好的业界同款产品，但用过的人都知道，检测出来的问题，还是需要投入很多人工成本的。&lt;/p&gt;
&lt;h3 id=&quot;反编译与加固&quot;&gt;&lt;a href=&quot;#反编译与加固&quot; class=&quot;headerlink&quot; title=&quot;反编译与加固&quot;&gt;&lt;/a&gt;反编译与加固&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/643.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;搞逆向的同学都知道IDA、JEB这些著名的逆向工具，平时在无源码的情况下，我们直接通过它们来分析程序逻辑，无需知晓其中涉及各类反编译技术。&lt;/p&gt;
&lt;p&gt;反编译算是编译的逆过程，即将可执行程序转换成程序源码的过程，如果是转换成汇编语言，我们通常称为反汇编；如果是其它语言的（比如C、Java、C#等等），我们统称为反编译。&lt;/p&gt;
&lt;p&gt;不同语言的编译过程还不一样，比如Java是通过JVM虚拟机将字节码转换成CPU认识的指令，而C是直接由编译器转换机器码供CPU执行的，因此它们的反编译过程也不一样。&lt;/p&gt;
&lt;p&gt;所以如果不懂编译原理，又如何开发反编译工具呢？&lt;/p&gt;
&lt;p&gt;有了反编译，自然就有了防反编译的工具，因此造就了各种加壳工具的出现。&lt;/p&gt;
&lt;p&gt;未知攻，焉知防。要开发加固工具，就需要知道反编译原理，要知道反编译原理，又需要知道编译原理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;编译原理 &amp;lt;---&amp;gt; 反编译原理 &amp;lt;---&amp;gt; 加固原理&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;编译原理在漏洞攻防中的应用&quot;&gt;&lt;a href=&quot;#编译原理在漏洞攻防中的应用&quot; class=&quot;headerlink&quot; title=&quot;编译原理在漏洞攻防中的应用&quot;&gt;&lt;/a&gt;编译原理在漏洞攻防中的应用&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/644.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;搞文件Fuzzing，我们可以在样本（收集、筛选、精简）和Fuzzer（策略、方向等）上面下功夫，甚至简单地暴力fuzzing文件都可以挖到漏洞。&lt;/p&gt;
&lt;p&gt;但对于JavaScript、CSS、Flash ActionScript这些脚本呢，直接简单地暴力变异文件根本无法进入正常的解析，做的大多是无用功。&lt;/p&gt;
&lt;p&gt;因此我们需要一个能够准确生成代码的语法生成器，再用它生成fuzzing样本，这里主要涉及编译原理中的语法分析。这方面有著名的开源工具funfuzz（&lt;a href=&quot;https://github.com/MozillaSecurity/funfuzz）、domato（https://github.com/google/domato），下图就domato生成js代码的语法模板片段：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/funfuzz）、domato（https://github.com/google/domato），下图就domato生成js代码的语法模板片段：&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/645.webp&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;除此之外，通过对clang/gcc等开源的编译工具对目标源码进行插桩，以帮助监控fuzz样本的代码覆盖率，反馈给fuzzer作改进，以进一步提高代码覆盖率，这块叫“驱动反馈（feedback-driven），比如著名工具就是afl、libfuzzer、honggfuzz，以后有机会可以专篇讲解此技术。&lt;/p&gt;
&lt;p&gt;还有通过编译器增加防漏洞利用的机制，比如GS、CFG等安全机制，在对抗漏洞攻击上也起到了不小的作用。&lt;/p&gt;
&lt;p&gt;所以通过研究llvm、gcc等编译项目，对漏洞攻防领域也是有一些可作为的地方。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;编译原理在逆向工程、漏洞攻防、软件开发等诸多领域有所应用，有时就看你怎么使用，也并不是每个人在安全工作领域中有机会运用到，但技多不压身，不妨多储备点知识，以免到了“书到用时方恨少”的地步。&lt;/p&gt;
&lt;p&gt;若干年前，挖洞不用污点追踪都不好意思写论文; 现在搞安全不用人工智能都不好意思装逼，能用机器学习的，坚决不用正则；能用DNN的，坚决不用LR回归；能用无监督学习的，坚决不用有监督学习……但你不试下，怎么就知道grep不行呢？&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是编译原理&quot;&gt;&lt;a href=&quot;#什么是编译原理&quot; class=&quot;headerlink&quot; title=&quot;什么是编译原理&quot;&gt;&lt;/a&gt;什么是编译原理&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/640.webp&quot; a
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="编译原理" scheme="http://riusksk.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>谈谈写作</title>
    <link href="http://riusksk.github.io/2018/07/15/%E8%B0%88%E8%B0%88%E5%86%99%E4%BD%9C/"/>
    <id>http://riusksk.github.io/2018/07/15/谈谈写作/</id>
    <published>2018-07-15T02:26:57.000Z</published>
    <updated>2018-07-15T06:29:42.000Z</updated>
    
    <content type="html">&lt;center&gt;“写作，或为利，或为名，或为寻找自我！” —— 题记&lt;/center&gt;

&lt;h2 id=&quot;为利&quot;&gt;&lt;a href=&quot;#为利&quot; class=&quot;headerlink&quot; title=&quot;为利&quot;&gt;&lt;/a&gt;为利&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/money.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;勤工俭学对于多数大学生来说，是件再正常不过的事了。当年作为一介穷书生的我，或许有点“清高”，即使没钱也从没干过。&lt;/p&gt;
&lt;p&gt;只因在图书馆看到了一本杂志，发现内容不错，当时心想能否自己也去投稿，赚点稿费买书，改善下伙食，想必也是极好的。&lt;/p&gt;
&lt;p&gt;刚好杂志尾页留有投稿方式，就开始着手准备。但当时基本没写过文章，文笔与技术积累都不足。&lt;/p&gt;
&lt;p&gt;于是，就从翻译开始，因为它技术要求低一点，且产出快，这就是为什么早期我很多文章都是翻译的原因，除了赚钱，自己也从中学习到不少知识。&lt;/p&gt;
&lt;p&gt;有了一定积累之后，才开始作原创，并逐步帮我实现转行，成功打入安全圈。&lt;/p&gt;
&lt;p&gt;后来用稿费买了电脑、买书、改善伙食等等，对于个人是段相当难忘的回忆。&lt;/p&gt;
&lt;p&gt;这本杂志就叫《黑客防线》，一本影响我人生轨迹的杂志，一本启蒙我进入“唯利是图”写作生涯的杂志。&lt;/p&gt;
&lt;p&gt;现在很多付费知识平台上的文章，其写作目的也大多如此。&lt;/p&gt;
&lt;h2 id=&quot;为名&quot;&gt;&lt;a href=&quot;#为名&quot; class=&quot;headerlink&quot; title=&quot;为名&quot;&gt;&lt;/a&gt;为名&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/9825bc315c6034a891394f2bc013495408237645.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;从医学生转行入IT圈的过程是艰难的，早期投简历，也有某安全公司说不招实习生/临时工（忘记原话了），也有因为说经常投黑防，被某著名安全公司怀疑是搞黑产的，遂均无缘面试机会。但整体上，在其它公司的求职面试的过程还是很顺利的。&lt;/p&gt;
&lt;p&gt;除了投稿，自己也慢慢开始写博客，逛论坛发技术帖。&lt;/p&gt;
&lt;p&gt;在看雪论坛上发表了不少原创技术帖，在小圈子里积累了点名气，为后来求职铺垫了一条路。&lt;/p&gt;
&lt;p&gt;圈子就这么大，你的文章看的人多了，有时在网上、现实生活中，甚至在面试过程中，别人都可能会冒出一句：”原来你就是xxx“。&lt;/p&gt;
&lt;p&gt;所以当时写作是为了那一点名，为转行作准备的，后来也顺利达到目的，毕业后进入腾讯，一直工作到现在，这都是后话了。&lt;/p&gt;
&lt;p&gt;工作后写作变少了，但偶而还是会发表一些技术文章，也有其它杂志社来约稿，比如CSDN的《程序员》：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/programer-2016-09.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;但这些对于一个工作多年的人来说，赚稿费，累名气，似乎已经没多大意义了，对此也就慢慢淡化了。&lt;/p&gt;
&lt;p&gt;再后来，写《漏洞战争》的时候，就知道赚不了几个钱，所以写的时候就提前跟编辑打招呼说了这事，最多也就是赚点名气而已。&lt;/p&gt;
&lt;p&gt;令人庆幸的是，这书出版后，基本没多少骂声，骂的大多是出版社和网上书店，顺利躲过一劫。&lt;/p&gt;
&lt;h2 id=&quot;寻找自我&quot;&gt;&lt;a href=&quot;#寻找自我&quot; class=&quot;headerlink&quot; title=&quot;寻找自我&quot;&gt;&lt;/a&gt;寻找自我&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/1461314133878.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;1、寻找曾经的自我，勿忘初心&quot;&gt;&lt;a href=&quot;#1、寻找曾经的自我，勿忘初心&quot; class=&quot;headerlink&quot; title=&quot;1、寻找曾经的自我，勿忘初心&quot;&gt;&lt;/a&gt;1、寻找曾经的自我，勿忘初心&lt;/h3&gt;&lt;p&gt;以前最早是在博客大巴写文章，写了好多年，可惜它把导出博文的功能关掉，且现在博客大巴也关门大吉了，导致很多文章丢失。&lt;/p&gt;
&lt;p&gt;博客大巴记录着自己过往的从医求学的过程，记录着弃医从安全的经历，记录着自己如何学习逆向、如何研究漏洞的过程，可谓一部奋斗史在案。&lt;/p&gt;
&lt;p&gt;在上面见证着自己的成长，从稚嫩的文笔逐步成熟化，从肤浅的技术逐步提升。&lt;/p&gt;
&lt;p&gt;在上面可以追寻自己的过往，寻找往昔的足迹，回味初心，昔从何来，今往何所，静坐常思，勿忘初心。&lt;/p&gt;
&lt;p&gt;这也是我仍在坚持写作的初心。&lt;/p&gt;
&lt;h3 id=&quot;2、寻找未来的自我，居安思危&quot;&gt;&lt;a href=&quot;#2、寻找未来的自我，居安思危&quot; class=&quot;headerlink&quot; title=&quot;2、寻找未来的自我，居安思危&quot;&gt;&lt;/a&gt;2、寻找未来的自我，居安思危&lt;/h3&gt;&lt;p&gt;公众号曾开过两次，一次为了测试，用别人的身份，现在微信加强身份认证，需要用绑定身份证的银行卡作校验，所以这号被封，已无法解禁，这也证明了微信产品这几年在信息安全上逐步健全起来了。&lt;/p&gt;
&lt;p&gt;还有一次是前些天审计公众号支付，同时也因看到”订阅号助手“app的发布和订阅号显示的调整，于是又重新注册了个公众号，一方面为了体验产品，一方面也是为了写作。&lt;/p&gt;
&lt;p&gt;互联网行业更新换代过快，需要永远保持一颗学习之心。&lt;/p&gt;
&lt;p&gt;前些年，在android开始发展的时候，如果你仍在搞symbian就将被时代所淘汰掉，所以对于新兴的领域，仍需要不断学习，保持居安思危的心态。&lt;/p&gt;
&lt;p&gt;而所学的，有时就可以通过写作方式，去整理和记录知识点，这也是学习过程的一部分。&lt;/p&gt;
&lt;p&gt;同时我也想通过写作来提升文笔能力，语言表达能力。&lt;/p&gt;
&lt;p&gt;所以，第一篇公众号文章发表一个月后阅读量只有1，是因为我没有发到朋友圈或微博等社交平台上，对此的态度就是，爱看不爱，一个粉丝，一次阅读量，也都无所谓，我仍会坚持写下去。&lt;/p&gt;
&lt;p&gt;因为我坚信在未来某一时候，会需要用到它。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;











</content>
    
    <summary type="html">
    
      &lt;center&gt;“写作，或为利，或为名，或为寻找自我！” —— 题记&lt;/center&gt;

&lt;h2 id=&quot;为利&quot;&gt;&lt;a href=&quot;#为利&quot; class=&quot;headerlink&quot; title=&quot;为利&quot;&gt;&lt;/a&gt;为利&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://riu
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="写作" scheme="http://riusksk.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>历史的错觉与误解——读《秦崩》</title>
    <link href="http://riusksk.github.io/2018/07/09/%E5%8E%86%E5%8F%B2%E7%9A%84%E9%94%99%E8%A7%89%E4%B8%8E%E8%AF%AF%E8%A7%A3%E2%80%94%E2%80%94%E8%AF%BB%E3%80%8A%E7%A7%A6%E5%B4%A9%E3%80%8B/"/>
    <id>http://riusksk.github.io/2018/07/09/历史的错觉与误解——读《秦崩》/</id>
    <published>2018-07-09T10:14:20.000Z</published>
    <updated>2018-07-15T02:24:25.000Z</updated>
    
    <content type="html">&lt;p&gt;五一游苏杭，在苏州诚品书店发现几本好书，回深后直接网购回来，分别是《见识》、《秦崩》、《楚亡》，下图是当时拍照备忘用的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-3d49f750e4d98133fab1fe645088029e_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;《秦崩》这本书其实很早之前就听说过，但一直未看过，当时在书店看了之后就决定要买（最后回深后在京东购得，毕竟网购更为便宜），主要有这么两点吸引着我：&lt;/p&gt;
&lt;p&gt;秦始皇与刘邦只差三岁，他们是同一代人；&lt;br&gt;有真实的历史故事，又有作者寻访古迹的照片，古今交汇，犹如“国家宝藏”中的前世今生，更加生动鲜活。&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;01 — 赢政与刘邦是同一代人&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;由于我们所学历史都是按朝代顺序来划分学习的，每次都是先秦始皇建立秦朝，再刘邦建立汉朝，两个不同朝代的创始人按我们的常规思维看，通常都是隔世的两代人。&lt;/p&gt;
&lt;p&gt;认真考究下两人的生卒年，秦始皇赢政生于公元前259年，死于公元前210年，享年50岁；汉高祖刘邦生于公元前256年，死于公元前195年，享年62岁:&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-c217dc745edadb3adbe4b7035f461bd1_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，秦始皇与刘邦仅相差3岁，且在同一片天空下生活了47年，这就是历史带给我们的错觉。&lt;/p&gt;
&lt;p&gt;其实刘邦是见过秦始皇的，翻出《史记》，在“高祖本纪”中记载：“高祖常繇咸阳，纵观，观秦皇帝，喟然太息曰：“嗟乎大丈夫当如此也！”，可见秦始皇已成为刘邦的偶像。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-d509f6080cd8d3ee10b57517bd751e07_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;02—赵高非阉人&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;赵高作为中国历史上有名的奸臣，“指鹿为马”说的就是他。很多电视剧、电影里的赵高基本都是个阉人（即太监），比如胡歌演的《神话》里面就是如此：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-c4903049ec49424003bef5dd0cf94694_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;翻看《史记》，发现并没有为赵高立传，主要是在秦始皇、李斯和蒙恬的传记中有所涉及。比如“李斯列传”中记载：二世曰：“何哉？夫高故宦人也，然不为安肆志，不以危易心，絜行脩善，自使至此，以忠得进，以信守位，朕实贤之，而君疑之，何也？”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-c2cbd69d9c8423fe497b7d8049a00f83_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;许多的误解正是由“宦人”二字引起，其实在秦朝“宦人”是指在宫中内廷任职的人，相当于皇帝的亲近侍卫之臣，并非明朝的“宦官”之义。&lt;/p&gt;
&lt;p&gt;赵高曾任过“中车府令”（相当于现在的交通部长）、丞相，这些职位岂是阉人所能任职的。&lt;/p&gt;
&lt;p&gt;赵高有女儿这是最明确的证据，在《史记·李斯列传》中有所记载：“赵高教其女婿咸阳令阎乐劾不知何人贼杀人移上林。”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-c3a2dae78a876cbf5c78163fdd89cb60_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以历史上的赵高并非阉人，可能是后世为了丑化他而杜撰出来的，这是历史的误解。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;五一游苏杭，在苏州诚品书店发现几本好书，回深后直接网购回来，分别是《见识》、《秦崩》、《楚亡》，下图是当时拍照备忘用的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-3d49f750e4d98133fab1fe64508802
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="历史" scheme="http://riusksk.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争》出版2周年纪念文</title>
    <link href="http://riusksk.github.io/2018/07/07/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%E3%80%8B%E5%87%BA%E7%89%882%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5%E6%96%87/"/>
    <id>http://riusksk.github.io/2018/07/07/《漏洞战争》出版2周年纪念文/</id>
    <published>2018-07-07T10:23:18.000Z</published>
    <updated>2018-07-07T12:31:30.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://item.jd.com/11983614.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《漏洞战争》&lt;/a&gt;正式上架是在2016年7月1日，距今刚好差不多2周年了，于是在周末撰写了此文。&lt;/p&gt;
&lt;p&gt;常规套路，先感谢下各位读者的支持，书虽无异常畅销，但也卖得不差。&lt;/p&gt;
&lt;p&gt;知道你们很多人想问赚了多少稿费，其实不多，也就3万多一点：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/4000.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;出技术书籍本身就不赚钱，诸位如果想靠此发家，建议还是另谋出路，相比现在的知识付费、小视频主播，那真是天壤之别。&lt;/p&gt;
&lt;p&gt;2周年了，关于“书”的感想很多，简单聊几点：&lt;/p&gt;
&lt;h3 id=&quot;1-暂无第2版的出版计划&quot;&gt;&lt;a href=&quot;#1-暂无第2版的出版计划&quot; class=&quot;headerlink&quot; title=&quot;1. 暂无第2版的出版计划&quot;&gt;&lt;/a&gt;1. 暂无第2版的出版计划&lt;/h3&gt;&lt;p&gt;一方面是时间问题；&lt;/p&gt;
&lt;p&gt;另一方面是觉得漏洞分析技巧性的内容没必要再更新太多东西，即使再换个漏洞案例讲也没多大作用，因为想分享的技巧都讲得差不多，换汤不换药对读者也是一种欺骗。&lt;/p&gt;
&lt;p&gt;况且现在网上还有得买，需要的话自己上&lt;a href=&quot;https://item.jd.com/11983614.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;京东&lt;/a&gt;就行了。&lt;/p&gt;
&lt;h3 id=&quot;2-关于出英文版的计划&quot;&gt;&lt;a href=&quot;#2-关于出英文版的计划&quot; class=&quot;headerlink&quot; title=&quot;2. 关于出英文版的计划&quot;&gt;&lt;/a&gt;2. 关于出英文版的计划&lt;/h3&gt;&lt;p&gt;之前曾联系过国外某著名出版社，目前还在洽谈中，但更大的问题其实还是在翻译上，曾联系其它国外的同行翻译，但一直翻译进展很慢。&lt;/p&gt;
&lt;p&gt;有这个想法，最初还是来源于Twitter上这位小哥，不懂中文，依然购买，然后用Google翻译阅读，真爱啊！！！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/twitter_book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;至于有没有机会出版，套用我们吃鸡时常说的一句话：“生死有命，富贵在生！”&lt;/p&gt;
&lt;h3 id=&quot;3-别太指望靠出书赚钱&quot;&gt;&lt;a href=&quot;#3-别太指望靠出书赚钱&quot; class=&quot;headerlink&quot; title=&quot;3. 别太指望靠出书赚钱&quot;&gt;&lt;/a&gt;3. 别太指望靠出书赚钱&lt;/h3&gt;&lt;p&gt;如果单纯谈钱的话，我觉得花4年写这本书完全是亏本，这也是为什么很多牛人不愿意出书的原因，还不如搞个培训实在。&lt;/p&gt;
&lt;p&gt;毕竟安全圈内人就这么多，专业性太强，读者受众就小。&lt;/p&gt;
&lt;p&gt;更多地还是当作为圈内做一点贡献，也为自己留点回忆的东西，初衷其实就是出一本写给自己的书，因为上面这几点在我写书时就知道了。&lt;/p&gt;
&lt;p&gt;顺道鄙视下，那些整天“换汤不换药”的出版多本书籍的人，稍作修改，再换个书名，又是一次大甩卖。&lt;/p&gt;
&lt;p&gt;看看那些常年占据榜前的“黑客xx从入门到精通”系列，真是让人厌恶又痛心。&lt;/p&gt;
&lt;h3 id=&quot;4-希望有生之年能出本畅销的非技术书&quot;&gt;&lt;a href=&quot;#4-希望有生之年能出本畅销的非技术书&quot; class=&quot;headerlink&quot; title=&quot;4. 希望有生之年能出本畅销的非技术书&quot;&gt;&lt;/a&gt;4. 希望有生之年能出本畅销的非技术书&lt;/h3&gt;&lt;p&gt;《漏洞战争》可能成为我唯一且最后一本技术书籍，希望有生之年能出本畅销的非技术书。&lt;/p&gt;
&lt;p&gt;对于出书，我一直坚持宁缺勿滥的原则，这也是为何花了4年才出一本书的部分原因。&lt;/p&gt;
&lt;p&gt;但目前深感积累不足，也尚不知会写何种题材，只能说先多学习多积累，也不局限于安全领域本身，还是需要多涉猎诸多领域的知识。&lt;/p&gt;
&lt;p&gt;学无止境，与君共勉！&lt;/p&gt;
&lt;p&gt;如果大家对于《漏洞战争》有任何问题或建议，可通过公众号“漏洞战争”联系我：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://item.jd.com/11983614.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《漏洞战争》&lt;/a&gt;正式上架是在2016年7月1日，距今刚好差不多2周年了，于是在周末撰写了此文。&lt;/p&gt;
&lt;p&gt;常规套路，
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>威胁建模：摆脱随机挖洞的命运</title>
    <link href="http://riusksk.github.io/2018/06/03/%E5%A8%81%E8%83%81%E5%BB%BA%E6%A8%A1%EF%BC%9A%E6%91%86%E8%84%B1%E9%9A%8F%E6%9C%BA%E6%8C%96%E6%B4%9E%E7%9A%84%E5%91%BD%E8%BF%90/"/>
    <id>http://riusksk.github.io/2018/06/03/威胁建模：摆脱随机挖洞的命运/</id>
    <published>2018-06-03T13:15:55.000Z</published>
    <updated>2018-06-03T15:04:35.000Z</updated>
    
    <content type="html">&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/threat.png&quot; alt=&quot;威胁&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;楔子：聊聊Web与二进制安全&quot;&gt;&lt;a href=&quot;#楔子：聊聊Web与二进制安全&quot; class=&quot;headerlink&quot; title=&quot;楔子：聊聊Web与二进制安全&quot;&gt;&lt;/a&gt;楔子：聊聊Web与二进制安全&lt;/h3&gt;&lt;p&gt;经常有人会说&lt;code&gt;“Web安全门槛低，二进制安全门槛高”&lt;/code&gt;，先不讨论它是对是错，但至少这让多数人意识到：开始搞Web安全时，&lt;code&gt;xss&lt;/code&gt;弹个框，sql注入写个单引号，&lt;code&gt;sqlmap&lt;/code&gt;跑一下就拖库了，这种总是令人感觉那么容易（懂这些就敢对外自称“高级渗透测试工程师”的大有人在）；搞二进制的就没那么容易出效果了，因为得先学C、汇编，而且一些自动化工具也没web多，就算费九牛二虎之力搞出来，也没黑个站酷炫。&lt;/p&gt;
&lt;p&gt;所以，搞Web的人总是比搞二进制的人要多得多。&lt;/p&gt;
&lt;p&gt;个人觉得，Web是个前期容易出效果，中后期容易遇瓶颈的安全分支，因为不知道该往哪使力，相当于&lt;code&gt;“前期英雄”&lt;/code&gt;；二进制是个前期不容易出效果，且水很深，难达瓶颈的安全分支，因为你很容易知道高山在哪里，即使很多时间只能仰望，相当于&lt;code&gt;“后期英雄”&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在搞Web渗透测试时，不知道大家是否有过这种感觉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看到别人发的漏洞文章，发现原来这么简单，自己明明有能力发现，之前怎么没挖到呢？&lt;/li&gt;
&lt;li&gt;感觉力不从心，有点“&lt;strong&gt;随机挖洞&lt;/strong&gt;”的感觉。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实这都是一些技术或方法论上的瓶颈，二进制上也会有“随机挖洞”的感觉的，只是没Web上那么容易碰到，所以拿web举例。&lt;/p&gt;
&lt;h3 id=&quot;STRIDE：突破瓶颈的方法论&quot;&gt;&lt;a href=&quot;#STRIDE：突破瓶颈的方法论&quot; class=&quot;headerlink&quot; title=&quot;STRIDE：突破瓶颈的方法论&quot;&gt;&lt;/a&gt;STRIDE：突破瓶颈的方法论&lt;/h3&gt;&lt;p&gt;某天在网上看到一篇关于&lt;code&gt;STRIDE&lt;/code&gt;威胁建模的文章，这是微软总结出来的一套方法论，其实就是一些威胁的助记符，帮助大家在做安全测试时能够更加全面系统。虽然它也不能100%覆盖所有系统/软件面临的安全威胁，但至少能覆盖个90%。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/stride.png&quot; alt=&quot;img&quot;&gt;&lt;/center&gt;

&lt;p&gt;上图是STRIDE所代表的6种威胁，无论在做Web渗透测试，还是软件安全测试，先通过对测试目标做功能上的分析，再按STRIDE模型对其进行全面的分析，最后就是实际测试验证。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/image-20180603223947071.png&quot; alt=&quot;image-20180603223947071&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;STRIDE本质上并不会提高你的技术能力，但可以改变你挖洞的思维方法，更加系统全面，摆脱随机挖洞的命运。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于STRIDE更详细地信息，可以参考以下这本书&lt;a href=&quot;http://product.china-pub.com/4694314&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《威胁建模：设置和交付更安全的软件》&lt;/a&gt;，看前半本就可以了，后半本有点啰嗦，且可操作性不强。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://images.china-pub.com/ebook4690001-4695000/4694314/zcover.jpg&quot; alt=&quot;威胁建模&quot;&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/threat.png&quot; alt=&quot;威胁&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;楔子：聊聊Web与二进制安全&quot;&gt;&lt;a href=&quot;#楔子：聊聊Web与二进制安全&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="威胁建模" scheme="http://riusksk.github.io/tags/%E5%A8%81%E8%83%81%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>安全圈乱象杂谈</title>
    <link href="http://riusksk.github.io/2018/04/30/%E5%AE%89%E5%85%A8%E5%9C%88%E4%B9%B1%E8%B1%A1%E6%9D%82%E8%B0%88/"/>
    <id>http://riusksk.github.io/2018/04/30/安全圈乱象杂谈/</id>
    <published>2018-04-30T09:34:21.000Z</published>
    <updated>2018-04-30T11:28:45.000Z</updated>
    
    <content type="html">&lt;p&gt;【声明】：本文纯属个人言论，与公司立场无关。&lt;/p&gt;
&lt;h3 id=&quot;玩名词概念&quot;&gt;&lt;a href=&quot;#玩名词概念&quot; class=&quot;headerlink&quot; title=&quot;玩名词概念&quot;&gt;&lt;/a&gt;玩名词概念&lt;/h3&gt;&lt;p&gt;技术命名，将一些旧知识赋予个新名词进行炒作，比如APT，还有可视化概念，一串串攻击流飞来飞去。&lt;/p&gt;
&lt;p&gt;漏洞命名，似乎已成为圈内常态，不管漏洞危害如何，先取个名字，再以名字单独地注册个域名。&lt;/p&gt;
&lt;p&gt;BlackHat Pwnine上专门设置有一个“最名不副实漏洞奖”，就是用来批评这类恶意炒作的漏洞。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/pwnine.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;会议式社交&quot;&gt;&lt;a href=&quot;#会议式社交&quot; class=&quot;headerlink&quot; title=&quot;会议式社交&quot;&gt;&lt;/a&gt;会议式社交&lt;/h3&gt;&lt;p&gt;国内与国外的安全会议的最大区别就是，国内以吃喝聊天、拉关系为主要目的，国外以技术交流为主；&lt;/p&gt;
&lt;p&gt;这几年，国内已经有越来越多的安全会议、安全沙龙，每次会前，朋友圈的邀请函就会被刷爆，那些常年占据朋友圈的会棍，我一般都是拉黑再说……&lt;/p&gt;
&lt;p&gt;不单是会议，特殊节日，你也会发现朋友圈清一色的各公司的礼品晒照！！！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/116417766.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;炒作营销&quot;&gt;&lt;a href=&quot;#炒作营销&quot; class=&quot;headerlink&quot; title=&quot;炒作营销&quot;&gt;&lt;/a&gt;炒作营销&lt;/h3&gt;&lt;p&gt;“世界第一”、“中国第一”、“全球最强”等各种违反广告法的公关稿随处可见，尤以某数字公司最为推崇。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/62728.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;安全圈的营销类标题大体可以分为两种，”碰瓷”(蹭热点、名人，比如Hashcat破解密码之强，连FBI都惊呆了)和”意外”(这文章的标题就是这套路，破解256个字符，意不意外，惊不惊喜)，满满是《爆款文案》中的套路:&lt;/p&gt;
&lt;p&gt;普通标题：《火辣健身 App 深度产品分析报告》&lt;br&gt;碰瓷式标题：《同样是健身 App，它比 Keep 到底 NB 在哪儿》&lt;br&gt;意外式标题：《改了两个版本就融资 1500 万，这款产品如何做到的》&lt;/p&gt;
&lt;p&gt;我并不完全反对PR，但我反对那些夸张不符事实的PR，以及惋惜那些以PR带动技术发展的不幸！&lt;/p&gt;
&lt;h3 id=&quot;快餐式的付费知识&quot;&gt;&lt;a href=&quot;#快餐式的付费知识&quot; class=&quot;headerlink&quot; title=&quot;快餐式的付费知识&quot;&gt;&lt;/a&gt;快餐式的付费知识&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;/media/know.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;最近好多个平台提供付费知识的功能，算是一项靠名气快速套现的捷径，随便开个课或拉个群收费，几天就可能几十万收入，令人羡慕！&lt;/p&gt;
&lt;p&gt;但反观付费的用户，你以为真的付费就一定可以获得知识吗？&lt;/p&gt;
&lt;p&gt;对于技术而言，那都是常年积累的过程，非一两小时言语所有传授；&lt;br&gt;对于知识而言，个人思考所得的才叫知识，而非单纯地从别人口中得到；&lt;br&gt;对于学习而言，学以致用才是目的，而非纯理论学习。&lt;/p&gt;
&lt;p&gt;所以，我不相信靠知识付费，就能够让你的认识、思维、技术有本质提高！&lt;/p&gt;
&lt;p&gt;况且，有那么多比付费知识更廉价的书籍（可参考&lt;a href=&quot;https://github.com/riusksk/secbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2018年安全从业人员书单推荐&lt;/a&gt;），完全可以更系统化地学习。&lt;/p&gt;
&lt;p&gt;我不反对知识付费，但是系统性学习比碎片化学习更重要！&lt;br&gt;我不反对碎片化学习，但别妄想能靠它实现知识速成！&lt;/p&gt;
&lt;p&gt;最近在网上看到一个故事，与各位分享下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;爱因斯坦提出相对论后，震惊世界，&lt;br&gt;于是被很多大学邀请去做报告，&lt;br&gt;爱因斯坦因此而被弄得疲惫不堪。&lt;br&gt;有一天，司机对他说：“你太累了，今天我帮你作报告吧？”&lt;br&gt;爱因斯坦问：“你能行吗？”&lt;br&gt;司机说：“我闭着眼睛都能背出来。”&lt;br&gt;那天司机上台，果然讲得滴水不漏。&lt;br&gt;但刚想下台时，一位博士站了起来，&lt;br&gt;然后提了一个非常深奥刁钻的问题。&lt;br&gt;司机不知怎么作答，幸好脑瓜转得快：&lt;br&gt;“你这问题太简单了，我司机都能回答。”&lt;br&gt;爱因斯坦站起来，几句话就解决了问题。&lt;br&gt;博士惊呆了：“没想到他的司机也远胜于我。”&lt;br&gt;但在回去的路上，司机对爱因斯坦说：&lt;br&gt;“我知道的只是概念，你懂得的才是知识。”&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;【声明】：本文纯属个人言论，与公司立场无关。&lt;/p&gt;
&lt;h3 id=&quot;玩名词概念&quot;&gt;&lt;a href=&quot;#玩名词概念&quot; class=&quot;headerlink&quot; title=&quot;玩名词概念&quot;&gt;&lt;/a&gt;玩名词概念&lt;/h3&gt;&lt;p&gt;技术命名，将一些旧知识赋予个新名词进行炒作，比如APT，
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>《横向领导力》思维导图</title>
    <link href="http://riusksk.github.io/2018/03/25/%E3%80%8A%E6%A8%AA%E5%90%91%E9%A2%86%E5%AF%BC%E5%8A%9B%E3%80%8B%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://riusksk.github.io/2018/03/25/《横向领导力》思维导图/</id>
    <published>2018-03-25T09:01:53.000Z</published>
    <updated>2018-09-15T05:51:13.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/media/横向领导力.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/横向领导力.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="思维导图" scheme="http://riusksk.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2018年信息安全从业者书单推荐</title>
    <link href="http://riusksk.github.io/2018/03/22/2018%E5%B9%B4%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%BB%8E%E4%B8%9A%E8%80%85%E4%B9%A6%E5%8D%95%E6%8E%A8%E8%8D%90/"/>
    <id>http://riusksk.github.io/2018/03/22/2018年信息安全从业者书单推荐/</id>
    <published>2018-03-22T10:27:15.000Z</published>
    <updated>2018-03-22T10:32:06.000Z</updated>
    
    <content type="html">&lt;p&gt;知乎上经常有人推荐一些程序员书单，也比较全面，但系统化的安全书单很少，虽然在一些安全新媒体上也有人推荐过一些，但上面不是广告就是有啥新书就推荐啥，甚至让人怀疑作者是不是搞技术的，可能大多没看过自己推荐的书。因此自己结合自己10多年来读过一些觉得比较好的书或业界公认的名著，整理出此份信息安全书单，仅供参考。&lt;br&gt;后续更新可关注GitHub：&lt;a href=&quot;https://github.com/riusksk/secbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/secbook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/secbook.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎上经常有人推荐一些程序员书单，也比较全面，但系统化的安全书单很少，虽然在一些安全新媒体上也有人推荐过一些，但上面不是广告就是有啥新书就推荐啥，甚至让人怀疑作者是不是搞技术的，可能大多没看过自己推荐的书。因此自己结合自己10多年来读过一些觉得比较好的书或业界公认的名著，整
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="信息安全" scheme="http://riusksk.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>计算机行业是否需要学历？</title>
    <link href="http://riusksk.github.io/2018/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A1%8C%E4%B8%9A%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E5%AD%A6%E5%8E%86/"/>
    <id>http://riusksk.github.io/2018/03/14/计算机行业是否需要学历/</id>
    <published>2018-03-14T11:01:47.000Z</published>
    <updated>2018-09-15T05:51:23.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;——-记《软技能：代码之外的生存指南》读后感&quot;&gt;&lt;a href=&quot;#——-记《软技能：代码之外的生存指南》读后感&quot; class=&quot;headerlink&quot; title=&quot;—— 记《软技能：代码之外的生存指南》读后感&quot;&gt;&lt;/a&gt;—— 记《软技能：代码之外的生存指南》读后感&lt;/h2&gt;&lt;p&gt;最近在读一本写给开发者，但又跟技术、代码无关的书籍叫&lt;a href=&quot;http://item.jd.com/11987446.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《软技能：代码之外的生存指南》&lt;/a&gt;，主要讲了关于理财、就业、健身、自我营销、精神等诸多软技能的书籍，如果你是个单纯痴迷于技术的IT民工，建议还是看一下。&lt;/p&gt;
&lt;p&gt;此书涉及面太广，本文主要就聊下学历方面的话题，估计在知乎上谈得最多的就是要不要考研的问题了。&lt;/p&gt;
&lt;p&gt;计算机行业应该算是对学历要求最低的行业之一了，但也不能说完全没用。&lt;/p&gt;
&lt;p&gt;事物总是具有两面性，如果只是单纯地说需要或者不需要学历，那都是片面的。&lt;/p&gt;
&lt;h3 id=&quot;单纯说需要或者不需要学历都是片面的&quot;&gt;&lt;a href=&quot;#单纯说需要或者不需要学历都是片面的&quot; class=&quot;headerlink&quot; title=&quot;单纯说需要或者不需要学历都是片面的&quot;&gt;&lt;/a&gt;单纯说需要或者不需要学历都是片面的&lt;/h3&gt;&lt;p&gt;结果自身的一些经历和中国国情，总结下有无学历的一些优缺点，也欢迎大家补充：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/2018-03-14.7.43.31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;是否考研读博&quot;&gt;&lt;a href=&quot;#是否考研读博&quot; class=&quot;headerlink&quot; title=&quot;是否考研读博&quot;&gt;&lt;/a&gt;是否考研读博&lt;/h3&gt;&lt;p&gt;这个问题只有自己才能找到答案，因为只有自己才知道自己更需要什么。&lt;/p&gt;
&lt;p&gt;先说考研读博，关键看你的目的是什么。&lt;/p&gt;
&lt;p&gt;比如你想留校从事科研教育工作，或者进入政府银行、中科院等体制内的单位，那高学历几乎是必须的。&lt;/p&gt;
&lt;p&gt;像现在招行的招人条件是必须985/211的大学，否则可能连面试机会都没有。&lt;/p&gt;
&lt;p&gt;而如果是进体制外的一些企业，比如BAT等互联网公司，研究生的起步薪资比本科生高，但那只是给的辛苦费，并不是对你技术能力的认可。&lt;/p&gt;
&lt;p&gt;这些互联网企业一般要求本科以上学历，然后更看重工作经验，比如硕士毕业生是T1.3（助理工程师），而工作3年的本科生，快点是有可能到T3.1（高级工程师），在人脉、技术、薪资上已经不是一个量级了。&lt;/p&gt;
&lt;p&gt;至于那些特殊offer的就不在此讨论范围之内了。&lt;/p&gt;
&lt;p&gt;也不是说读研没用，或者专科的没机会，腾讯里面也有专科毕业的高工，正如前面所说的，学历不足就得靠工作经验去弥补了，只要你能力出足还是有机会的。&lt;/p&gt;
&lt;p&gt;现在AI（人工智能）很火，如果想从事这方面工作，对学术理论研究要求更高，继续求学可能更合适。&lt;/p&gt;
&lt;p&gt;现在很多互联网公司，对AI岗位的要求，很多是直接要求博士以上学历的，待遇也很有竞争力。&lt;/p&gt;
&lt;p&gt;不过互联网发展如此迅速，AI火个两三年也差不多了，不可能一直如此受热棒的，现在才考虑读博可能就赶不上这波热潮了，这个还需要用发展的眼光来看待。&lt;/p&gt;
&lt;p&gt;至于那些害怕就业，要延缓就业压力的，是否考研读博都一样，就业压力都需要面临的。&lt;/p&gt;
&lt;p&gt;还有些只是想过来体验人生，你怎么选都是对的^_^。&lt;/p&gt;
&lt;h3 id=&quot;持续学习才是王道&quot;&gt;&lt;a href=&quot;#持续学习才是王道&quot; class=&quot;headerlink&quot; title=&quot;持续学习才是王道&quot;&gt;&lt;/a&gt;持续学习才是王道&lt;/h3&gt;&lt;p&gt;难道读完研或博士毕业了就不用学习了吗？决定一个人走得多远，关键还是在能否保持持续学习的心态，因此，个人是比较崇尚自学的学习方式，但这要求自律性较高。&lt;/p&gt;
&lt;p&gt;贴一张在看雪上看到的帖子，不看下，永远不知道别人有多努力，共勉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/pediy.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;整体而言，拥有学历并不是什么坏事，就中国国情而言，学历还是需要的，至少拥有本科学历会更好，至于是否考研读博，可参考上一条自行选择。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;——-记《软技能：代码之外的生存指南》读后感&quot;&gt;&lt;a href=&quot;#——-记《软技能：代码之外的生存指南》读后感&quot; class=&quot;headerlink&quot; title=&quot;—— 记《软技能：代码之外的生存指南》读后感&quot;&gt;&lt;/a&gt;—— 记《软技能：代码之外的生存指南》读
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="职业" scheme="http://riusksk.github.io/tags/%E8%81%8C%E4%B8%9A/"/>
    
      <category term="学历" scheme="http://riusksk.github.io/tags/%E5%AD%A6%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>读书心悟</title>
    <link href="http://riusksk.github.io/2018/02/22/%E8%AF%BB%E4%B9%A6%E5%BF%83%E6%82%9F/"/>
    <id>http://riusksk.github.io/2018/02/22/读书心悟/</id>
    <published>2018-02-22T10:19:36.000Z</published>
    <updated>2018-03-25T09:12:05.000Z</updated>
    
    <content type="html">&lt;p&gt;”读史使人明智，读诗使人聪慧，演算使人精密，哲理使人深刻，道德使人高尚，逻辑修辞使人善辩。 “&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;———— 培根《论读书》&lt;/p&gt;

&lt;h2 id=&quot;为什么读书？&quot;&gt;&lt;a href=&quot;#为什么读书？&quot; class=&quot;headerlink&quot; title=&quot;为什么读书？&quot;&gt;&lt;/a&gt;为什么读书？&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;/media/v2-fd11166b3dd34ab5914aa66b832dfa76_hd.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;&lt;em&gt;”你的梦想是什么？“&lt;br&gt;”长大以后我要当一名科学家。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;相信很多人小时候都有过类似经历，我也如此，而它在当初我幼小的心灵中种下这样一颗种子：&lt;strong&gt;读书是为了当一名科学家&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;上了中学之后，老师和家长都会告诉我们要好好读书，将来才能考上一所好大学，有个好文凭才能找到好工作，以后才能坐办公室，而不用下地干活。此时才意识到，&lt;strong&gt;读书是为了有个好文凭，找份好工作，至少不用干苦力活。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大二那年，遇到一位家长，他始终认为读大学也是为了一个文凭，其它都不重要。&lt;/p&gt;
&lt;p&gt;大学毕业后，从医学专业转行进入计算机安全行业，发觉那学历文凭于己没有太大用途了，只要是个本科就够了，这也是国情所定。此时才意识到，&lt;strong&gt;读书是为了丰富个人修养，是为了拥有一技之长，能够靠它在社会上生存的技能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后来随着阅历的增长，慢慢意识到，其实读书的目的总结起来就一句话：&lt;strong&gt;为了拥有更多的选择权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;正如龙应台在《亲爱的安德烈》中所述说的那样：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;孩子，我要求你读书用功，不是因为我要你跟别人比成绩，&lt;br&gt;而是因为，我希望你将来会拥有选择的权利，&lt;br&gt;选择有意义、有时间的工作，&lt;br&gt;而不是被迫谋生。&lt;br&gt;当你的工作在你心中有意义，&lt;br&gt;你就有成就感。&lt;br&gt;当你的工作给你时间，&lt;br&gt;不剥夺你的生活，&lt;br&gt;你就有尊严。&lt;br&gt;成就感和尊严，给你快乐。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;读完即忘，为何仍要读书？&quot;&gt;&lt;a href=&quot;#读完即忘，为何仍要读书？&quot; class=&quot;headerlink&quot; title=&quot;读完即忘，为何仍要读书？&quot;&gt;&lt;/a&gt;读完即忘，为何仍要读书？&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3198372335,1494341610&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;也许经常有人会问，书读完就忘记了，那读书还有什么用呢？&lt;/p&gt;
&lt;p&gt;如果是我，我会这样回答：”每日三餐吃完又拉，为何又还要吃饭呢？也许吃几天饭没能看出什么变化，但小孩子吃到成年呢？那变化够明显吧。&lt;strong&gt;读书亦是如此，短期看不出变化，但长期它会慢慢变成我们血肉的一部分，相伴一生！&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;王阳明《传习录》中有一段话：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一友问：“读书不记得，如何？”&lt;br&gt;先生曰：“只要晓得，如何要记得？要晓得已是落第二义了，只要明得自家本体。若徒要记得，便不晓得；若徒要晓得，便明不得自家的本体。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;深以为然，其实读书不用非得记得，能够理解书中道理即可。非得背诵强记，往往都是用来应付考试的手段。&lt;/p&gt;
&lt;p&gt;《传习录》中说到，&lt;em&gt;”如读书时，良知知得强记之心不是，即克去之;有欲速之心不是，即克去之;有夸多斗靡之心不是，即克去之。“&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;若能以不为考试、不为显摆、不为私欲，只以无心之心而读书，则足矣！&lt;/p&gt;
&lt;h2 id=&quot;读书方法&quot;&gt;&lt;a href=&quot;#读书方法&quot; class=&quot;headerlink&quot; title=&quot;读书方法&quot;&gt;&lt;/a&gt;读书方法&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://www.kedo.gov.cn/upload/resources/image/2015/08/19/98655.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;春节刚好读完一本叫《如何阅读一本书》，虽没想像中那般好，但书中所提的4种阅读层次还是可以当作参考的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基础阅读&lt;/strong&gt;：小学至初中的语文功底就足够了，即能够识字，读懂字面意思即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;检视阅读&lt;/strong&gt;：换言之，即快速阅读，该层次可分为2种方法。&lt;br&gt;  1、&lt;strong&gt;系统化略读&lt;/strong&gt;：比如通过书名、目录、序言、作者介绍、随手阅读几个段落等方式来判断该书的分类、主题以及内容质量，我一般就是通过此方式来判断买不买书的。对于一些专业书籍，就需要一定的知识背景才能有更好地做出判断。&lt;br&gt;  2、&lt;strong&gt;快速性通读&lt;/strong&gt;：即不求甚解地快速通读全书，若有必要，再有侧重地细读一遍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分析阅读&lt;/strong&gt;：原书写得有点复杂，个人觉得没必要，只要能够分析清楚书本的主题内容、全书结构、理解书中观点或原理，带着问题去书中求解，看能从中找到答案吗，读完之后能够准确地评价该书，这就差不多了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;主题阅读&lt;/strong&gt;：最高层次的阅读方式，根据同一主题内容去阅读多本同类书籍，因此也叫比较阅读。往往运用在主动研究某个领域所采取的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如想研究移动安全，我可能会去china-pub上查找相关书籍，通过检视阅读的方式去挑选出一些相关的安全书籍，然后就是采用分析阅读的方式一本本读下去，必要的话做一些笔记，完成之后也即是完成主题阅读方式了。可以看到，越高级的阅读层次其实已经包含了更低级层次的阅读方式。&lt;/p&gt;
&lt;p&gt;为了规划自己的读书计划，我会用iPhone上的”提醒事项“这个app来记录和规划自己每月的阅读书单，当然其它一些需要记录提醒事项也会一并写上。一来可以方便随时记录想看的好书；二来可以提醒自己。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;./media/reminder.jpeg&quot; width=&quot;300&quot; height=&quot;450&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;中小学时代，读书大多是为了考试，总是有些不情不愿的，所以那时并不是那么喜欢读书。&lt;/p&gt;
&lt;p&gt;上大学之后，由于兴趣开始自学计算机，记得当时整个暑假就拿着《深入理解计算机系统》和《ASP从入门到精通》两本书每天不停地学习，后来也会找一些社科历史等文科书籍来阅读。&lt;/p&gt;
&lt;p&gt;渐渐地才意识到，其实我是喜欢读书的，只是被应试教育所毒害过。&lt;/p&gt;
&lt;p&gt;所以能够以兴趣为导向，无欲无求，以无心之心而读书，或许才是最佳的读书状态。&lt;/p&gt;
&lt;h2 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;p&gt;1、&lt;a href=&quot;http://riusksk.me/2014/03/21/buybook/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《购书心得》&lt;/a&gt;：关于信息安全方面的相关书籍推荐&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33931743?group_id=950113668235534336&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《给计算机初学者的书籍推荐》&lt;/a&gt;：给初学计算机专业的同学一些基础课相关的经典书籍推荐。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;”读史使人明智，读诗使人聪慧，演算使人精密，哲理使人深刻，道德使人高尚，逻辑修辞使人善辩。 “&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;———— 培根《论读书》&lt;/p&gt;

&lt;h2 id=&quot;为什么读书？&quot;&gt;&lt;a href=&quot;#为什么读书？&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="读书" scheme="http://riusksk.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>2017年刷过的CVE</title>
    <link href="http://riusksk.github.io/2018/01/21/2017%E5%B9%B4%E5%88%B7%E8%BF%87%E7%9A%84CVE/"/>
    <id>http://riusksk.github.io/2018/01/21/2017年刷过的CVE/</id>
    <published>2018-01-21T11:55:08.000Z</published>
    <updated>2018-01-21T12:55:01.000Z</updated>
    
    <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;公司&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;产品&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;时间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;CVE号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Reader&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/02/16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Heap Overflow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2959&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Foxit&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Foxit Reader&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/02&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-5989&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS/iOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2407&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS/iOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2406&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS/iOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Out-of-Bounds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2487&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS/iOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Denial of Service&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2417&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS/iOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/03/28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Heap Overflow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-2379&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Reader&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/04/12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3039&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Reader&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/04/12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Out-of-Bounds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3040&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/06/14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3096&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/06/14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stack Overflow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3095&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/06/14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stack Overflow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3094&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/06/14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Out-of-Bounds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3093&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/07/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stack Overflow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7033&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/07/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Out-of-Bounds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;macOS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/07/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Out-of-Bounds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/08/09&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-11280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Reader&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/08/09&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-3016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Xcode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/09/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7137&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Xcode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/09/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7136&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Xcode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/09/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7135&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Xcode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/09/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7134&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Apple&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Xcode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/09/20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-7076&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe Digital Editions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-11301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;25&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16394&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;26&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16395&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16399&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16411&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16410&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16409&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;31&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-16408&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Adobe&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acrobat Pro DC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2017/11/15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Memory Corruption&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CVE-2017-11293&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;公司&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;产品&lt;/th&gt;
&lt;th s
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CVE" scheme="http://riusksk.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>调试V8中JS对应的汇编代码</title>
    <link href="http://riusksk.github.io/2017/06/04/%E8%B0%83%E8%AF%95V8%E4%B8%ADJS%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    <id>http://riusksk.github.io/2017/06/04/调试V8中JS对应的汇编代码/</id>
    <published>2017-06-04T08:37:20.000Z</published>
    <updated>2017-06-04T08:39:04.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、调试未优化代码&quot;&gt;&lt;a href=&quot;#1、调试未优化代码&quot; class=&quot;headerlink&quot; title=&quot;1、调试未优化代码&quot;&gt;&lt;/a&gt;1、调试未优化代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gdb --args ~/v8/out/ia32.debug/d8 --print-code poc.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bp v8::internal::FullCodeGenerator::MakeCode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finish   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//跟c命令配对执行多次，直至打印出需要的汇编指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run till exit from #0  v8::internal::FullCodeGenerator::MakeCode (info=0xff873eb8) at ../src/full-codegen.cc:283&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Raw source ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Code ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source_position = 197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind = FUNCTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = evil_object.toJSON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Instructions (size = 128)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x2b3301a0     0  55             push ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x2b3301a1     1  89e5           mov ebp,esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bp * 0x2b3301a0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、调试优化代码&quot;&gt;&lt;a href=&quot;#2、调试优化代码&quot; class=&quot;headerlink&quot; title=&quot;2、调试优化代码&quot;&gt;&lt;/a&gt;2、调试优化代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gef&amp;gt;  bp v8::internal::Context::AddOptimizedFunctiongef&amp;gt;  run Thread 1 &amp;quot;d8&amp;quot; hit Breakpoint 1, v8::internal::Context::AddOptimizedFunction (this=0x1fe2a1083a79, function=0x1fe2a10ac281) at ../src/contexts.cc:413gef&amp;gt;  job function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x1fe2a10ac281: [Function]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - map = 0xe7a59804099 [FastProperties]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - prototype = 0x1fe2a1084069&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - elements = 0x367f8ed82241 &amp;lt;FixedArray[0]&amp;gt; [FAST_HOLEY_ELEMENTS]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - initial_map = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - shared_info = 0x1fe2a10abdd9 &amp;lt;SharedFunctionInfo Ctor&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - name = 0x1fe2a10abae9 &amp;lt;String[4]: Ctor&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - formal_parameter_count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - context = 0x1fe2a1083a79 &amp;lt;FixedArray[188]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - literals = 0x1fe2a10ac551 &amp;lt;FixedArray[1]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code = 0x3e4da55066a1 &amp;lt;Code: OPTIMIZED_FUNCTION&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - properties = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   #length: 0x367f8edd2709 &amp;lt;AccessorInfo&amp;gt; (accessor constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   #name: 0x367f8edd2779 &amp;lt;AccessorInfo&amp;gt; (accessor constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   #arguments: 0x367f8edd27e9 &amp;lt;AccessorInfo&amp;gt; (accessor constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   #caller: 0x367f8edd2859 &amp;lt;AccessorInfo&amp;gt; (accessor constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   #prototype: 0x367f8edd28c9 &amp;lt;AccessorInfo&amp;gt; (accessor constant)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gef&amp;gt; job 0x3e4da55066a1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da55066a1: [Code]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind = OPTIMIZED_FUNCTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack_slots = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compiler = crankshaft&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Instructions (size = 218)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506700     0  55             push rbp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506701     1  4889e5         REX.W movq rbp,rsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506704     4  56             push rsi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506705     5  57             push rdi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gef&amp;gt; bp *0x3e4da5506700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gef&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Continuing.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thread 1 &amp;quot;d8&amp;quot; hit Breakpoint 2, 0x00003e4da5506700 in ?? ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; code:i386:x86-64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506700    push rbp   $pc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506701    mov rbp, rsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506704    push rsi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506705    push rdi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da5506706    sub rsp, 0x8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x3e4da550670a    mov rax, QWORD PTR [rbp-0x8]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、调试未优化代码&quot;&gt;&lt;a href=&quot;#1、调试未优化代码&quot; class=&quot;headerlink&quot; title=&quot;1、调试未优化代码&quot;&gt;&lt;/a&gt;1、调试未优化代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="v8" scheme="http://riusksk.github.io/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>优秀作者</title>
    <link href="http://riusksk.github.io/2017/02/26/0/"/>
    <id>http://riusksk.github.io/2017/02/26/0/</id>
    <published>2017-02-26T06:27:31.000Z</published>
    <updated>2017-02-26T06:35:14.000Z</updated>
    
    <content type="html">&lt;p&gt;之前因为《漏洞战争：软件漏洞分析精要》一书的出版，获得电子工业出版社的“优秀作者”称号，感谢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/优秀作者.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为《漏洞战争：软件漏洞分析精要》一书的出版，获得电子工业出版社的“优秀作者”称号，感谢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/优秀作者.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
